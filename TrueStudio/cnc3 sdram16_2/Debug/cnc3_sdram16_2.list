
cnc3_sdram16_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003990  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08003c28  08003c28  00013c28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003c38  08003c38  00013c38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003c3c  08003c3c  00013c3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  20000000  08003c40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000004c8  20000010  08003c50  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000c00  200004d8  08003c50  000204d8  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001730b  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000029ba  00000000  00000000  00037349  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000a28  00000000  00000000  00039d08  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000910  00000000  00000000  0003a730  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00005d5b  00000000  00000000  0003b040  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00004651  00000000  00000000  00040d9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  000453ec  2**0
                  CONTENTS, READONLY
 16 .debug_frame  0000272c  00000000  00000000  00045468  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	20000010 	.word	0x20000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08003c10 	.word	0x08003c10

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	20000014 	.word	0x20000014
 80002d4:	08003c10 	.word	0x08003c10

080002d8 <IS42S16320F_init>:
#include "IS42S16320F.h"

FMC_SDRAM_CommandTypeDef command;
HAL_StatusTypeDef hal_stat;

void IS42S16320F_init(SDRAM_HandleTypeDef* hsdram) {
 80002d8:	b580      	push	{r7, lr}
 80002da:	b084      	sub	sp, #16
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]
	__IO uint32_t tmpmrd = 0;
 80002e0:	2300      	movs	r3, #0
 80002e2:	60fb      	str	r3, [r7, #12]
	/* Step 1:  Configure a clock configuration enable command */
	command.CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 80002e4:	4b32      	ldr	r3, [pc, #200]	; (80003b0 <IS42S16320F_init+0xd8>)
 80002e6:	2201      	movs	r2, #1
 80002e8:	601a      	str	r2, [r3, #0]
	command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 80002ea:	4b31      	ldr	r3, [pc, #196]	; (80003b0 <IS42S16320F_init+0xd8>)
 80002ec:	2210      	movs	r2, #16
 80002ee:	605a      	str	r2, [r3, #4]
	command.AutoRefreshNumber = 1;
 80002f0:	4b2f      	ldr	r3, [pc, #188]	; (80003b0 <IS42S16320F_init+0xd8>)
 80002f2:	2201      	movs	r2, #1
 80002f4:	609a      	str	r2, [r3, #8]
	command.ModeRegisterDefinition = 0;
 80002f6:	4b2e      	ldr	r3, [pc, #184]	; (80003b0 <IS42S16320F_init+0xd8>)
 80002f8:	2200      	movs	r2, #0
 80002fa:	60da      	str	r2, [r3, #12]

	/* Send the command */
	hal_stat = HAL_SDRAM_SendCommand(hsdram, &command, SDRAM_TIMEOUT);
 80002fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000300:	492b      	ldr	r1, [pc, #172]	; (80003b0 <IS42S16320F_init+0xd8>)
 8000302:	6878      	ldr	r0, [r7, #4]
 8000304:	f003 f966 	bl	80035d4 <HAL_SDRAM_SendCommand>
 8000308:	4603      	mov	r3, r0
 800030a:	461a      	mov	r2, r3
 800030c:	4b29      	ldr	r3, [pc, #164]	; (80003b4 <IS42S16320F_init+0xdc>)
 800030e:	701a      	strb	r2, [r3, #0]

	/* Step 2: Insert 100 us minimum delay */
	/* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
	HAL_Delay(1);
 8000310:	2001      	movs	r0, #1
 8000312:	f000 fe75 	bl	8001000 <HAL_Delay>

	/* Step 3: Configure a PALL (precharge all) command */
	command.CommandMode = FMC_SDRAM_CMD_PALL;
 8000316:	4b26      	ldr	r3, [pc, #152]	; (80003b0 <IS42S16320F_init+0xd8>)
 8000318:	2202      	movs	r2, #2
 800031a:	601a      	str	r2, [r3, #0]
	command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 800031c:	4b24      	ldr	r3, [pc, #144]	; (80003b0 <IS42S16320F_init+0xd8>)
 800031e:	2210      	movs	r2, #16
 8000320:	605a      	str	r2, [r3, #4]
	command.AutoRefreshNumber = 1;
 8000322:	4b23      	ldr	r3, [pc, #140]	; (80003b0 <IS42S16320F_init+0xd8>)
 8000324:	2201      	movs	r2, #1
 8000326:	609a      	str	r2, [r3, #8]
	command.ModeRegisterDefinition = 0;
 8000328:	4b21      	ldr	r3, [pc, #132]	; (80003b0 <IS42S16320F_init+0xd8>)
 800032a:	2200      	movs	r2, #0
 800032c:	60da      	str	r2, [r3, #12]

	/* Send the command */
	hal_stat = HAL_SDRAM_SendCommand(hsdram, &command, SDRAM_TIMEOUT);
 800032e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000332:	491f      	ldr	r1, [pc, #124]	; (80003b0 <IS42S16320F_init+0xd8>)
 8000334:	6878      	ldr	r0, [r7, #4]
 8000336:	f003 f94d 	bl	80035d4 <HAL_SDRAM_SendCommand>
 800033a:	4603      	mov	r3, r0
 800033c:	461a      	mov	r2, r3
 800033e:	4b1d      	ldr	r3, [pc, #116]	; (80003b4 <IS42S16320F_init+0xdc>)
 8000340:	701a      	strb	r2, [r3, #0]

	/* Step 4 : Configure a Auto-Refresh command */
	command.CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8000342:	4b1b      	ldr	r3, [pc, #108]	; (80003b0 <IS42S16320F_init+0xd8>)
 8000344:	2203      	movs	r2, #3
 8000346:	601a      	str	r2, [r3, #0]
	command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8000348:	4b19      	ldr	r3, [pc, #100]	; (80003b0 <IS42S16320F_init+0xd8>)
 800034a:	2210      	movs	r2, #16
 800034c:	605a      	str	r2, [r3, #4]
	command.AutoRefreshNumber = 8;
 800034e:	4b18      	ldr	r3, [pc, #96]	; (80003b0 <IS42S16320F_init+0xd8>)
 8000350:	2208      	movs	r2, #8
 8000352:	609a      	str	r2, [r3, #8]
	command.ModeRegisterDefinition = 0;
 8000354:	4b16      	ldr	r3, [pc, #88]	; (80003b0 <IS42S16320F_init+0xd8>)
 8000356:	2200      	movs	r2, #0
 8000358:	60da      	str	r2, [r3, #12]

	/* Send the command */
	hal_stat = HAL_SDRAM_SendCommand(hsdram, &command, SDRAM_TIMEOUT);
 800035a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800035e:	4914      	ldr	r1, [pc, #80]	; (80003b0 <IS42S16320F_init+0xd8>)
 8000360:	6878      	ldr	r0, [r7, #4]
 8000362:	f003 f937 	bl	80035d4 <HAL_SDRAM_SendCommand>
 8000366:	4603      	mov	r3, r0
 8000368:	461a      	mov	r2, r3
 800036a:	4b12      	ldr	r3, [pc, #72]	; (80003b4 <IS42S16320F_init+0xdc>)
 800036c:	701a      	strb	r2, [r3, #0]

	/* Step 5: Program the external memory mode register */
	tmpmrd = (uint32_t)	SDRAM_MODEREG_BURST_LENGTH_1			|
 800036e:	f44f 7308 	mov.w	r3, #544	; 0x220
 8000372:	60fb      	str	r3, [r7, #12]
						SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL		|
						SDRAM_MODEREG_CAS_LATENCY_2				|
						SDRAM_MODEREG_OPERATING_MODE_STANDARD	|
						SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

	 command.CommandMode = FMC_SDRAM_CMD_LOAD_MODE;
 8000374:	4b0e      	ldr	r3, [pc, #56]	; (80003b0 <IS42S16320F_init+0xd8>)
 8000376:	2204      	movs	r2, #4
 8000378:	601a      	str	r2, [r3, #0]
	 command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 800037a:	4b0d      	ldr	r3, [pc, #52]	; (80003b0 <IS42S16320F_init+0xd8>)
 800037c:	2210      	movs	r2, #16
 800037e:	605a      	str	r2, [r3, #4]
	 command.AutoRefreshNumber = 1;
 8000380:	4b0b      	ldr	r3, [pc, #44]	; (80003b0 <IS42S16320F_init+0xd8>)
 8000382:	2201      	movs	r2, #1
 8000384:	609a      	str	r2, [r3, #8]
	 command.ModeRegisterDefinition = tmpmrd;
 8000386:	68fb      	ldr	r3, [r7, #12]
 8000388:	4a09      	ldr	r2, [pc, #36]	; (80003b0 <IS42S16320F_init+0xd8>)
 800038a:	60d3      	str	r3, [r2, #12]

	 /* Send the command */
	 hal_stat = HAL_SDRAM_SendCommand(hsdram, &command, SDRAM_TIMEOUT);
 800038c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000390:	4907      	ldr	r1, [pc, #28]	; (80003b0 <IS42S16320F_init+0xd8>)
 8000392:	6878      	ldr	r0, [r7, #4]
 8000394:	f003 f91e 	bl	80035d4 <HAL_SDRAM_SendCommand>
 8000398:	4603      	mov	r3, r0
 800039a:	461a      	mov	r2, r3
 800039c:	4b05      	ldr	r3, [pc, #20]	; (80003b4 <IS42S16320F_init+0xdc>)
 800039e:	701a      	strb	r2, [r3, #0]
	 // 64ms /8k = 7.8125us
	 // 7.8125us * 50 MHz - 20 = 370
	 // My3
	 // 64ms /8k = 7.8125us
	 // 7.8125us * 33.3 MHz - 20 = 240
	 HAL_SDRAM_ProgramRefreshRate(hsdram, 240); // refresh count
 80003a0:	21f0      	movs	r1, #240	; 0xf0
 80003a2:	6878      	ldr	r0, [r7, #4]
 80003a4:	f003 f94b 	bl	800363e <HAL_SDRAM_ProgramRefreshRate>
//	 hsdram->Instance->SDRTR |= ((uint32_t)((1292)<< 1));
}
 80003a8:	bf00      	nop
 80003aa:	3710      	adds	r7, #16
 80003ac:	46bd      	mov	sp, r7
 80003ae:	bd80      	pop	{r7, pc}
 80003b0:	20000040 	.word	0x20000040
 80003b4:	20000050 	.word	0x20000050

080003b8 <MX_FMC_Init>:
SRAM_HandleTypeDef hsram1;
SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b08e      	sub	sp, #56	; 0x38
 80003bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 80003be:	f107 031c 	add.w	r3, r7, #28
 80003c2:	2200      	movs	r2, #0
 80003c4:	601a      	str	r2, [r3, #0]
 80003c6:	605a      	str	r2, [r3, #4]
 80003c8:	609a      	str	r2, [r3, #8]
 80003ca:	60da      	str	r2, [r3, #12]
 80003cc:	611a      	str	r2, [r3, #16]
 80003ce:	615a      	str	r2, [r3, #20]
 80003d0:	619a      	str	r2, [r3, #24]
  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80003d2:	463b      	mov	r3, r7
 80003d4:	2200      	movs	r2, #0
 80003d6:	601a      	str	r2, [r3, #0]
 80003d8:	605a      	str	r2, [r3, #4]
 80003da:	609a      	str	r2, [r3, #8]
 80003dc:	60da      	str	r2, [r3, #12]
 80003de:	611a      	str	r2, [r3, #16]
 80003e0:	615a      	str	r2, [r3, #20]
 80003e2:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 80003e4:	4b47      	ldr	r3, [pc, #284]	; (8000504 <MX_FMC_Init+0x14c>)
 80003e6:	4a48      	ldr	r2, [pc, #288]	; (8000508 <MX_FMC_Init+0x150>)
 80003e8:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 80003ea:	4b46      	ldr	r3, [pc, #280]	; (8000504 <MX_FMC_Init+0x14c>)
 80003ec:	4a47      	ldr	r2, [pc, #284]	; (800050c <MX_FMC_Init+0x154>)
 80003ee:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 80003f0:	4b44      	ldr	r3, [pc, #272]	; (8000504 <MX_FMC_Init+0x14c>)
 80003f2:	2200      	movs	r2, #0
 80003f4:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_ENABLE;
 80003f6:	4b43      	ldr	r3, [pc, #268]	; (8000504 <MX_FMC_Init+0x14c>)
 80003f8:	2202      	movs	r2, #2
 80003fa:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_PSRAM;
 80003fc:	4b41      	ldr	r3, [pc, #260]	; (8000504 <MX_FMC_Init+0x14c>)
 80003fe:	2204      	movs	r2, #4
 8000400:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000402:	4b40      	ldr	r3, [pc, #256]	; (8000504 <MX_FMC_Init+0x14c>)
 8000404:	2210      	movs	r2, #16
 8000406:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8000408:	4b3e      	ldr	r3, [pc, #248]	; (8000504 <MX_FMC_Init+0x14c>)
 800040a:	2200      	movs	r2, #0
 800040c:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 800040e:	4b3d      	ldr	r3, [pc, #244]	; (8000504 <MX_FMC_Init+0x14c>)
 8000410:	2200      	movs	r2, #0
 8000412:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8000414:	4b3b      	ldr	r3, [pc, #236]	; (8000504 <MX_FMC_Init+0x14c>)
 8000416:	2200      	movs	r2, #0
 8000418:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 800041a:	4b3a      	ldr	r3, [pc, #232]	; (8000504 <MX_FMC_Init+0x14c>)
 800041c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000420:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 8000422:	4b38      	ldr	r3, [pc, #224]	; (8000504 <MX_FMC_Init+0x14c>)
 8000424:	2200      	movs	r2, #0
 8000426:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8000428:	4b36      	ldr	r3, [pc, #216]	; (8000504 <MX_FMC_Init+0x14c>)
 800042a:	2200      	movs	r2, #0
 800042c:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 800042e:	4b35      	ldr	r3, [pc, #212]	; (8000504 <MX_FMC_Init+0x14c>)
 8000430:	2200      	movs	r2, #0
 8000432:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8000434:	4b33      	ldr	r3, [pc, #204]	; (8000504 <MX_FMC_Init+0x14c>)
 8000436:	2200      	movs	r2, #0
 8000438:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 800043a:	4b32      	ldr	r3, [pc, #200]	; (8000504 <MX_FMC_Init+0x14c>)
 800043c:	2200      	movs	r2, #0
 800043e:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_DISABLE;
 8000440:	4b30      	ldr	r3, [pc, #192]	; (8000504 <MX_FMC_Init+0x14c>)
 8000442:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000446:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8000448:	4b2e      	ldr	r3, [pc, #184]	; (8000504 <MX_FMC_Init+0x14c>)
 800044a:	2200      	movs	r2, #0
 800044c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 800044e:	230f      	movs	r3, #15
 8000450:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 6;
 8000452:	2306      	movs	r3, #6
 8000454:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 15;
 8000456:	230f      	movs	r3, #15
 8000458:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 6;
 800045a:	2306      	movs	r3, #6
 800045c:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 800045e:	2310      	movs	r3, #16
 8000460:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 8000462:	2311      	movs	r3, #17
 8000464:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 8000466:	2300      	movs	r3, #0
 8000468:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 800046a:	f107 031c 	add.w	r3, r7, #28
 800046e:	2200      	movs	r2, #0
 8000470:	4619      	mov	r1, r3
 8000472:	4824      	ldr	r0, [pc, #144]	; (8000504 <MX_FMC_Init+0x14c>)
 8000474:	f003 f90c 	bl	8003690 <HAL_SRAM_Init>
 8000478:	4603      	mov	r3, r0
 800047a:	2b00      	cmp	r3, #0
 800047c:	d001      	beq.n	8000482 <MX_FMC_Init+0xca>
  {
    Error_Handler( );
 800047e:	f000 fc59 	bl	8000d34 <Error_Handler>
  }

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000482:	4b23      	ldr	r3, [pc, #140]	; (8000510 <MX_FMC_Init+0x158>)
 8000484:	4a23      	ldr	r2, [pc, #140]	; (8000514 <MX_FMC_Init+0x15c>)
 8000486:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8000488:	4b21      	ldr	r3, [pc, #132]	; (8000510 <MX_FMC_Init+0x158>)
 800048a:	2200      	movs	r2, #0
 800048c:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_10;
 800048e:	4b20      	ldr	r3, [pc, #128]	; (8000510 <MX_FMC_Init+0x158>)
 8000490:	2202      	movs	r2, #2
 8000492:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 8000494:	4b1e      	ldr	r3, [pc, #120]	; (8000510 <MX_FMC_Init+0x158>)
 8000496:	2208      	movs	r2, #8
 8000498:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 800049a:	4b1d      	ldr	r3, [pc, #116]	; (8000510 <MX_FMC_Init+0x158>)
 800049c:	2210      	movs	r2, #16
 800049e:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80004a0:	4b1b      	ldr	r3, [pc, #108]	; (8000510 <MX_FMC_Init+0x158>)
 80004a2:	2240      	movs	r2, #64	; 0x40
 80004a4:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 80004a6:	4b1a      	ldr	r3, [pc, #104]	; (8000510 <MX_FMC_Init+0x158>)
 80004a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80004ac:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80004ae:	4b18      	ldr	r3, [pc, #96]	; (8000510 <MX_FMC_Init+0x158>)
 80004b0:	2200      	movs	r2, #0
 80004b2:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_3;
 80004b4:	4b16      	ldr	r3, [pc, #88]	; (8000510 <MX_FMC_Init+0x158>)
 80004b6:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 80004ba:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 80004bc:	4b14      	ldr	r3, [pc, #80]	; (8000510 <MX_FMC_Init+0x158>)
 80004be:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80004c2:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80004c4:	4b12      	ldr	r3, [pc, #72]	; (8000510 <MX_FMC_Init+0x158>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 80004ca:	2302      	movs	r3, #2
 80004cc:	603b      	str	r3, [r7, #0]
  SdramTiming.ExitSelfRefreshDelay = 6;
 80004ce:	2306      	movs	r3, #6
 80004d0:	607b      	str	r3, [r7, #4]
  SdramTiming.SelfRefreshTime = 4;
 80004d2:	2304      	movs	r3, #4
 80004d4:	60bb      	str	r3, [r7, #8]
  SdramTiming.RowCycleDelay = 6;
 80004d6:	2306      	movs	r3, #6
 80004d8:	60fb      	str	r3, [r7, #12]
  SdramTiming.WriteRecoveryTime = 2;
 80004da:	2302      	movs	r3, #2
 80004dc:	613b      	str	r3, [r7, #16]
  SdramTiming.RPDelay = 2;
 80004de:	2302      	movs	r3, #2
 80004e0:	617b      	str	r3, [r7, #20]
  SdramTiming.RCDDelay = 2;
 80004e2:	2302      	movs	r3, #2
 80004e4:	61bb      	str	r3, [r7, #24]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80004e6:	463b      	mov	r3, r7
 80004e8:	4619      	mov	r1, r3
 80004ea:	4809      	ldr	r0, [pc, #36]	; (8000510 <MX_FMC_Init+0x158>)
 80004ec:	f003 f836 	bl	800355c <HAL_SDRAM_Init>
 80004f0:	4603      	mov	r3, r0
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d001      	beq.n	80004fa <MX_FMC_Init+0x142>
  {
    Error_Handler( );
 80004f6:	f000 fc1d 	bl	8000d34 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80004fa:	bf00      	nop
 80004fc:	3738      	adds	r7, #56	; 0x38
 80004fe:	46bd      	mov	sp, r7
 8000500:	bd80      	pop	{r7, pc}
 8000502:	bf00      	nop
 8000504:	20000054 	.word	0x20000054
 8000508:	52004000 	.word	0x52004000
 800050c:	52004104 	.word	0x52004104
 8000510:	200000a0 	.word	0x200000a0
 8000514:	52004140 	.word	0x52004140

08000518 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000518:	b580      	push	{r7, lr}
 800051a:	b0b6      	sub	sp, #216	; 0xd8
 800051c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800051e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000522:	2200      	movs	r2, #0
 8000524:	601a      	str	r2, [r3, #0]
 8000526:	605a      	str	r2, [r3, #4]
 8000528:	609a      	str	r2, [r3, #8]
 800052a:	60da      	str	r2, [r3, #12]
 800052c:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 800052e:	4b6f      	ldr	r3, [pc, #444]	; (80006ec <HAL_FMC_MspInit+0x1d4>)
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	2b00      	cmp	r3, #0
 8000534:	f040 80d5 	bne.w	80006e2 <HAL_FMC_MspInit+0x1ca>
    return;
  }
  FMC_Initialized = 1;
 8000538:	4b6c      	ldr	r3, [pc, #432]	; (80006ec <HAL_FMC_MspInit+0x1d4>)
 800053a:	2201      	movs	r2, #1
 800053c:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800053e:	f107 0308 	add.w	r3, r7, #8
 8000542:	22bc      	movs	r2, #188	; 0xbc
 8000544:	2100      	movs	r1, #0
 8000546:	4618      	mov	r0, r3
 8000548:	f003 fb5a 	bl	8003c00 <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 800054c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000550:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 8000552:	2300      	movs	r3, #0
 8000554:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000556:	f107 0308 	add.w	r3, r7, #8
 800055a:	4618      	mov	r0, r3
 800055c:	f001 ff9c 	bl	8002498 <HAL_RCCEx_PeriphCLKConfig>
 8000560:	4603      	mov	r3, r0
 8000562:	2b00      	cmp	r3, #0
 8000564:	d001      	beq.n	800056a <HAL_FMC_MspInit+0x52>
    {
      Error_Handler();
 8000566:	f000 fbe5 	bl	8000d34 <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800056a:	4a61      	ldr	r2, [pc, #388]	; (80006f0 <HAL_FMC_MspInit+0x1d8>)
 800056c:	4b60      	ldr	r3, [pc, #384]	; (80006f0 <HAL_FMC_MspInit+0x1d8>)
 800056e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000572:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000576:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 800057a:	4b5d      	ldr	r3, [pc, #372]	; (80006f0 <HAL_FMC_MspInit+0x1d8>)
 800057c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000580:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000584:	607b      	str	r3, [r7, #4]
 8000586:	687b      	ldr	r3, [r7, #4]
  PB7   ------> FMC_NL
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000588:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800058c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000590:	2302      	movs	r3, #2
 8000592:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000596:	2300      	movs	r3, #0
 8000598:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800059c:	2303      	movs	r3, #3
 800059e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80005a2:	230c      	movs	r3, #12
 80005a4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80005a8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80005ac:	4619      	mov	r1, r3
 80005ae:	4851      	ldr	r0, [pc, #324]	; (80006f4 <HAL_FMC_MspInit+0x1dc>)
 80005b0:	f000 fe36 	bl	8001220 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80005b4:	2380      	movs	r3, #128	; 0x80
 80005b6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005ba:	2302      	movs	r3, #2
 80005bc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c0:	2300      	movs	r3, #0
 80005c2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005c6:	2303      	movs	r3, #3
 80005c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80005cc:	230c      	movs	r3, #12
 80005ce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005d2:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80005d6:	4619      	mov	r1, r3
 80005d8:	4847      	ldr	r0, [pc, #284]	; (80006f8 <HAL_FMC_MspInit+0x1e0>)
 80005da:	f000 fe21 	bl	8001220 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80005de:	2330      	movs	r3, #48	; 0x30
 80005e0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005e4:	2302      	movs	r3, #2
 80005e6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ea:	2300      	movs	r3, #0
 80005ec:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005f0:	2303      	movs	r3, #3
 80005f2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80005f6:	230c      	movs	r3, #12
 80005f8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005fc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000600:	4619      	mov	r1, r3
 8000602:	483e      	ldr	r0, [pc, #248]	; (80006fc <HAL_FMC_MspInit+0x1e4>)
 8000604:	f000 fe0c 	bl	8001220 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
 8000608:	f248 1337 	movw	r3, #33079	; 0x8137
 800060c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000610:	2302      	movs	r3, #2
 8000612:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000616:	2300      	movs	r3, #0
 8000618:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800061c:	2303      	movs	r3, #3
 800061e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000622:	230c      	movs	r3, #12
 8000624:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000628:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800062c:	4619      	mov	r1, r3
 800062e:	4834      	ldr	r0, [pc, #208]	; (8000700 <HAL_FMC_MspInit+0x1e8>)
 8000630:	f000 fdf6 	bl	8001220 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000634:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000638:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800063c:	2302      	movs	r3, #2
 800063e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000642:	2300      	movs	r3, #0
 8000644:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000648:	2303      	movs	r3, #3
 800064a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800064e:	230c      	movs	r3, #12
 8000650:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000654:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000658:	4619      	mov	r1, r3
 800065a:	482a      	ldr	r0, [pc, #168]	; (8000704 <HAL_FMC_MspInit+0x1ec>)
 800065c:	f000 fde0 	bl	8001220 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8000660:	f24c 7333 	movw	r3, #50995	; 0xc733
 8000664:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000668:	2302      	movs	r3, #2
 800066a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066e:	2300      	movs	r3, #0
 8000670:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000674:	2303      	movs	r3, #3
 8000676:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800067a:	230c      	movs	r3, #12
 800067c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000680:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000684:	4619      	mov	r1, r3
 8000686:	4820      	ldr	r0, [pc, #128]	; (8000708 <HAL_FMC_MspInit+0x1f0>)
 8000688:	f000 fdca 	bl	8001220 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800068c:	2380      	movs	r3, #128	; 0x80
 800068e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000692:	2302      	movs	r3, #2
 8000694:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000698:	2300      	movs	r3, #0
 800069a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800069e:	2303      	movs	r3, #3
 80006a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF9_FMC;
 80006a4:	2309      	movs	r3, #9
 80006a6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006aa:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80006ae:	4619      	mov	r1, r3
 80006b0:	4812      	ldr	r0, [pc, #72]	; (80006fc <HAL_FMC_MspInit+0x1e4>)
 80006b2:	f000 fdb5 	bl	8001220 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80006b6:	2380      	movs	r3, #128	; 0x80
 80006b8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006bc:	2302      	movs	r3, #2
 80006be:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c2:	2300      	movs	r3, #0
 80006c4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006c8:	2303      	movs	r3, #3
 80006ca:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80006ce:	230c      	movs	r3, #12
 80006d0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006d4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80006d8:	4619      	mov	r1, r3
 80006da:	480c      	ldr	r0, [pc, #48]	; (800070c <HAL_FMC_MspInit+0x1f4>)
 80006dc:	f000 fda0 	bl	8001220 <HAL_GPIO_Init>
 80006e0:	e000      	b.n	80006e4 <HAL_FMC_MspInit+0x1cc>
    return;
 80006e2:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80006e4:	37d8      	adds	r7, #216	; 0xd8
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	2000002c 	.word	0x2000002c
 80006f0:	58024400 	.word	0x58024400
 80006f4:	58021400 	.word	0x58021400
 80006f8:	58020000 	.word	0x58020000
 80006fc:	58020800 	.word	0x58020800
 8000700:	58021800 	.word	0x58021800
 8000704:	58021000 	.word	0x58021000
 8000708:	58020c00 	.word	0x58020c00
 800070c:	58020400 	.word	0x58020400

08000710 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8000718:	f7ff fefe 	bl	8000518 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 800071c:	bf00      	nop
 800071e:	3708      	adds	r7, #8
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}

08000724 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800072c:	f7ff fef4 	bl	8000518 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8000730:	bf00      	nop
 8000732:	3708      	adds	r7, #8
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}

08000738 <MX_GPIO_Init>:
     PG9   ------> USART6_RX
     PG12   ------> USART6_DE
     PB5   ------> USB_OTG_HS_ULPI_D7
*/
void MX_GPIO_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b08e      	sub	sp, #56	; 0x38
 800073c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800073e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000742:	2200      	movs	r2, #0
 8000744:	601a      	str	r2, [r3, #0]
 8000746:	605a      	str	r2, [r3, #4]
 8000748:	609a      	str	r2, [r3, #8]
 800074a:	60da      	str	r2, [r3, #12]
 800074c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800074e:	4aad      	ldr	r2, [pc, #692]	; (8000a04 <MX_GPIO_Init+0x2cc>)
 8000750:	4bac      	ldr	r3, [pc, #688]	; (8000a04 <MX_GPIO_Init+0x2cc>)
 8000752:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000756:	f043 0310 	orr.w	r3, r3, #16
 800075a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800075e:	4ba9      	ldr	r3, [pc, #676]	; (8000a04 <MX_GPIO_Init+0x2cc>)
 8000760:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000764:	f003 0310 	and.w	r3, r3, #16
 8000768:	623b      	str	r3, [r7, #32]
 800076a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800076c:	4aa5      	ldr	r2, [pc, #660]	; (8000a04 <MX_GPIO_Init+0x2cc>)
 800076e:	4ba5      	ldr	r3, [pc, #660]	; (8000a04 <MX_GPIO_Init+0x2cc>)
 8000770:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000774:	f043 0304 	orr.w	r3, r3, #4
 8000778:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800077c:	4ba1      	ldr	r3, [pc, #644]	; (8000a04 <MX_GPIO_Init+0x2cc>)
 800077e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000782:	f003 0304 	and.w	r3, r3, #4
 8000786:	61fb      	str	r3, [r7, #28]
 8000788:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800078a:	4a9e      	ldr	r2, [pc, #632]	; (8000a04 <MX_GPIO_Init+0x2cc>)
 800078c:	4b9d      	ldr	r3, [pc, #628]	; (8000a04 <MX_GPIO_Init+0x2cc>)
 800078e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000792:	f043 0320 	orr.w	r3, r3, #32
 8000796:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800079a:	4b9a      	ldr	r3, [pc, #616]	; (8000a04 <MX_GPIO_Init+0x2cc>)
 800079c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007a0:	f003 0320 	and.w	r3, r3, #32
 80007a4:	61bb      	str	r3, [r7, #24]
 80007a6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007a8:	4a96      	ldr	r2, [pc, #600]	; (8000a04 <MX_GPIO_Init+0x2cc>)
 80007aa:	4b96      	ldr	r3, [pc, #600]	; (8000a04 <MX_GPIO_Init+0x2cc>)
 80007ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007b4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007b8:	4b92      	ldr	r3, [pc, #584]	; (8000a04 <MX_GPIO_Init+0x2cc>)
 80007ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007c2:	617b      	str	r3, [r7, #20]
 80007c4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c6:	4a8f      	ldr	r2, [pc, #572]	; (8000a04 <MX_GPIO_Init+0x2cc>)
 80007c8:	4b8e      	ldr	r3, [pc, #568]	; (8000a04 <MX_GPIO_Init+0x2cc>)
 80007ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007ce:	f043 0301 	orr.w	r3, r3, #1
 80007d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007d6:	4b8b      	ldr	r3, [pc, #556]	; (8000a04 <MX_GPIO_Init+0x2cc>)
 80007d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007dc:	f003 0301 	and.w	r3, r3, #1
 80007e0:	613b      	str	r3, [r7, #16]
 80007e2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007e4:	4a87      	ldr	r2, [pc, #540]	; (8000a04 <MX_GPIO_Init+0x2cc>)
 80007e6:	4b87      	ldr	r3, [pc, #540]	; (8000a04 <MX_GPIO_Init+0x2cc>)
 80007e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007ec:	f043 0302 	orr.w	r3, r3, #2
 80007f0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007f4:	4b83      	ldr	r3, [pc, #524]	; (8000a04 <MX_GPIO_Init+0x2cc>)
 80007f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007fa:	f003 0302 	and.w	r3, r3, #2
 80007fe:	60fb      	str	r3, [r7, #12]
 8000800:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000802:	4a80      	ldr	r2, [pc, #512]	; (8000a04 <MX_GPIO_Init+0x2cc>)
 8000804:	4b7f      	ldr	r3, [pc, #508]	; (8000a04 <MX_GPIO_Init+0x2cc>)
 8000806:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800080a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800080e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000812:	4b7c      	ldr	r3, [pc, #496]	; (8000a04 <MX_GPIO_Init+0x2cc>)
 8000814:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000818:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800081c:	60bb      	str	r3, [r7, #8]
 800081e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000820:	4a78      	ldr	r2, [pc, #480]	; (8000a04 <MX_GPIO_Init+0x2cc>)
 8000822:	4b78      	ldr	r3, [pc, #480]	; (8000a04 <MX_GPIO_Init+0x2cc>)
 8000824:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000828:	f043 0308 	orr.w	r3, r3, #8
 800082c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000830:	4b74      	ldr	r3, [pc, #464]	; (8000a04 <MX_GPIO_Init+0x2cc>)
 8000832:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000836:	f003 0308 	and.w	r3, r3, #8
 800083a:	607b      	str	r3, [r7, #4]
 800083c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RES3_Pin|USB_RESETN_Pin|LED0_Pin|LED1_Pin
 800083e:	2200      	movs	r2, #0
 8000840:	f643 7102 	movw	r1, #16130	; 0x3f02
 8000844:	4870      	ldr	r0, [pc, #448]	; (8000a08 <MX_GPIO_Init+0x2d0>)
 8000846:	f000 fe9b 	bl	8001580 <HAL_GPIO_WritePin>
                          |RES0_Pin|RES1_Pin|RES2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = KEY_INC_Pin|KEY_DEC_Pin|KEY_PUMP_Pin|KEY_DRUM_Pin
 800084a:	237c      	movs	r3, #124	; 0x7c
 800084c:	627b      	str	r3, [r7, #36]	; 0x24
                          |KEY_WIRE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800084e:	2300      	movs	r3, #0
 8000850:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000852:	2300      	movs	r3, #0
 8000854:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000856:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800085a:	4619      	mov	r1, r3
 800085c:	486b      	ldr	r0, [pc, #428]	; (8000a0c <MX_GPIO_Init+0x2d4>)
 800085e:	f000 fcdf 	bl	8001220 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RES3_Pin|USB_RESETN_Pin|LED0_Pin|LED1_Pin
 8000862:	f643 7302 	movw	r3, #16130	; 0x3f02
 8000866:	627b      	str	r3, [r7, #36]	; 0x24
                          |RES0_Pin|RES1_Pin|RES2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000868:	2301      	movs	r3, #1
 800086a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086c:	2300      	movs	r3, #0
 800086e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000870:	2300      	movs	r3, #0
 8000872:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000874:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000878:	4619      	mov	r1, r3
 800087a:	4863      	ldr	r0, [pc, #396]	; (8000a08 <MX_GPIO_Init+0x2d0>)
 800087c:	f000 fcd0 	bl	8001220 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF7 PF8 PF9 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8000880:	f44f 7360 	mov.w	r3, #896	; 0x380
 8000884:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000886:	2303      	movs	r3, #3
 8000888:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088a:	2300      	movs	r3, #0
 800088c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800088e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000892:	4619      	mov	r1, r3
 8000894:	485e      	ldr	r0, [pc, #376]	; (8000a10 <MX_GPIO_Init+0x2d8>)
 8000896:	f000 fcc3 	bl	8001220 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 800089a:	230d      	movs	r3, #13
 800089c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800089e:	2302      	movs	r3, #2
 80008a0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a2:	2300      	movs	r3, #0
 80008a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008a6:	2302      	movs	r3, #2
 80008a8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 80008aa:	230a      	movs	r3, #10
 80008ac:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008b2:	4619      	mov	r1, r3
 80008b4:	4854      	ldr	r0, [pc, #336]	; (8000a08 <MX_GPIO_Init+0x2d0>)
 80008b6:	f000 fcb3 	bl	8001220 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 80008ba:	2306      	movs	r3, #6
 80008bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008be:	2302      	movs	r3, #2
 80008c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c2:	2300      	movs	r3, #0
 80008c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c6:	2300      	movs	r3, #0
 80008c8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008ca:	2307      	movs	r3, #7
 80008cc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008d2:	4619      	mov	r1, r3
 80008d4:	484f      	ldr	r0, [pc, #316]	; (8000a14 <MX_GPIO_Init+0x2dc>)
 80008d6:	f000 fca3 	bl	8001220 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 80008da:	2328      	movs	r3, #40	; 0x28
 80008dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008de:	2302      	movs	r3, #2
 80008e0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e2:	2300      	movs	r3, #0
 80008e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008e6:	2302      	movs	r3, #2
 80008e8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 80008ea:	230a      	movs	r3, #10
 80008ec:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008f2:	4619      	mov	r1, r3
 80008f4:	4847      	ldr	r0, [pc, #284]	; (8000a14 <MX_GPIO_Init+0x2dc>)
 80008f6:	f000 fc93 	bl	8001220 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80008fa:	2310      	movs	r3, #16
 80008fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008fe:	2302      	movs	r3, #2
 8000900:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000902:	2300      	movs	r3, #0
 8000904:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000906:	2300      	movs	r3, #0
 8000908:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG2_FS;
 800090a:	230c      	movs	r3, #12
 800090c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800090e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000912:	4619      	mov	r1, r3
 8000914:	483f      	ldr	r0, [pc, #252]	; (8000a14 <MX_GPIO_Init+0x2dc>)
 8000916:	f000 fc83 	bl	8001220 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB10 PB11
                           PB12 PB13 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 800091a:	f643 4323 	movw	r3, #15395	; 0x3c23
 800091e:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000920:	2302      	movs	r3, #2
 8000922:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000924:	2300      	movs	r3, #0
 8000926:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000928:	2302      	movs	r3, #2
 800092a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 800092c:	230a      	movs	r3, #10
 800092e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000930:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000934:	4619      	mov	r1, r3
 8000936:	4838      	ldr	r0, [pc, #224]	; (8000a18 <MX_GPIO_Init+0x2e0>)
 8000938:	f000 fc72 	bl	8001220 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800093c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000940:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000942:	2302      	movs	r3, #2
 8000944:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000946:	2300      	movs	r3, #0
 8000948:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094a:	2300      	movs	r3, #0
 800094c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800094e:	2304      	movs	r3, #4
 8000950:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000952:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000956:	4619      	mov	r1, r3
 8000958:	482f      	ldr	r0, [pc, #188]	; (8000a18 <MX_GPIO_Init+0x2e0>)
 800095a:	f000 fc61 	bl	8001220 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG3 PGPin PGPin */
  GPIO_InitStruct.Pin = GPIO_PIN_3|OK220_Pin|IRQ_Pin;
 800095e:	23c8      	movs	r3, #200	; 0xc8
 8000960:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000962:	2300      	movs	r3, #0
 8000964:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000966:	2300      	movs	r3, #0
 8000968:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800096a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800096e:	4619      	mov	r1, r3
 8000970:	482a      	ldr	r0, [pc, #168]	; (8000a1c <MX_GPIO_Init+0x2e4>)
 8000972:	f000 fc55 	bl	8001220 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000976:	2340      	movs	r3, #64	; 0x40
 8000978:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800097a:	2302      	movs	r3, #2
 800097c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097e:	2300      	movs	r3, #0
 8000980:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000982:	2300      	movs	r3, #0
 8000984:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 8000986:	2307      	movs	r3, #7
 8000988:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800098a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800098e:	4619      	mov	r1, r3
 8000990:	481d      	ldr	r0, [pc, #116]	; (8000a08 <MX_GPIO_Init+0x2d0>)
 8000992:	f000 fc45 	bl	8001220 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000996:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800099a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800099c:	2302      	movs	r3, #2
 800099e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a0:	2300      	movs	r3, #0
 80009a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a4:	2300      	movs	r3, #0
 80009a6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80009a8:	230a      	movs	r3, #10
 80009aa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009b0:	4619      	mov	r1, r3
 80009b2:	4818      	ldr	r0, [pc, #96]	; (8000a14 <MX_GPIO_Init+0x2dc>)
 80009b4:	f000 fc34 	bl	8001220 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80009b8:	2340      	movs	r3, #64	; 0x40
 80009ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009bc:	2302      	movs	r3, #2
 80009be:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c0:	2300      	movs	r3, #0
 80009c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c4:	2300      	movs	r3, #0
 80009c6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009c8:	2307      	movs	r3, #7
 80009ca:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009d0:	4619      	mov	r1, r3
 80009d2:	4813      	ldr	r0, [pc, #76]	; (8000a20 <MX_GPIO_Init+0x2e8>)
 80009d4:	f000 fc24 	bl	8001220 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG9 PG12 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_12;
 80009d8:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 80009dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009de:	2302      	movs	r3, #2
 80009e0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e2:	2300      	movs	r3, #0
 80009e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e6:	2300      	movs	r3, #0
 80009e8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 80009ea:	2307      	movs	r3, #7
 80009ec:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80009ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009f2:	4619      	mov	r1, r3
 80009f4:	4809      	ldr	r0, [pc, #36]	; (8000a1c <MX_GPIO_Init+0x2e4>)
 80009f6:	f000 fc13 	bl	8001220 <HAL_GPIO_Init>

}
 80009fa:	bf00      	nop
 80009fc:	3738      	adds	r7, #56	; 0x38
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	58024400 	.word	0x58024400
 8000a08:	58020800 	.word	0x58020800
 8000a0c:	58021000 	.word	0x58021000
 8000a10:	58021400 	.word	0x58021400
 8000a14:	58020000 	.word	0x58020000
 8000a18:	58020400 	.word	0x58020400
 8000a1c:	58021800 	.word	0x58021800
 8000a20:	58020c00 	.word	0x58020c00

08000a24 <ledEnable0>:
#include <stdio.h>

static uint8_t cnt;
static uint32_t tic, toc;

void ledEnable0(BOOL ena) {
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, ena);
 8000a2e:	79fb      	ldrb	r3, [r7, #7]
 8000a30:	461a      	mov	r2, r3
 8000a32:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a36:	4803      	ldr	r0, [pc, #12]	; (8000a44 <ledEnable0+0x20>)
 8000a38:	f000 fda2 	bl	8001580 <HAL_GPIO_WritePin>
}
 8000a3c:	bf00      	nop
 8000a3e:	3708      	adds	r7, #8
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	58020800 	.word	0x58020800

08000a48 <ledEnable1>:

void ledEnable1(BOOL ena) {
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	4603      	mov	r3, r0
 8000a50:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, ena);
 8000a52:	79fb      	ldrb	r3, [r7, #7]
 8000a54:	461a      	mov	r2, r3
 8000a56:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a5a:	4803      	ldr	r0, [pc, #12]	; (8000a68 <ledEnable1+0x20>)
 8000a5c:	f000 fd90 	bl	8001580 <HAL_GPIO_WritePin>
}
 8000a60:	bf00      	nop
 8000a62:	3708      	adds	r7, #8
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	58020800 	.word	0x58020800

08000a6c <led_task>:

void led_task() {
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
	toc = HAL_GetTick();
 8000a70:	f000 faba 	bl	8000fe8 <HAL_GetTick>
 8000a74:	4602      	mov	r2, r0
 8000a76:	4b13      	ldr	r3, [pc, #76]	; (8000ac4 <led_task+0x58>)
 8000a78:	601a      	str	r2, [r3, #0]

	if (toc - tic >= LED_HALF_PERIOD) {
 8000a7a:	4b12      	ldr	r3, [pc, #72]	; (8000ac4 <led_task+0x58>)
 8000a7c:	681a      	ldr	r2, [r3, #0]
 8000a7e:	4b12      	ldr	r3, [pc, #72]	; (8000ac8 <led_task+0x5c>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	1ad3      	subs	r3, r2, r3
 8000a84:	2bf9      	cmp	r3, #249	; 0xf9
 8000a86:	d91a      	bls.n	8000abe <led_task+0x52>
		ledEnable0(cnt & 1);
 8000a88:	4b10      	ldr	r3, [pc, #64]	; (8000acc <led_task+0x60>)
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	f003 0301 	and.w	r3, r3, #1
 8000a90:	b2db      	uxtb	r3, r3
 8000a92:	4618      	mov	r0, r3
 8000a94:	f7ff ffc6 	bl	8000a24 <ledEnable0>
		ledEnable1(cnt & 2);
 8000a98:	4b0c      	ldr	r3, [pc, #48]	; (8000acc <led_task+0x60>)
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	f003 0302 	and.w	r3, r3, #2
 8000aa0:	b2db      	uxtb	r3, r3
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f7ff ffd0 	bl	8000a48 <ledEnable1>
		cnt++;
 8000aa8:	4b08      	ldr	r3, [pc, #32]	; (8000acc <led_task+0x60>)
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	3301      	adds	r3, #1
 8000aae:	b2da      	uxtb	r2, r3
 8000ab0:	4b06      	ldr	r3, [pc, #24]	; (8000acc <led_task+0x60>)
 8000ab2:	701a      	strb	r2, [r3, #0]
		tic += LED_HALF_PERIOD;
 8000ab4:	4b04      	ldr	r3, [pc, #16]	; (8000ac8 <led_task+0x5c>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	33fa      	adds	r3, #250	; 0xfa
 8000aba:	4a03      	ldr	r2, [pc, #12]	; (8000ac8 <led_task+0x5c>)
 8000abc:	6013      	str	r3, [r2, #0]
	}
}
 8000abe:	bf00      	nop
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	20000038 	.word	0x20000038
 8000ac8:	20000034 	.word	0x20000034
 8000acc:	20000030 	.word	0x20000030

08000ad0 <setBuffer16>:
/* USER CODE BEGIN 0 */
static void fillBufferLine16(uint16_t* pBuffer, uint32_t length, uint16_t start_value) {
	for (uint32_t i = 0; i < length; i++)
		pBuffer[i] = start_value + i;
}
static void setBuffer16(uint16_t* pBuffer, uint32_t length, uint16_t value) {
 8000ad0:	b480      	push	{r7}
 8000ad2:	b087      	sub	sp, #28
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	60f8      	str	r0, [r7, #12]
 8000ad8:	60b9      	str	r1, [r7, #8]
 8000ada:	4613      	mov	r3, r2
 8000adc:	80fb      	strh	r3, [r7, #6]
	for (uint32_t i = 0; i < length; i++)
 8000ade:	2300      	movs	r3, #0
 8000ae0:	617b      	str	r3, [r7, #20]
 8000ae2:	e008      	b.n	8000af6 <setBuffer16+0x26>
		pBuffer[i] = value;
 8000ae4:	697b      	ldr	r3, [r7, #20]
 8000ae6:	005b      	lsls	r3, r3, #1
 8000ae8:	68fa      	ldr	r2, [r7, #12]
 8000aea:	4413      	add	r3, r2
 8000aec:	88fa      	ldrh	r2, [r7, #6]
 8000aee:	801a      	strh	r2, [r3, #0]
	for (uint32_t i = 0; i < length; i++)
 8000af0:	697b      	ldr	r3, [r7, #20]
 8000af2:	3301      	adds	r3, #1
 8000af4:	617b      	str	r3, [r7, #20]
 8000af6:	697a      	ldr	r2, [r7, #20]
 8000af8:	68bb      	ldr	r3, [r7, #8]
 8000afa:	429a      	cmp	r2, r3
 8000afc:	d3f2      	bcc.n	8000ae4 <setBuffer16+0x14>
}
 8000afe:	bf00      	nop
 8000b00:	371c      	adds	r7, #28
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr
 8000b0a:	0000      	movs	r0, r0
 8000b0c:	0000      	movs	r0, r0
	...

08000b10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b084      	sub	sp, #16
 8000b14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	for (volatile int i = 0; i < 1e6; i++);
 8000b16:	2300      	movs	r3, #0
 8000b18:	603b      	str	r3, [r7, #0]
 8000b1a:	e002      	b.n	8000b22 <main+0x12>
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	3301      	adds	r3, #1
 8000b20:	603b      	str	r3, [r7, #0]
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	ee07 3a90 	vmov	s15, r3
 8000b28:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000b2c:	ed9f 6b3e 	vldr	d6, [pc, #248]	; 8000c28 <main+0x118>
 8000b30:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000b34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b38:	d4f0      	bmi.n	8000b1c <main+0xc>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000b3a:	4b3d      	ldr	r3, [pc, #244]	; (8000c30 <main+0x120>)
 8000b3c:	695b      	ldr	r3, [r3, #20]
 8000b3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d115      	bne.n	8000b72 <main+0x62>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000b46:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000b4a:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000b4e:	4b38      	ldr	r3, [pc, #224]	; (8000c30 <main+0x120>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000b56:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000b5a:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000b5e:	4a34      	ldr	r2, [pc, #208]	; (8000c30 <main+0x120>)
 8000b60:	4b33      	ldr	r3, [pc, #204]	; (8000c30 <main+0x120>)
 8000b62:	695b      	ldr	r3, [r3, #20]
 8000b64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b68:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000b6a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000b6e:	f3bf 8f6f 	isb	sy
  SCB_EnableICache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b72:	f000 f9b3 	bl	8000edc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b76:	f000 f863 	bl	8000c40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b7a:	f7ff fddd 	bl	8000738 <MX_GPIO_Init>
  MX_FMC_Init();
 8000b7e:	f7ff fc1b 	bl	80003b8 <MX_FMC_Init>
  /* USER CODE BEGIN 2 */
  IS42S16320F_init(&hsdram1);
 8000b82:	482c      	ldr	r0, [pc, #176]	; (8000c34 <main+0x124>)
 8000b84:	f7ff fba8 	bl	80002d8 <IS42S16320F_init>
//  fillBufferOnes16(sd_tx_buf, BUFFER_SIZE);
  setBuffer16(sd_rx_buf, BUFFER_SIZE, 0);
 8000b88:	2200      	movs	r2, #0
 8000b8a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b8e:	482a      	ldr	r0, [pc, #168]	; (8000c38 <main+0x128>)
 8000b90:	f7ff ff9e 	bl	8000ad0 <setBuffer16>

  for (int i = 0; i < BUFFER_SIZE; i++) {
 8000b94:	2300      	movs	r3, #0
 8000b96:	60fb      	str	r3, [r7, #12]
 8000b98:	e013      	b.n	8000bc2 <main+0xb2>
	  *(__IO uint16_t*)(SDRAM_BANK_ADDR + RW_ADDR + (i<<1)) = (uint16_t)(((0xff - (i & 0xff))<<8) | (i & 0xff));
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	005b      	lsls	r3, r3, #1
 8000b9e:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	43db      	mvns	r3, r3
 8000ba8:	021b      	lsls	r3, r3, #8
 8000baa:	b21a      	sxth	r2, r3
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	b21b      	sxth	r3, r3
 8000bb0:	b2db      	uxtb	r3, r3
 8000bb2:	b21b      	sxth	r3, r3
 8000bb4:	4313      	orrs	r3, r2
 8000bb6:	b21b      	sxth	r3, r3
 8000bb8:	b29b      	uxth	r3, r3
 8000bba:	800b      	strh	r3, [r1, #0]
  for (int i = 0; i < BUFFER_SIZE; i++) {
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	3301      	adds	r3, #1
 8000bc0:	60fb      	str	r3, [r7, #12]
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	2bff      	cmp	r3, #255	; 0xff
 8000bc6:	d9e8      	bls.n	8000b9a <main+0x8a>
  }

  for (int i = 0; i < BUFFER_SIZE; i++) {
 8000bc8:	2300      	movs	r3, #0
 8000bca:	60bb      	str	r3, [r7, #8]
 8000bcc:	e00c      	b.n	8000be8 <main+0xd8>
	  sd_rx_buf[i] = *(__IO uint16_t*)(SDRAM_BANK_ADDR + RW_ADDR + (i<<1));
 8000bce:	68bb      	ldr	r3, [r7, #8]
 8000bd0:	005b      	lsls	r3, r3, #1
 8000bd2:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 8000bd6:	881b      	ldrh	r3, [r3, #0]
 8000bd8:	b299      	uxth	r1, r3
 8000bda:	4a17      	ldr	r2, [pc, #92]	; (8000c38 <main+0x128>)
 8000bdc:	68bb      	ldr	r3, [r7, #8]
 8000bde:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for (int i = 0; i < BUFFER_SIZE; i++) {
 8000be2:	68bb      	ldr	r3, [r7, #8]
 8000be4:	3301      	adds	r3, #1
 8000be6:	60bb      	str	r3, [r7, #8]
 8000be8:	68bb      	ldr	r3, [r7, #8]
 8000bea:	2bff      	cmp	r3, #255	; 0xff
 8000bec:	d9ef      	bls.n	8000bce <main+0xbe>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  static uint16_t data = 0;
	  for (int i = 0; i < BUFFER_SIZE; i++) {
 8000bee:	2300      	movs	r3, #0
 8000bf0:	607b      	str	r3, [r7, #4]
 8000bf2:	e010      	b.n	8000c16 <main+0x106>
		  *(__IO uint16_t*)(SDRAM_BANK_ADDR + RW_ADDR + (i<<1)) = data;
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	005b      	lsls	r3, r3, #1
 8000bf8:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 8000bfc:	461a      	mov	r2, r3
 8000bfe:	4b0f      	ldr	r3, [pc, #60]	; (8000c3c <main+0x12c>)
 8000c00:	881b      	ldrh	r3, [r3, #0]
 8000c02:	8013      	strh	r3, [r2, #0]
		  data = ~data;
 8000c04:	4b0d      	ldr	r3, [pc, #52]	; (8000c3c <main+0x12c>)
 8000c06:	881b      	ldrh	r3, [r3, #0]
 8000c08:	43db      	mvns	r3, r3
 8000c0a:	b29a      	uxth	r2, r3
 8000c0c:	4b0b      	ldr	r3, [pc, #44]	; (8000c3c <main+0x12c>)
 8000c0e:	801a      	strh	r2, [r3, #0]
	  for (int i = 0; i < BUFFER_SIZE; i++) {
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	3301      	adds	r3, #1
 8000c14:	607b      	str	r3, [r7, #4]
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	2bff      	cmp	r3, #255	; 0xff
 8000c1a:	d9eb      	bls.n	8000bf4 <main+0xe4>
	  }

	  led_task();
 8000c1c:	f7ff ff26 	bl	8000a6c <led_task>
  {
 8000c20:	e7e5      	b.n	8000bee <main+0xde>
 8000c22:	bf00      	nop
 8000c24:	f3af 8000 	nop.w
 8000c28:	00000000 	.word	0x00000000
 8000c2c:	412e8480 	.word	0x412e8480
 8000c30:	e000ed00 	.word	0xe000ed00
 8000c34:	200000a0 	.word	0x200000a0
 8000c38:	200002d4 	.word	0x200002d4
 8000c3c:	2000003c 	.word	0x2000003c

08000c40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b09c      	sub	sp, #112	; 0x70
 8000c44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c4a:	224c      	movs	r2, #76	; 0x4c
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f002 ffd6 	bl	8003c00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c54:	1d3b      	adds	r3, r7, #4
 8000c56:	2220      	movs	r2, #32
 8000c58:	2100      	movs	r1, #0
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f002 ffd0 	bl	8003c00 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000c60:	2002      	movs	r0, #2
 8000c62:	f000 fca7 	bl	80015b4 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c66:	2300      	movs	r3, #0
 8000c68:	603b      	str	r3, [r7, #0]
 8000c6a:	4a30      	ldr	r2, [pc, #192]	; (8000d2c <SystemClock_Config+0xec>)
 8000c6c:	4b2f      	ldr	r3, [pc, #188]	; (8000d2c <SystemClock_Config+0xec>)
 8000c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c70:	f023 0301 	bic.w	r3, r3, #1
 8000c74:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000c76:	4b2d      	ldr	r3, [pc, #180]	; (8000d2c <SystemClock_Config+0xec>)
 8000c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c7a:	f003 0301 	and.w	r3, r3, #1
 8000c7e:	603b      	str	r3, [r7, #0]
 8000c80:	4a2b      	ldr	r2, [pc, #172]	; (8000d30 <SystemClock_Config+0xf0>)
 8000c82:	4b2b      	ldr	r3, [pc, #172]	; (8000d30 <SystemClock_Config+0xf0>)
 8000c84:	699b      	ldr	r3, [r3, #24]
 8000c86:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000c8a:	6193      	str	r3, [r2, #24]
 8000c8c:	4b28      	ldr	r3, [pc, #160]	; (8000d30 <SystemClock_Config+0xf0>)
 8000c8e:	699b      	ldr	r3, [r3, #24]
 8000c90:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c94:	603b      	str	r3, [r7, #0]
 8000c96:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000c98:	bf00      	nop
 8000c9a:	4b25      	ldr	r3, [pc, #148]	; (8000d30 <SystemClock_Config+0xf0>)
 8000c9c:	699b      	ldr	r3, [r3, #24]
 8000c9e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ca2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ca6:	d1f8      	bne.n	8000c9a <SystemClock_Config+0x5a>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ca8:	2301      	movs	r3, #1
 8000caa:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000cac:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000cb0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cb2:	2302      	movs	r3, #2
 8000cb4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cb6:	2302      	movs	r3, #2
 8000cb8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 3;
 8000cba:	2303      	movs	r3, #3
 8000cbc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000cbe:	2364      	movs	r3, #100	; 0x64
 8000cc0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000cc2:	2302      	movs	r3, #2
 8000cc4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000cc6:	2308      	movs	r3, #8
 8000cc8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 8;
 8000cca:	2308      	movs	r3, #8
 8000ccc:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000cce:	230c      	movs	r3, #12
 8000cd0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f000 fca2 	bl	8001628 <HAL_RCC_OscConfig>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000cea:	f000 f823 	bl	8000d34 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cee:	233f      	movs	r3, #63	; 0x3f
 8000cf0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cf2:	2303      	movs	r3, #3
 8000cf4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV4;
 8000cfa:	2309      	movs	r3, #9
 8000cfc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000d02:	2300      	movs	r3, #0
 8000d04:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000d06:	2300      	movs	r3, #0
 8000d08:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000d0e:	1d3b      	adds	r3, r7, #4
 8000d10:	2101      	movs	r1, #1
 8000d12:	4618      	mov	r0, r3
 8000d14:	f001 f898 	bl	8001e48 <HAL_RCC_ClockConfig>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <SystemClock_Config+0xe2>
  {
    Error_Handler();
 8000d1e:	f000 f809 	bl	8000d34 <Error_Handler>
  }
}
 8000d22:	bf00      	nop
 8000d24:	3770      	adds	r7, #112	; 0x70
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	58000400 	.word	0x58000400
 8000d30:	58024800 	.word	0x58024800

08000d34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000d38:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d3a:	e7fe      	b.n	8000d3a <Error_Handler+0x6>

08000d3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b083      	sub	sp, #12
 8000d40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d42:	4a0a      	ldr	r2, [pc, #40]	; (8000d6c <HAL_MspInit+0x30>)
 8000d44:	4b09      	ldr	r3, [pc, #36]	; (8000d6c <HAL_MspInit+0x30>)
 8000d46:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d4a:	f043 0302 	orr.w	r3, r3, #2
 8000d4e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000d52:	4b06      	ldr	r3, [pc, #24]	; (8000d6c <HAL_MspInit+0x30>)
 8000d54:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d58:	f003 0302 	and.w	r3, r3, #2
 8000d5c:	607b      	str	r3, [r7, #4]
 8000d5e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d60:	bf00      	nop
 8000d62:	370c      	adds	r7, #12
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr
 8000d6c:	58024400 	.word	0x58024400

08000d70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d74:	e7fe      	b.n	8000d74 <NMI_Handler+0x4>

08000d76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d76:	b480      	push	{r7}
 8000d78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d7a:	e7fe      	b.n	8000d7a <HardFault_Handler+0x4>

08000d7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d80:	e7fe      	b.n	8000d80 <MemManage_Handler+0x4>

08000d82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d82:	b480      	push	{r7}
 8000d84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d86:	e7fe      	b.n	8000d86 <BusFault_Handler+0x4>

08000d88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d8c:	e7fe      	b.n	8000d8c <UsageFault_Handler+0x4>

08000d8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d8e:	b480      	push	{r7}
 8000d90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d92:	bf00      	nop
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr

08000d9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000da0:	bf00      	nop
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr

08000daa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000daa:	b480      	push	{r7}
 8000dac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dae:	bf00      	nop
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr

08000db8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dbc:	f000 f900 	bl	8000fc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dc0:	bf00      	nop
 8000dc2:	bd80      	pop	{r7, pc}

08000dc4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000dc8:	4a39      	ldr	r2, [pc, #228]	; (8000eb0 <SystemInit+0xec>)
 8000dca:	4b39      	ldr	r3, [pc, #228]	; (8000eb0 <SystemInit+0xec>)
 8000dcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dd0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dd4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000dd8:	4b36      	ldr	r3, [pc, #216]	; (8000eb4 <SystemInit+0xf0>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	f003 030f 	and.w	r3, r3, #15
 8000de0:	2b06      	cmp	r3, #6
 8000de2:	d807      	bhi.n	8000df4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000de4:	4a33      	ldr	r2, [pc, #204]	; (8000eb4 <SystemInit+0xf0>)
 8000de6:	4b33      	ldr	r3, [pc, #204]	; (8000eb4 <SystemInit+0xf0>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	f023 030f 	bic.w	r3, r3, #15
 8000dee:	f043 0307 	orr.w	r3, r3, #7
 8000df2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000df4:	4a30      	ldr	r2, [pc, #192]	; (8000eb8 <SystemInit+0xf4>)
 8000df6:	4b30      	ldr	r3, [pc, #192]	; (8000eb8 <SystemInit+0xf4>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	f043 0301 	orr.w	r3, r3, #1
 8000dfe:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000e00:	4b2d      	ldr	r3, [pc, #180]	; (8000eb8 <SystemInit+0xf4>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000e06:	492c      	ldr	r1, [pc, #176]	; (8000eb8 <SystemInit+0xf4>)
 8000e08:	4b2b      	ldr	r3, [pc, #172]	; (8000eb8 <SystemInit+0xf4>)
 8000e0a:	681a      	ldr	r2, [r3, #0]
 8000e0c:	4b2b      	ldr	r3, [pc, #172]	; (8000ebc <SystemInit+0xf8>)
 8000e0e:	4013      	ands	r3, r2
 8000e10:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000e12:	4b28      	ldr	r3, [pc, #160]	; (8000eb4 <SystemInit+0xf0>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	f003 030f 	and.w	r3, r3, #15
 8000e1a:	2b07      	cmp	r3, #7
 8000e1c:	d907      	bls.n	8000e2e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000e1e:	4a25      	ldr	r2, [pc, #148]	; (8000eb4 <SystemInit+0xf0>)
 8000e20:	4b24      	ldr	r3, [pc, #144]	; (8000eb4 <SystemInit+0xf0>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	f023 030f 	bic.w	r3, r3, #15
 8000e28:	f043 0307 	orr.w	r3, r3, #7
 8000e2c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000e2e:	4b22      	ldr	r3, [pc, #136]	; (8000eb8 <SystemInit+0xf4>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000e34:	4b20      	ldr	r3, [pc, #128]	; (8000eb8 <SystemInit+0xf4>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000e3a:	4b1f      	ldr	r3, [pc, #124]	; (8000eb8 <SystemInit+0xf4>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000e40:	4b1d      	ldr	r3, [pc, #116]	; (8000eb8 <SystemInit+0xf4>)
 8000e42:	4a1f      	ldr	r2, [pc, #124]	; (8000ec0 <SystemInit+0xfc>)
 8000e44:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000e46:	4b1c      	ldr	r3, [pc, #112]	; (8000eb8 <SystemInit+0xf4>)
 8000e48:	4a1e      	ldr	r2, [pc, #120]	; (8000ec4 <SystemInit+0x100>)
 8000e4a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000e4c:	4b1a      	ldr	r3, [pc, #104]	; (8000eb8 <SystemInit+0xf4>)
 8000e4e:	4a1e      	ldr	r2, [pc, #120]	; (8000ec8 <SystemInit+0x104>)
 8000e50:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000e52:	4b19      	ldr	r3, [pc, #100]	; (8000eb8 <SystemInit+0xf4>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000e58:	4b17      	ldr	r3, [pc, #92]	; (8000eb8 <SystemInit+0xf4>)
 8000e5a:	4a1b      	ldr	r2, [pc, #108]	; (8000ec8 <SystemInit+0x104>)
 8000e5c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000e5e:	4b16      	ldr	r3, [pc, #88]	; (8000eb8 <SystemInit+0xf4>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000e64:	4b14      	ldr	r3, [pc, #80]	; (8000eb8 <SystemInit+0xf4>)
 8000e66:	4a18      	ldr	r2, [pc, #96]	; (8000ec8 <SystemInit+0x104>)
 8000e68:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000e6a:	4b13      	ldr	r3, [pc, #76]	; (8000eb8 <SystemInit+0xf4>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000e70:	4a11      	ldr	r2, [pc, #68]	; (8000eb8 <SystemInit+0xf4>)
 8000e72:	4b11      	ldr	r3, [pc, #68]	; (8000eb8 <SystemInit+0xf4>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e7a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000e7c:	4b0e      	ldr	r3, [pc, #56]	; (8000eb8 <SystemInit+0xf4>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000e82:	4b12      	ldr	r3, [pc, #72]	; (8000ecc <SystemInit+0x108>)
 8000e84:	681a      	ldr	r2, [r3, #0]
 8000e86:	4b12      	ldr	r3, [pc, #72]	; (8000ed0 <SystemInit+0x10c>)
 8000e88:	4013      	ands	r3, r2
 8000e8a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000e8e:	d202      	bcs.n	8000e96 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000e90:	4b10      	ldr	r3, [pc, #64]	; (8000ed4 <SystemInit+0x110>)
 8000e92:	2201      	movs	r2, #1
 8000e94:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000e96:	4b10      	ldr	r3, [pc, #64]	; (8000ed8 <SystemInit+0x114>)
 8000e98:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000e9c:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000e9e:	4b04      	ldr	r3, [pc, #16]	; (8000eb0 <SystemInit+0xec>)
 8000ea0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ea4:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8000ea6:	bf00      	nop
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr
 8000eb0:	e000ed00 	.word	0xe000ed00
 8000eb4:	52002000 	.word	0x52002000
 8000eb8:	58024400 	.word	0x58024400
 8000ebc:	eaf6ed7f 	.word	0xeaf6ed7f
 8000ec0:	02020200 	.word	0x02020200
 8000ec4:	01ff0000 	.word	0x01ff0000
 8000ec8:	01010280 	.word	0x01010280
 8000ecc:	5c001000 	.word	0x5c001000
 8000ed0:	ffff0000 	.word	0xffff0000
 8000ed4:	51008108 	.word	0x51008108
 8000ed8:	52004000 	.word	0x52004000

08000edc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ee2:	2003      	movs	r0, #3
 8000ee4:	f000 f96a 	bl	80011bc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000ee8:	f001 f964 	bl	80021b4 <HAL_RCC_GetSysClockFreq>
 8000eec:	4601      	mov	r1, r0
 8000eee:	4b15      	ldr	r3, [pc, #84]	; (8000f44 <HAL_Init+0x68>)
 8000ef0:	699b      	ldr	r3, [r3, #24]
 8000ef2:	0a1b      	lsrs	r3, r3, #8
 8000ef4:	f003 030f 	and.w	r3, r3, #15
 8000ef8:	4a13      	ldr	r2, [pc, #76]	; (8000f48 <HAL_Init+0x6c>)
 8000efa:	5cd3      	ldrb	r3, [r2, r3]
 8000efc:	f003 031f 	and.w	r3, r3, #31
 8000f00:	fa21 f303 	lsr.w	r3, r1, r3
 8000f04:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000f06:	4b0f      	ldr	r3, [pc, #60]	; (8000f44 <HAL_Init+0x68>)
 8000f08:	699b      	ldr	r3, [r3, #24]
 8000f0a:	f003 030f 	and.w	r3, r3, #15
 8000f0e:	4a0e      	ldr	r2, [pc, #56]	; (8000f48 <HAL_Init+0x6c>)
 8000f10:	5cd3      	ldrb	r3, [r2, r3]
 8000f12:	f003 031f 	and.w	r3, r3, #31
 8000f16:	687a      	ldr	r2, [r7, #4]
 8000f18:	fa22 f303 	lsr.w	r3, r2, r3
 8000f1c:	4a0b      	ldr	r2, [pc, #44]	; (8000f4c <HAL_Init+0x70>)
 8000f1e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000f20:	4a0b      	ldr	r2, [pc, #44]	; (8000f50 <HAL_Init+0x74>)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f26:	2000      	movs	r0, #0
 8000f28:	f000 f814 	bl	8000f54 <HAL_InitTick>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000f32:	2301      	movs	r3, #1
 8000f34:	e002      	b.n	8000f3c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000f36:	f7ff ff01 	bl	8000d3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f3a:	2300      	movs	r3, #0
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	3708      	adds	r7, #8
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	58024400 	.word	0x58024400
 8000f48:	08003c28 	.word	0x08003c28
 8000f4c:	20000004 	.word	0x20000004
 8000f50:	20000000 	.word	0x20000000

08000f54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000f5c:	4b15      	ldr	r3, [pc, #84]	; (8000fb4 <HAL_InitTick+0x60>)
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d101      	bne.n	8000f68 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000f64:	2301      	movs	r3, #1
 8000f66:	e021      	b.n	8000fac <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000f68:	4b13      	ldr	r3, [pc, #76]	; (8000fb8 <HAL_InitTick+0x64>)
 8000f6a:	681a      	ldr	r2, [r3, #0]
 8000f6c:	4b11      	ldr	r3, [pc, #68]	; (8000fb4 <HAL_InitTick+0x60>)
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	4619      	mov	r1, r3
 8000f72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f76:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f000 f941 	bl	8001206 <HAL_SYSTICK_Config>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	e00e      	b.n	8000fac <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	2b0f      	cmp	r3, #15
 8000f92:	d80a      	bhi.n	8000faa <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f94:	2200      	movs	r2, #0
 8000f96:	6879      	ldr	r1, [r7, #4]
 8000f98:	f04f 30ff 	mov.w	r0, #4294967295
 8000f9c:	f000 f919 	bl	80011d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fa0:	4a06      	ldr	r2, [pc, #24]	; (8000fbc <HAL_InitTick+0x68>)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	e000      	b.n	8000fac <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000faa:	2301      	movs	r3, #1
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	3708      	adds	r7, #8
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	2000000c 	.word	0x2000000c
 8000fb8:	20000000 	.word	0x20000000
 8000fbc:	20000008 	.word	0x20000008

08000fc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000fc4:	4b06      	ldr	r3, [pc, #24]	; (8000fe0 <HAL_IncTick+0x20>)
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	461a      	mov	r2, r3
 8000fca:	4b06      	ldr	r3, [pc, #24]	; (8000fe4 <HAL_IncTick+0x24>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4413      	add	r3, r2
 8000fd0:	4a04      	ldr	r2, [pc, #16]	; (8000fe4 <HAL_IncTick+0x24>)
 8000fd2:	6013      	str	r3, [r2, #0]
}
 8000fd4:	bf00      	nop
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop
 8000fe0:	2000000c 	.word	0x2000000c
 8000fe4:	200004d4 	.word	0x200004d4

08000fe8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  return uwTick;
 8000fec:	4b03      	ldr	r3, [pc, #12]	; (8000ffc <HAL_GetTick+0x14>)
 8000fee:	681b      	ldr	r3, [r3, #0]
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	200004d4 	.word	0x200004d4

08001000 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b084      	sub	sp, #16
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001008:	f7ff ffee 	bl	8000fe8 <HAL_GetTick>
 800100c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001018:	d005      	beq.n	8001026 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800101a:	4b09      	ldr	r3, [pc, #36]	; (8001040 <HAL_Delay+0x40>)
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	461a      	mov	r2, r3
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	4413      	add	r3, r2
 8001024:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001026:	bf00      	nop
 8001028:	f7ff ffde 	bl	8000fe8 <HAL_GetTick>
 800102c:	4602      	mov	r2, r0
 800102e:	68bb      	ldr	r3, [r7, #8]
 8001030:	1ad2      	subs	r2, r2, r3
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	429a      	cmp	r2, r3
 8001036:	d3f7      	bcc.n	8001028 <HAL_Delay+0x28>
  {
  }
}
 8001038:	bf00      	nop
 800103a:	3710      	adds	r7, #16
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	2000000c 	.word	0x2000000c

08001044 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001048:	4b03      	ldr	r3, [pc, #12]	; (8001058 <HAL_GetREVID+0x14>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	0c1b      	lsrs	r3, r3, #16
}
 800104e:	4618      	mov	r0, r3
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr
 8001058:	5c001000 	.word	0x5c001000

0800105c <__NVIC_SetPriorityGrouping>:
{
 800105c:	b480      	push	{r7}
 800105e:	b085      	sub	sp, #20
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	f003 0307 	and.w	r3, r3, #7
 800106a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800106c:	4b0b      	ldr	r3, [pc, #44]	; (800109c <__NVIC_SetPriorityGrouping+0x40>)
 800106e:	68db      	ldr	r3, [r3, #12]
 8001070:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001072:	68ba      	ldr	r2, [r7, #8]
 8001074:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001078:	4013      	ands	r3, r2
 800107a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001080:	68bb      	ldr	r3, [r7, #8]
 8001082:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001084:	4b06      	ldr	r3, [pc, #24]	; (80010a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001086:	4313      	orrs	r3, r2
 8001088:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800108a:	4a04      	ldr	r2, [pc, #16]	; (800109c <__NVIC_SetPriorityGrouping+0x40>)
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	60d3      	str	r3, [r2, #12]
}
 8001090:	bf00      	nop
 8001092:	3714      	adds	r7, #20
 8001094:	46bd      	mov	sp, r7
 8001096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109a:	4770      	bx	lr
 800109c:	e000ed00 	.word	0xe000ed00
 80010a0:	05fa0000 	.word	0x05fa0000

080010a4 <__NVIC_GetPriorityGrouping>:
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010a8:	4b04      	ldr	r3, [pc, #16]	; (80010bc <__NVIC_GetPriorityGrouping+0x18>)
 80010aa:	68db      	ldr	r3, [r3, #12]
 80010ac:	0a1b      	lsrs	r3, r3, #8
 80010ae:	f003 0307 	and.w	r3, r3, #7
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr
 80010bc:	e000ed00 	.word	0xe000ed00

080010c0 <__NVIC_SetPriority>:
{
 80010c0:	b480      	push	{r7}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	4603      	mov	r3, r0
 80010c8:	6039      	str	r1, [r7, #0]
 80010ca:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80010cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	db0a      	blt.n	80010ea <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010d4:	490d      	ldr	r1, [pc, #52]	; (800110c <__NVIC_SetPriority+0x4c>)
 80010d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010da:	683a      	ldr	r2, [r7, #0]
 80010dc:	b2d2      	uxtb	r2, r2
 80010de:	0112      	lsls	r2, r2, #4
 80010e0:	b2d2      	uxtb	r2, r2
 80010e2:	440b      	add	r3, r1
 80010e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80010e8:	e00a      	b.n	8001100 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ea:	4909      	ldr	r1, [pc, #36]	; (8001110 <__NVIC_SetPriority+0x50>)
 80010ec:	88fb      	ldrh	r3, [r7, #6]
 80010ee:	f003 030f 	and.w	r3, r3, #15
 80010f2:	3b04      	subs	r3, #4
 80010f4:	683a      	ldr	r2, [r7, #0]
 80010f6:	b2d2      	uxtb	r2, r2
 80010f8:	0112      	lsls	r2, r2, #4
 80010fa:	b2d2      	uxtb	r2, r2
 80010fc:	440b      	add	r3, r1
 80010fe:	761a      	strb	r2, [r3, #24]
}
 8001100:	bf00      	nop
 8001102:	370c      	adds	r7, #12
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr
 800110c:	e000e100 	.word	0xe000e100
 8001110:	e000ed00 	.word	0xe000ed00

08001114 <NVIC_EncodePriority>:
{
 8001114:	b480      	push	{r7}
 8001116:	b089      	sub	sp, #36	; 0x24
 8001118:	af00      	add	r7, sp, #0
 800111a:	60f8      	str	r0, [r7, #12]
 800111c:	60b9      	str	r1, [r7, #8]
 800111e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	f003 0307 	and.w	r3, r3, #7
 8001126:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001128:	69fb      	ldr	r3, [r7, #28]
 800112a:	f1c3 0307 	rsb	r3, r3, #7
 800112e:	2b04      	cmp	r3, #4
 8001130:	bf28      	it	cs
 8001132:	2304      	movcs	r3, #4
 8001134:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001136:	69fb      	ldr	r3, [r7, #28]
 8001138:	3304      	adds	r3, #4
 800113a:	2b06      	cmp	r3, #6
 800113c:	d902      	bls.n	8001144 <NVIC_EncodePriority+0x30>
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	3b03      	subs	r3, #3
 8001142:	e000      	b.n	8001146 <NVIC_EncodePriority+0x32>
 8001144:	2300      	movs	r3, #0
 8001146:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001148:	2201      	movs	r2, #1
 800114a:	69bb      	ldr	r3, [r7, #24]
 800114c:	fa02 f303 	lsl.w	r3, r2, r3
 8001150:	1e5a      	subs	r2, r3, #1
 8001152:	68bb      	ldr	r3, [r7, #8]
 8001154:	401a      	ands	r2, r3
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800115a:	2101      	movs	r1, #1
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	fa01 f303 	lsl.w	r3, r1, r3
 8001162:	1e59      	subs	r1, r3, #1
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001168:	4313      	orrs	r3, r2
}
 800116a:	4618      	mov	r0, r3
 800116c:	3724      	adds	r7, #36	; 0x24
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
	...

08001178 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	3b01      	subs	r3, #1
 8001184:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001188:	d301      	bcc.n	800118e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800118a:	2301      	movs	r3, #1
 800118c:	e00f      	b.n	80011ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800118e:	4a0a      	ldr	r2, [pc, #40]	; (80011b8 <SysTick_Config+0x40>)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	3b01      	subs	r3, #1
 8001194:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001196:	210f      	movs	r1, #15
 8001198:	f04f 30ff 	mov.w	r0, #4294967295
 800119c:	f7ff ff90 	bl	80010c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011a0:	4b05      	ldr	r3, [pc, #20]	; (80011b8 <SysTick_Config+0x40>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011a6:	4b04      	ldr	r3, [pc, #16]	; (80011b8 <SysTick_Config+0x40>)
 80011a8:	2207      	movs	r2, #7
 80011aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011ac:	2300      	movs	r3, #0
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	3708      	adds	r7, #8
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	e000e010 	.word	0xe000e010

080011bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011c4:	6878      	ldr	r0, [r7, #4]
 80011c6:	f7ff ff49 	bl	800105c <__NVIC_SetPriorityGrouping>
}
 80011ca:	bf00      	nop
 80011cc:	3708      	adds	r7, #8
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}

080011d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011d2:	b580      	push	{r7, lr}
 80011d4:	b086      	sub	sp, #24
 80011d6:	af00      	add	r7, sp, #0
 80011d8:	4603      	mov	r3, r0
 80011da:	60b9      	str	r1, [r7, #8]
 80011dc:	607a      	str	r2, [r7, #4]
 80011de:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80011e0:	f7ff ff60 	bl	80010a4 <__NVIC_GetPriorityGrouping>
 80011e4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011e6:	687a      	ldr	r2, [r7, #4]
 80011e8:	68b9      	ldr	r1, [r7, #8]
 80011ea:	6978      	ldr	r0, [r7, #20]
 80011ec:	f7ff ff92 	bl	8001114 <NVIC_EncodePriority>
 80011f0:	4602      	mov	r2, r0
 80011f2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80011f6:	4611      	mov	r1, r2
 80011f8:	4618      	mov	r0, r3
 80011fa:	f7ff ff61 	bl	80010c0 <__NVIC_SetPriority>
}
 80011fe:	bf00      	nop
 8001200:	3718      	adds	r7, #24
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}

08001206 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001206:	b580      	push	{r7, lr}
 8001208:	b082      	sub	sp, #8
 800120a:	af00      	add	r7, sp, #0
 800120c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800120e:	6878      	ldr	r0, [r7, #4]
 8001210:	f7ff ffb2 	bl	8001178 <SysTick_Config>
 8001214:	4603      	mov	r3, r0
}
 8001216:	4618      	mov	r0, r3
 8001218:	3708      	adds	r7, #8
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
	...

08001220 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001220:	b480      	push	{r7}
 8001222:	b089      	sub	sp, #36	; 0x24
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800122a:	2300      	movs	r3, #0
 800122c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800122e:	4b89      	ldr	r3, [pc, #548]	; (8001454 <HAL_GPIO_Init+0x234>)
 8001230:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001232:	e194      	b.n	800155e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	681a      	ldr	r2, [r3, #0]
 8001238:	2101      	movs	r1, #1
 800123a:	69fb      	ldr	r3, [r7, #28]
 800123c:	fa01 f303 	lsl.w	r3, r1, r3
 8001240:	4013      	ands	r3, r2
 8001242:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001244:	693b      	ldr	r3, [r7, #16]
 8001246:	2b00      	cmp	r3, #0
 8001248:	f000 8186 	beq.w	8001558 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	2b01      	cmp	r3, #1
 8001252:	d00b      	beq.n	800126c <HAL_GPIO_Init+0x4c>
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	2b02      	cmp	r3, #2
 800125a:	d007      	beq.n	800126c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001260:	2b11      	cmp	r3, #17
 8001262:	d003      	beq.n	800126c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	2b12      	cmp	r3, #18
 800126a:	d130      	bne.n	80012ce <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	689b      	ldr	r3, [r3, #8]
 8001270:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	005b      	lsls	r3, r3, #1
 8001276:	2203      	movs	r2, #3
 8001278:	fa02 f303 	lsl.w	r3, r2, r3
 800127c:	43db      	mvns	r3, r3
 800127e:	69ba      	ldr	r2, [r7, #24]
 8001280:	4013      	ands	r3, r2
 8001282:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	68da      	ldr	r2, [r3, #12]
 8001288:	69fb      	ldr	r3, [r7, #28]
 800128a:	005b      	lsls	r3, r3, #1
 800128c:	fa02 f303 	lsl.w	r3, r2, r3
 8001290:	69ba      	ldr	r2, [r7, #24]
 8001292:	4313      	orrs	r3, r2
 8001294:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	69ba      	ldr	r2, [r7, #24]
 800129a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80012a2:	2201      	movs	r2, #1
 80012a4:	69fb      	ldr	r3, [r7, #28]
 80012a6:	fa02 f303 	lsl.w	r3, r2, r3
 80012aa:	43db      	mvns	r3, r3
 80012ac:	69ba      	ldr	r2, [r7, #24]
 80012ae:	4013      	ands	r3, r2
 80012b0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	091b      	lsrs	r3, r3, #4
 80012b8:	f003 0201 	and.w	r2, r3, #1
 80012bc:	69fb      	ldr	r3, [r7, #28]
 80012be:	fa02 f303 	lsl.w	r3, r2, r3
 80012c2:	69ba      	ldr	r2, [r7, #24]
 80012c4:	4313      	orrs	r3, r2
 80012c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	69ba      	ldr	r2, [r7, #24]
 80012cc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	68db      	ldr	r3, [r3, #12]
 80012d2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80012d4:	69fb      	ldr	r3, [r7, #28]
 80012d6:	005b      	lsls	r3, r3, #1
 80012d8:	2203      	movs	r2, #3
 80012da:	fa02 f303 	lsl.w	r3, r2, r3
 80012de:	43db      	mvns	r3, r3
 80012e0:	69ba      	ldr	r2, [r7, #24]
 80012e2:	4013      	ands	r3, r2
 80012e4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	689a      	ldr	r2, [r3, #8]
 80012ea:	69fb      	ldr	r3, [r7, #28]
 80012ec:	005b      	lsls	r3, r3, #1
 80012ee:	fa02 f303 	lsl.w	r3, r2, r3
 80012f2:	69ba      	ldr	r2, [r7, #24]
 80012f4:	4313      	orrs	r3, r2
 80012f6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	69ba      	ldr	r2, [r7, #24]
 80012fc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	2b02      	cmp	r3, #2
 8001304:	d003      	beq.n	800130e <HAL_GPIO_Init+0xee>
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	2b12      	cmp	r3, #18
 800130c:	d123      	bne.n	8001356 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	08da      	lsrs	r2, r3, #3
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	3208      	adds	r2, #8
 8001316:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800131a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800131c:	69fb      	ldr	r3, [r7, #28]
 800131e:	f003 0307 	and.w	r3, r3, #7
 8001322:	009b      	lsls	r3, r3, #2
 8001324:	220f      	movs	r2, #15
 8001326:	fa02 f303 	lsl.w	r3, r2, r3
 800132a:	43db      	mvns	r3, r3
 800132c:	69ba      	ldr	r2, [r7, #24]
 800132e:	4013      	ands	r3, r2
 8001330:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	691a      	ldr	r2, [r3, #16]
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	f003 0307 	and.w	r3, r3, #7
 800133c:	009b      	lsls	r3, r3, #2
 800133e:	fa02 f303 	lsl.w	r3, r2, r3
 8001342:	69ba      	ldr	r2, [r7, #24]
 8001344:	4313      	orrs	r3, r2
 8001346:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001348:	69fb      	ldr	r3, [r7, #28]
 800134a:	08da      	lsrs	r2, r3, #3
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	3208      	adds	r2, #8
 8001350:	69b9      	ldr	r1, [r7, #24]
 8001352:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800135c:	69fb      	ldr	r3, [r7, #28]
 800135e:	005b      	lsls	r3, r3, #1
 8001360:	2203      	movs	r2, #3
 8001362:	fa02 f303 	lsl.w	r3, r2, r3
 8001366:	43db      	mvns	r3, r3
 8001368:	69ba      	ldr	r2, [r7, #24]
 800136a:	4013      	ands	r3, r2
 800136c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	f003 0203 	and.w	r2, r3, #3
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	005b      	lsls	r3, r3, #1
 800137a:	fa02 f303 	lsl.w	r3, r2, r3
 800137e:	69ba      	ldr	r2, [r7, #24]
 8001380:	4313      	orrs	r3, r2
 8001382:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	69ba      	ldr	r2, [r7, #24]
 8001388:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001392:	2b00      	cmp	r3, #0
 8001394:	f000 80e0 	beq.w	8001558 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001398:	4a2f      	ldr	r2, [pc, #188]	; (8001458 <HAL_GPIO_Init+0x238>)
 800139a:	4b2f      	ldr	r3, [pc, #188]	; (8001458 <HAL_GPIO_Init+0x238>)
 800139c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80013a0:	f043 0302 	orr.w	r3, r3, #2
 80013a4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80013a8:	4b2b      	ldr	r3, [pc, #172]	; (8001458 <HAL_GPIO_Init+0x238>)
 80013aa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80013ae:	f003 0302 	and.w	r3, r3, #2
 80013b2:	60fb      	str	r3, [r7, #12]
 80013b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013b6:	4a29      	ldr	r2, [pc, #164]	; (800145c <HAL_GPIO_Init+0x23c>)
 80013b8:	69fb      	ldr	r3, [r7, #28]
 80013ba:	089b      	lsrs	r3, r3, #2
 80013bc:	3302      	adds	r3, #2
 80013be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80013c4:	69fb      	ldr	r3, [r7, #28]
 80013c6:	f003 0303 	and.w	r3, r3, #3
 80013ca:	009b      	lsls	r3, r3, #2
 80013cc:	220f      	movs	r2, #15
 80013ce:	fa02 f303 	lsl.w	r3, r2, r3
 80013d2:	43db      	mvns	r3, r3
 80013d4:	69ba      	ldr	r2, [r7, #24]
 80013d6:	4013      	ands	r3, r2
 80013d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	4a20      	ldr	r2, [pc, #128]	; (8001460 <HAL_GPIO_Init+0x240>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d052      	beq.n	8001488 <HAL_GPIO_Init+0x268>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	4a1f      	ldr	r2, [pc, #124]	; (8001464 <HAL_GPIO_Init+0x244>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d031      	beq.n	800144e <HAL_GPIO_Init+0x22e>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	4a1e      	ldr	r2, [pc, #120]	; (8001468 <HAL_GPIO_Init+0x248>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d02b      	beq.n	800144a <HAL_GPIO_Init+0x22a>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	4a1d      	ldr	r2, [pc, #116]	; (800146c <HAL_GPIO_Init+0x24c>)
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d025      	beq.n	8001446 <HAL_GPIO_Init+0x226>
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	4a1c      	ldr	r2, [pc, #112]	; (8001470 <HAL_GPIO_Init+0x250>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d01f      	beq.n	8001442 <HAL_GPIO_Init+0x222>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	4a1b      	ldr	r2, [pc, #108]	; (8001474 <HAL_GPIO_Init+0x254>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d019      	beq.n	800143e <HAL_GPIO_Init+0x21e>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	4a1a      	ldr	r2, [pc, #104]	; (8001478 <HAL_GPIO_Init+0x258>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d013      	beq.n	800143a <HAL_GPIO_Init+0x21a>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	4a19      	ldr	r2, [pc, #100]	; (800147c <HAL_GPIO_Init+0x25c>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d00d      	beq.n	8001436 <HAL_GPIO_Init+0x216>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4a18      	ldr	r2, [pc, #96]	; (8001480 <HAL_GPIO_Init+0x260>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d007      	beq.n	8001432 <HAL_GPIO_Init+0x212>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	4a17      	ldr	r2, [pc, #92]	; (8001484 <HAL_GPIO_Init+0x264>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d101      	bne.n	800142e <HAL_GPIO_Init+0x20e>
 800142a:	2309      	movs	r3, #9
 800142c:	e02d      	b.n	800148a <HAL_GPIO_Init+0x26a>
 800142e:	230a      	movs	r3, #10
 8001430:	e02b      	b.n	800148a <HAL_GPIO_Init+0x26a>
 8001432:	2308      	movs	r3, #8
 8001434:	e029      	b.n	800148a <HAL_GPIO_Init+0x26a>
 8001436:	2307      	movs	r3, #7
 8001438:	e027      	b.n	800148a <HAL_GPIO_Init+0x26a>
 800143a:	2306      	movs	r3, #6
 800143c:	e025      	b.n	800148a <HAL_GPIO_Init+0x26a>
 800143e:	2305      	movs	r3, #5
 8001440:	e023      	b.n	800148a <HAL_GPIO_Init+0x26a>
 8001442:	2304      	movs	r3, #4
 8001444:	e021      	b.n	800148a <HAL_GPIO_Init+0x26a>
 8001446:	2303      	movs	r3, #3
 8001448:	e01f      	b.n	800148a <HAL_GPIO_Init+0x26a>
 800144a:	2302      	movs	r3, #2
 800144c:	e01d      	b.n	800148a <HAL_GPIO_Init+0x26a>
 800144e:	2301      	movs	r3, #1
 8001450:	e01b      	b.n	800148a <HAL_GPIO_Init+0x26a>
 8001452:	bf00      	nop
 8001454:	58000080 	.word	0x58000080
 8001458:	58024400 	.word	0x58024400
 800145c:	58000400 	.word	0x58000400
 8001460:	58020000 	.word	0x58020000
 8001464:	58020400 	.word	0x58020400
 8001468:	58020800 	.word	0x58020800
 800146c:	58020c00 	.word	0x58020c00
 8001470:	58021000 	.word	0x58021000
 8001474:	58021400 	.word	0x58021400
 8001478:	58021800 	.word	0x58021800
 800147c:	58021c00 	.word	0x58021c00
 8001480:	58022000 	.word	0x58022000
 8001484:	58022400 	.word	0x58022400
 8001488:	2300      	movs	r3, #0
 800148a:	69fa      	ldr	r2, [r7, #28]
 800148c:	f002 0203 	and.w	r2, r2, #3
 8001490:	0092      	lsls	r2, r2, #2
 8001492:	4093      	lsls	r3, r2
 8001494:	69ba      	ldr	r2, [r7, #24]
 8001496:	4313      	orrs	r3, r2
 8001498:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800149a:	4938      	ldr	r1, [pc, #224]	; (800157c <HAL_GPIO_Init+0x35c>)
 800149c:	69fb      	ldr	r3, [r7, #28]
 800149e:	089b      	lsrs	r3, r3, #2
 80014a0:	3302      	adds	r3, #2
 80014a2:	69ba      	ldr	r2, [r7, #24]
 80014a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	43db      	mvns	r3, r3
 80014b2:	69ba      	ldr	r2, [r7, #24]
 80014b4:	4013      	ands	r3, r2
 80014b6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d003      	beq.n	80014cc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80014c4:	69ba      	ldr	r2, [r7, #24]
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	4313      	orrs	r3, r2
 80014ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	69ba      	ldr	r2, [r7, #24]
 80014d0:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80014d8:	693b      	ldr	r3, [r7, #16]
 80014da:	43db      	mvns	r3, r3
 80014dc:	69ba      	ldr	r2, [r7, #24]
 80014de:	4013      	ands	r3, r2
 80014e0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d003      	beq.n	80014f6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80014ee:	69ba      	ldr	r2, [r7, #24]
 80014f0:	693b      	ldr	r3, [r7, #16]
 80014f2:	4313      	orrs	r3, r2
 80014f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	69ba      	ldr	r2, [r7, #24]
 80014fa:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80014fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	43db      	mvns	r3, r3
 8001508:	69ba      	ldr	r2, [r7, #24]
 800150a:	4013      	ands	r3, r2
 800150c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001516:	2b00      	cmp	r3, #0
 8001518:	d003      	beq.n	8001522 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 800151a:	69ba      	ldr	r2, [r7, #24]
 800151c:	693b      	ldr	r3, [r7, #16]
 800151e:	4313      	orrs	r3, r2
 8001520:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001522:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001526:	69bb      	ldr	r3, [r7, #24]
 8001528:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800152a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	43db      	mvns	r3, r3
 8001536:	69ba      	ldr	r2, [r7, #24]
 8001538:	4013      	ands	r3, r2
 800153a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001544:	2b00      	cmp	r3, #0
 8001546:	d003      	beq.n	8001550 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8001548:	69ba      	ldr	r2, [r7, #24]
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	4313      	orrs	r3, r2
 800154e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001550:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001554:	69bb      	ldr	r3, [r7, #24]
 8001556:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8001558:	69fb      	ldr	r3, [r7, #28]
 800155a:	3301      	adds	r3, #1
 800155c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	69fb      	ldr	r3, [r7, #28]
 8001564:	fa22 f303 	lsr.w	r3, r2, r3
 8001568:	2b00      	cmp	r3, #0
 800156a:	f47f ae63 	bne.w	8001234 <HAL_GPIO_Init+0x14>
  }
}
 800156e:	bf00      	nop
 8001570:	3724      	adds	r7, #36	; 0x24
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr
 800157a:	bf00      	nop
 800157c:	58000400 	.word	0x58000400

08001580 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
 8001588:	460b      	mov	r3, r1
 800158a:	807b      	strh	r3, [r7, #2]
 800158c:	4613      	mov	r3, r2
 800158e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001590:	787b      	ldrb	r3, [r7, #1]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d003      	beq.n	800159e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001596:	887a      	ldrh	r2, [r7, #2]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800159c:	e003      	b.n	80015a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800159e:	887b      	ldrh	r3, [r7, #2]
 80015a0:	041a      	lsls	r2, r3, #16
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	619a      	str	r2, [r3, #24]
}
 80015a6:	bf00      	nop
 80015a8:	370c      	adds	r7, #12
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr
	...

080015b4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b084      	sub	sp, #16
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80015bc:	4b19      	ldr	r3, [pc, #100]	; (8001624 <HAL_PWREx_ConfigSupply+0x70>)
 80015be:	68db      	ldr	r3, [r3, #12]
 80015c0:	f003 0304 	and.w	r3, r3, #4
 80015c4:	2b04      	cmp	r3, #4
 80015c6:	d00a      	beq.n	80015de <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80015c8:	4b16      	ldr	r3, [pc, #88]	; (8001624 <HAL_PWREx_ConfigSupply+0x70>)
 80015ca:	68db      	ldr	r3, [r3, #12]
 80015cc:	f003 0207 	and.w	r2, r3, #7
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	429a      	cmp	r2, r3
 80015d4:	d001      	beq.n	80015da <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
 80015d8:	e01f      	b.n	800161a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80015da:	2300      	movs	r3, #0
 80015dc:	e01d      	b.n	800161a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80015de:	4911      	ldr	r1, [pc, #68]	; (8001624 <HAL_PWREx_ConfigSupply+0x70>)
 80015e0:	4b10      	ldr	r3, [pc, #64]	; (8001624 <HAL_PWREx_ConfigSupply+0x70>)
 80015e2:	68db      	ldr	r3, [r3, #12]
 80015e4:	f023 0207 	bic.w	r2, r3, #7
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	4313      	orrs	r3, r2
 80015ec:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80015ee:	f7ff fcfb 	bl	8000fe8 <HAL_GetTick>
 80015f2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80015f4:	e009      	b.n	800160a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80015f6:	f7ff fcf7 	bl	8000fe8 <HAL_GetTick>
 80015fa:	4602      	mov	r2, r0
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	1ad3      	subs	r3, r2, r3
 8001600:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001604:	d901      	bls.n	800160a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	e007      	b.n	800161a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800160a:	4b06      	ldr	r3, [pc, #24]	; (8001624 <HAL_PWREx_ConfigSupply+0x70>)
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001612:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001616:	d1ee      	bne.n	80015f6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001618:	2300      	movs	r3, #0
}
 800161a:	4618      	mov	r0, r3
 800161c:	3710      	adds	r7, #16
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	58024800 	.word	0x58024800

08001628 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b08c      	sub	sp, #48	; 0x30
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d101      	bne.n	800163a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001636:	2301      	movs	r3, #1
 8001638:	e3ff      	b.n	8001e3a <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f003 0301 	and.w	r3, r3, #1
 8001642:	2b00      	cmp	r3, #0
 8001644:	f000 8087 	beq.w	8001756 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001648:	4b99      	ldr	r3, [pc, #612]	; (80018b0 <HAL_RCC_OscConfig+0x288>)
 800164a:	691b      	ldr	r3, [r3, #16]
 800164c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001650:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001652:	4b97      	ldr	r3, [pc, #604]	; (80018b0 <HAL_RCC_OscConfig+0x288>)
 8001654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001656:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800165a:	2b10      	cmp	r3, #16
 800165c:	d007      	beq.n	800166e <HAL_RCC_OscConfig+0x46>
 800165e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001660:	2b18      	cmp	r3, #24
 8001662:	d110      	bne.n	8001686 <HAL_RCC_OscConfig+0x5e>
 8001664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001666:	f003 0303 	and.w	r3, r3, #3
 800166a:	2b02      	cmp	r3, #2
 800166c:	d10b      	bne.n	8001686 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800166e:	4b90      	ldr	r3, [pc, #576]	; (80018b0 <HAL_RCC_OscConfig+0x288>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001676:	2b00      	cmp	r3, #0
 8001678:	d06c      	beq.n	8001754 <HAL_RCC_OscConfig+0x12c>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d168      	bne.n	8001754 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001682:	2301      	movs	r3, #1
 8001684:	e3d9      	b.n	8001e3a <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800168e:	d106      	bne.n	800169e <HAL_RCC_OscConfig+0x76>
 8001690:	4a87      	ldr	r2, [pc, #540]	; (80018b0 <HAL_RCC_OscConfig+0x288>)
 8001692:	4b87      	ldr	r3, [pc, #540]	; (80018b0 <HAL_RCC_OscConfig+0x288>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800169a:	6013      	str	r3, [r2, #0]
 800169c:	e02e      	b.n	80016fc <HAL_RCC_OscConfig+0xd4>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d10c      	bne.n	80016c0 <HAL_RCC_OscConfig+0x98>
 80016a6:	4a82      	ldr	r2, [pc, #520]	; (80018b0 <HAL_RCC_OscConfig+0x288>)
 80016a8:	4b81      	ldr	r3, [pc, #516]	; (80018b0 <HAL_RCC_OscConfig+0x288>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016b0:	6013      	str	r3, [r2, #0]
 80016b2:	4a7f      	ldr	r2, [pc, #508]	; (80018b0 <HAL_RCC_OscConfig+0x288>)
 80016b4:	4b7e      	ldr	r3, [pc, #504]	; (80018b0 <HAL_RCC_OscConfig+0x288>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016bc:	6013      	str	r3, [r2, #0]
 80016be:	e01d      	b.n	80016fc <HAL_RCC_OscConfig+0xd4>
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016c8:	d10c      	bne.n	80016e4 <HAL_RCC_OscConfig+0xbc>
 80016ca:	4a79      	ldr	r2, [pc, #484]	; (80018b0 <HAL_RCC_OscConfig+0x288>)
 80016cc:	4b78      	ldr	r3, [pc, #480]	; (80018b0 <HAL_RCC_OscConfig+0x288>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016d4:	6013      	str	r3, [r2, #0]
 80016d6:	4a76      	ldr	r2, [pc, #472]	; (80018b0 <HAL_RCC_OscConfig+0x288>)
 80016d8:	4b75      	ldr	r3, [pc, #468]	; (80018b0 <HAL_RCC_OscConfig+0x288>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016e0:	6013      	str	r3, [r2, #0]
 80016e2:	e00b      	b.n	80016fc <HAL_RCC_OscConfig+0xd4>
 80016e4:	4a72      	ldr	r2, [pc, #456]	; (80018b0 <HAL_RCC_OscConfig+0x288>)
 80016e6:	4b72      	ldr	r3, [pc, #456]	; (80018b0 <HAL_RCC_OscConfig+0x288>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016ee:	6013      	str	r3, [r2, #0]
 80016f0:	4a6f      	ldr	r2, [pc, #444]	; (80018b0 <HAL_RCC_OscConfig+0x288>)
 80016f2:	4b6f      	ldr	r3, [pc, #444]	; (80018b0 <HAL_RCC_OscConfig+0x288>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d013      	beq.n	800172c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001704:	f7ff fc70 	bl	8000fe8 <HAL_GetTick>
 8001708:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800170a:	e008      	b.n	800171e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800170c:	f7ff fc6c 	bl	8000fe8 <HAL_GetTick>
 8001710:	4602      	mov	r2, r0
 8001712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	2b64      	cmp	r3, #100	; 0x64
 8001718:	d901      	bls.n	800171e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800171a:	2303      	movs	r3, #3
 800171c:	e38d      	b.n	8001e3a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800171e:	4b64      	ldr	r3, [pc, #400]	; (80018b0 <HAL_RCC_OscConfig+0x288>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001726:	2b00      	cmp	r3, #0
 8001728:	d0f0      	beq.n	800170c <HAL_RCC_OscConfig+0xe4>
 800172a:	e014      	b.n	8001756 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800172c:	f7ff fc5c 	bl	8000fe8 <HAL_GetTick>
 8001730:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001732:	e008      	b.n	8001746 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001734:	f7ff fc58 	bl	8000fe8 <HAL_GetTick>
 8001738:	4602      	mov	r2, r0
 800173a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	2b64      	cmp	r3, #100	; 0x64
 8001740:	d901      	bls.n	8001746 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001742:	2303      	movs	r3, #3
 8001744:	e379      	b.n	8001e3a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001746:	4b5a      	ldr	r3, [pc, #360]	; (80018b0 <HAL_RCC_OscConfig+0x288>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800174e:	2b00      	cmp	r3, #0
 8001750:	d1f0      	bne.n	8001734 <HAL_RCC_OscConfig+0x10c>
 8001752:	e000      	b.n	8001756 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001754:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 0302 	and.w	r3, r3, #2
 800175e:	2b00      	cmp	r3, #0
 8001760:	f000 80ae 	beq.w	80018c0 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001764:	4b52      	ldr	r3, [pc, #328]	; (80018b0 <HAL_RCC_OscConfig+0x288>)
 8001766:	691b      	ldr	r3, [r3, #16]
 8001768:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800176c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800176e:	4b50      	ldr	r3, [pc, #320]	; (80018b0 <HAL_RCC_OscConfig+0x288>)
 8001770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001772:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001774:	6a3b      	ldr	r3, [r7, #32]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d007      	beq.n	800178a <HAL_RCC_OscConfig+0x162>
 800177a:	6a3b      	ldr	r3, [r7, #32]
 800177c:	2b18      	cmp	r3, #24
 800177e:	d13a      	bne.n	80017f6 <HAL_RCC_OscConfig+0x1ce>
 8001780:	69fb      	ldr	r3, [r7, #28]
 8001782:	f003 0303 	and.w	r3, r3, #3
 8001786:	2b00      	cmp	r3, #0
 8001788:	d135      	bne.n	80017f6 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800178a:	4b49      	ldr	r3, [pc, #292]	; (80018b0 <HAL_RCC_OscConfig+0x288>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f003 0304 	and.w	r3, r3, #4
 8001792:	2b00      	cmp	r3, #0
 8001794:	d005      	beq.n	80017a2 <HAL_RCC_OscConfig+0x17a>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	68db      	ldr	r3, [r3, #12]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d101      	bne.n	80017a2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	e34b      	b.n	8001e3a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017a2:	f7ff fc4f 	bl	8001044 <HAL_GetREVID>
 80017a6:	4602      	mov	r2, r0
 80017a8:	f241 0303 	movw	r3, #4099	; 0x1003
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d817      	bhi.n	80017e0 <HAL_RCC_OscConfig+0x1b8>
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	691b      	ldr	r3, [r3, #16]
 80017b4:	2b40      	cmp	r3, #64	; 0x40
 80017b6:	d108      	bne.n	80017ca <HAL_RCC_OscConfig+0x1a2>
 80017b8:	4a3d      	ldr	r2, [pc, #244]	; (80018b0 <HAL_RCC_OscConfig+0x288>)
 80017ba:	4b3d      	ldr	r3, [pc, #244]	; (80018b0 <HAL_RCC_OscConfig+0x288>)
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80017c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017c6:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017c8:	e07a      	b.n	80018c0 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017ca:	4939      	ldr	r1, [pc, #228]	; (80018b0 <HAL_RCC_OscConfig+0x288>)
 80017cc:	4b38      	ldr	r3, [pc, #224]	; (80018b0 <HAL_RCC_OscConfig+0x288>)
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	691b      	ldr	r3, [r3, #16]
 80017d8:	031b      	lsls	r3, r3, #12
 80017da:	4313      	orrs	r3, r2
 80017dc:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017de:	e06f      	b.n	80018c0 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017e0:	4933      	ldr	r1, [pc, #204]	; (80018b0 <HAL_RCC_OscConfig+0x288>)
 80017e2:	4b33      	ldr	r3, [pc, #204]	; (80018b0 <HAL_RCC_OscConfig+0x288>)
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	691b      	ldr	r3, [r3, #16]
 80017ee:	061b      	lsls	r3, r3, #24
 80017f0:	4313      	orrs	r3, r2
 80017f2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017f4:	e064      	b.n	80018c0 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	68db      	ldr	r3, [r3, #12]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d045      	beq.n	800188a <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80017fe:	492c      	ldr	r1, [pc, #176]	; (80018b0 <HAL_RCC_OscConfig+0x288>)
 8001800:	4b2b      	ldr	r3, [pc, #172]	; (80018b0 <HAL_RCC_OscConfig+0x288>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f023 0219 	bic.w	r2, r3, #25
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	68db      	ldr	r3, [r3, #12]
 800180c:	4313      	orrs	r3, r2
 800180e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001810:	f7ff fbea 	bl	8000fe8 <HAL_GetTick>
 8001814:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001816:	e008      	b.n	800182a <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001818:	f7ff fbe6 	bl	8000fe8 <HAL_GetTick>
 800181c:	4602      	mov	r2, r0
 800181e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001820:	1ad3      	subs	r3, r2, r3
 8001822:	2b02      	cmp	r3, #2
 8001824:	d901      	bls.n	800182a <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8001826:	2303      	movs	r3, #3
 8001828:	e307      	b.n	8001e3a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800182a:	4b21      	ldr	r3, [pc, #132]	; (80018b0 <HAL_RCC_OscConfig+0x288>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f003 0304 	and.w	r3, r3, #4
 8001832:	2b00      	cmp	r3, #0
 8001834:	d0f0      	beq.n	8001818 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001836:	f7ff fc05 	bl	8001044 <HAL_GetREVID>
 800183a:	4602      	mov	r2, r0
 800183c:	f241 0303 	movw	r3, #4099	; 0x1003
 8001840:	429a      	cmp	r2, r3
 8001842:	d817      	bhi.n	8001874 <HAL_RCC_OscConfig+0x24c>
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	691b      	ldr	r3, [r3, #16]
 8001848:	2b40      	cmp	r3, #64	; 0x40
 800184a:	d108      	bne.n	800185e <HAL_RCC_OscConfig+0x236>
 800184c:	4a18      	ldr	r2, [pc, #96]	; (80018b0 <HAL_RCC_OscConfig+0x288>)
 800184e:	4b18      	ldr	r3, [pc, #96]	; (80018b0 <HAL_RCC_OscConfig+0x288>)
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001856:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800185a:	6053      	str	r3, [r2, #4]
 800185c:	e030      	b.n	80018c0 <HAL_RCC_OscConfig+0x298>
 800185e:	4914      	ldr	r1, [pc, #80]	; (80018b0 <HAL_RCC_OscConfig+0x288>)
 8001860:	4b13      	ldr	r3, [pc, #76]	; (80018b0 <HAL_RCC_OscConfig+0x288>)
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	691b      	ldr	r3, [r3, #16]
 800186c:	031b      	lsls	r3, r3, #12
 800186e:	4313      	orrs	r3, r2
 8001870:	604b      	str	r3, [r1, #4]
 8001872:	e025      	b.n	80018c0 <HAL_RCC_OscConfig+0x298>
 8001874:	490e      	ldr	r1, [pc, #56]	; (80018b0 <HAL_RCC_OscConfig+0x288>)
 8001876:	4b0e      	ldr	r3, [pc, #56]	; (80018b0 <HAL_RCC_OscConfig+0x288>)
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	691b      	ldr	r3, [r3, #16]
 8001882:	061b      	lsls	r3, r3, #24
 8001884:	4313      	orrs	r3, r2
 8001886:	604b      	str	r3, [r1, #4]
 8001888:	e01a      	b.n	80018c0 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800188a:	4a09      	ldr	r2, [pc, #36]	; (80018b0 <HAL_RCC_OscConfig+0x288>)
 800188c:	4b08      	ldr	r3, [pc, #32]	; (80018b0 <HAL_RCC_OscConfig+0x288>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f023 0301 	bic.w	r3, r3, #1
 8001894:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001896:	f7ff fba7 	bl	8000fe8 <HAL_GetTick>
 800189a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800189c:	e00a      	b.n	80018b4 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800189e:	f7ff fba3 	bl	8000fe8 <HAL_GetTick>
 80018a2:	4602      	mov	r2, r0
 80018a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a6:	1ad3      	subs	r3, r2, r3
 80018a8:	2b02      	cmp	r3, #2
 80018aa:	d903      	bls.n	80018b4 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 80018ac:	2303      	movs	r3, #3
 80018ae:	e2c4      	b.n	8001e3a <HAL_RCC_OscConfig+0x812>
 80018b0:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80018b4:	4ba4      	ldr	r3, [pc, #656]	; (8001b48 <HAL_RCC_OscConfig+0x520>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f003 0304 	and.w	r3, r3, #4
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d1ee      	bne.n	800189e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f003 0310 	and.w	r3, r3, #16
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	f000 80a9 	beq.w	8001a20 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018ce:	4b9e      	ldr	r3, [pc, #632]	; (8001b48 <HAL_RCC_OscConfig+0x520>)
 80018d0:	691b      	ldr	r3, [r3, #16]
 80018d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80018d6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80018d8:	4b9b      	ldr	r3, [pc, #620]	; (8001b48 <HAL_RCC_OscConfig+0x520>)
 80018da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018dc:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80018de:	69bb      	ldr	r3, [r7, #24]
 80018e0:	2b08      	cmp	r3, #8
 80018e2:	d007      	beq.n	80018f4 <HAL_RCC_OscConfig+0x2cc>
 80018e4:	69bb      	ldr	r3, [r7, #24]
 80018e6:	2b18      	cmp	r3, #24
 80018e8:	d13a      	bne.n	8001960 <HAL_RCC_OscConfig+0x338>
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	f003 0303 	and.w	r3, r3, #3
 80018f0:	2b01      	cmp	r3, #1
 80018f2:	d135      	bne.n	8001960 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80018f4:	4b94      	ldr	r3, [pc, #592]	; (8001b48 <HAL_RCC_OscConfig+0x520>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d005      	beq.n	800190c <HAL_RCC_OscConfig+0x2e4>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	69db      	ldr	r3, [r3, #28]
 8001904:	2b80      	cmp	r3, #128	; 0x80
 8001906:	d001      	beq.n	800190c <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8001908:	2301      	movs	r3, #1
 800190a:	e296      	b.n	8001e3a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800190c:	f7ff fb9a 	bl	8001044 <HAL_GetREVID>
 8001910:	4602      	mov	r2, r0
 8001912:	f241 0303 	movw	r3, #4099	; 0x1003
 8001916:	429a      	cmp	r2, r3
 8001918:	d817      	bhi.n	800194a <HAL_RCC_OscConfig+0x322>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6a1b      	ldr	r3, [r3, #32]
 800191e:	2b20      	cmp	r3, #32
 8001920:	d108      	bne.n	8001934 <HAL_RCC_OscConfig+0x30c>
 8001922:	4a89      	ldr	r2, [pc, #548]	; (8001b48 <HAL_RCC_OscConfig+0x520>)
 8001924:	4b88      	ldr	r3, [pc, #544]	; (8001b48 <HAL_RCC_OscConfig+0x520>)
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800192c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001930:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001932:	e075      	b.n	8001a20 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001934:	4984      	ldr	r1, [pc, #528]	; (8001b48 <HAL_RCC_OscConfig+0x520>)
 8001936:	4b84      	ldr	r3, [pc, #528]	; (8001b48 <HAL_RCC_OscConfig+0x520>)
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6a1b      	ldr	r3, [r3, #32]
 8001942:	069b      	lsls	r3, r3, #26
 8001944:	4313      	orrs	r3, r2
 8001946:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001948:	e06a      	b.n	8001a20 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800194a:	497f      	ldr	r1, [pc, #508]	; (8001b48 <HAL_RCC_OscConfig+0x520>)
 800194c:	4b7e      	ldr	r3, [pc, #504]	; (8001b48 <HAL_RCC_OscConfig+0x520>)
 800194e:	68db      	ldr	r3, [r3, #12]
 8001950:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6a1b      	ldr	r3, [r3, #32]
 8001958:	061b      	lsls	r3, r3, #24
 800195a:	4313      	orrs	r3, r2
 800195c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800195e:	e05f      	b.n	8001a20 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	69db      	ldr	r3, [r3, #28]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d042      	beq.n	80019ee <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001968:	4a77      	ldr	r2, [pc, #476]	; (8001b48 <HAL_RCC_OscConfig+0x520>)
 800196a:	4b77      	ldr	r3, [pc, #476]	; (8001b48 <HAL_RCC_OscConfig+0x520>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001972:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001974:	f7ff fb38 	bl	8000fe8 <HAL_GetTick>
 8001978:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800197a:	e008      	b.n	800198e <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800197c:	f7ff fb34 	bl	8000fe8 <HAL_GetTick>
 8001980:	4602      	mov	r2, r0
 8001982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001984:	1ad3      	subs	r3, r2, r3
 8001986:	2b02      	cmp	r3, #2
 8001988:	d901      	bls.n	800198e <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 800198a:	2303      	movs	r3, #3
 800198c:	e255      	b.n	8001e3a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800198e:	4b6e      	ldr	r3, [pc, #440]	; (8001b48 <HAL_RCC_OscConfig+0x520>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001996:	2b00      	cmp	r3, #0
 8001998:	d0f0      	beq.n	800197c <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800199a:	f7ff fb53 	bl	8001044 <HAL_GetREVID>
 800199e:	4602      	mov	r2, r0
 80019a0:	f241 0303 	movw	r3, #4099	; 0x1003
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d817      	bhi.n	80019d8 <HAL_RCC_OscConfig+0x3b0>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6a1b      	ldr	r3, [r3, #32]
 80019ac:	2b20      	cmp	r3, #32
 80019ae:	d108      	bne.n	80019c2 <HAL_RCC_OscConfig+0x39a>
 80019b0:	4a65      	ldr	r2, [pc, #404]	; (8001b48 <HAL_RCC_OscConfig+0x520>)
 80019b2:	4b65      	ldr	r3, [pc, #404]	; (8001b48 <HAL_RCC_OscConfig+0x520>)
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80019ba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80019be:	6053      	str	r3, [r2, #4]
 80019c0:	e02e      	b.n	8001a20 <HAL_RCC_OscConfig+0x3f8>
 80019c2:	4961      	ldr	r1, [pc, #388]	; (8001b48 <HAL_RCC_OscConfig+0x520>)
 80019c4:	4b60      	ldr	r3, [pc, #384]	; (8001b48 <HAL_RCC_OscConfig+0x520>)
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6a1b      	ldr	r3, [r3, #32]
 80019d0:	069b      	lsls	r3, r3, #26
 80019d2:	4313      	orrs	r3, r2
 80019d4:	604b      	str	r3, [r1, #4]
 80019d6:	e023      	b.n	8001a20 <HAL_RCC_OscConfig+0x3f8>
 80019d8:	495b      	ldr	r1, [pc, #364]	; (8001b48 <HAL_RCC_OscConfig+0x520>)
 80019da:	4b5b      	ldr	r3, [pc, #364]	; (8001b48 <HAL_RCC_OscConfig+0x520>)
 80019dc:	68db      	ldr	r3, [r3, #12]
 80019de:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6a1b      	ldr	r3, [r3, #32]
 80019e6:	061b      	lsls	r3, r3, #24
 80019e8:	4313      	orrs	r3, r2
 80019ea:	60cb      	str	r3, [r1, #12]
 80019ec:	e018      	b.n	8001a20 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80019ee:	4a56      	ldr	r2, [pc, #344]	; (8001b48 <HAL_RCC_OscConfig+0x520>)
 80019f0:	4b55      	ldr	r3, [pc, #340]	; (8001b48 <HAL_RCC_OscConfig+0x520>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80019f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019fa:	f7ff faf5 	bl	8000fe8 <HAL_GetTick>
 80019fe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001a00:	e008      	b.n	8001a14 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001a02:	f7ff faf1 	bl	8000fe8 <HAL_GetTick>
 8001a06:	4602      	mov	r2, r0
 8001a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a0a:	1ad3      	subs	r3, r2, r3
 8001a0c:	2b02      	cmp	r3, #2
 8001a0e:	d901      	bls.n	8001a14 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8001a10:	2303      	movs	r3, #3
 8001a12:	e212      	b.n	8001e3a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001a14:	4b4c      	ldr	r3, [pc, #304]	; (8001b48 <HAL_RCC_OscConfig+0x520>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d1f0      	bne.n	8001a02 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f003 0308 	and.w	r3, r3, #8
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d036      	beq.n	8001a9a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	695b      	ldr	r3, [r3, #20]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d019      	beq.n	8001a68 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a34:	4a44      	ldr	r2, [pc, #272]	; (8001b48 <HAL_RCC_OscConfig+0x520>)
 8001a36:	4b44      	ldr	r3, [pc, #272]	; (8001b48 <HAL_RCC_OscConfig+0x520>)
 8001a38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a3a:	f043 0301 	orr.w	r3, r3, #1
 8001a3e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a40:	f7ff fad2 	bl	8000fe8 <HAL_GetTick>
 8001a44:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001a46:	e008      	b.n	8001a5a <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a48:	f7ff face 	bl	8000fe8 <HAL_GetTick>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	2b02      	cmp	r3, #2
 8001a54:	d901      	bls.n	8001a5a <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8001a56:	2303      	movs	r3, #3
 8001a58:	e1ef      	b.n	8001e3a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001a5a:	4b3b      	ldr	r3, [pc, #236]	; (8001b48 <HAL_RCC_OscConfig+0x520>)
 8001a5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a5e:	f003 0302 	and.w	r3, r3, #2
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d0f0      	beq.n	8001a48 <HAL_RCC_OscConfig+0x420>
 8001a66:	e018      	b.n	8001a9a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a68:	4a37      	ldr	r2, [pc, #220]	; (8001b48 <HAL_RCC_OscConfig+0x520>)
 8001a6a:	4b37      	ldr	r3, [pc, #220]	; (8001b48 <HAL_RCC_OscConfig+0x520>)
 8001a6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a6e:	f023 0301 	bic.w	r3, r3, #1
 8001a72:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a74:	f7ff fab8 	bl	8000fe8 <HAL_GetTick>
 8001a78:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001a7a:	e008      	b.n	8001a8e <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a7c:	f7ff fab4 	bl	8000fe8 <HAL_GetTick>
 8001a80:	4602      	mov	r2, r0
 8001a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a84:	1ad3      	subs	r3, r2, r3
 8001a86:	2b02      	cmp	r3, #2
 8001a88:	d901      	bls.n	8001a8e <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	e1d5      	b.n	8001e3a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001a8e:	4b2e      	ldr	r3, [pc, #184]	; (8001b48 <HAL_RCC_OscConfig+0x520>)
 8001a90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a92:	f003 0302 	and.w	r3, r3, #2
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d1f0      	bne.n	8001a7c <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f003 0320 	and.w	r3, r3, #32
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d036      	beq.n	8001b14 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	699b      	ldr	r3, [r3, #24]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d019      	beq.n	8001ae2 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001aae:	4a26      	ldr	r2, [pc, #152]	; (8001b48 <HAL_RCC_OscConfig+0x520>)
 8001ab0:	4b25      	ldr	r3, [pc, #148]	; (8001b48 <HAL_RCC_OscConfig+0x520>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001ab8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001aba:	f7ff fa95 	bl	8000fe8 <HAL_GetTick>
 8001abe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001ac0:	e008      	b.n	8001ad4 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001ac2:	f7ff fa91 	bl	8000fe8 <HAL_GetTick>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aca:	1ad3      	subs	r3, r2, r3
 8001acc:	2b02      	cmp	r3, #2
 8001ace:	d901      	bls.n	8001ad4 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8001ad0:	2303      	movs	r3, #3
 8001ad2:	e1b2      	b.n	8001e3a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001ad4:	4b1c      	ldr	r3, [pc, #112]	; (8001b48 <HAL_RCC_OscConfig+0x520>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d0f0      	beq.n	8001ac2 <HAL_RCC_OscConfig+0x49a>
 8001ae0:	e018      	b.n	8001b14 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001ae2:	4a19      	ldr	r2, [pc, #100]	; (8001b48 <HAL_RCC_OscConfig+0x520>)
 8001ae4:	4b18      	ldr	r3, [pc, #96]	; (8001b48 <HAL_RCC_OscConfig+0x520>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001aec:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001aee:	f7ff fa7b 	bl	8000fe8 <HAL_GetTick>
 8001af2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001af4:	e008      	b.n	8001b08 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001af6:	f7ff fa77 	bl	8000fe8 <HAL_GetTick>
 8001afa:	4602      	mov	r2, r0
 8001afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001afe:	1ad3      	subs	r3, r2, r3
 8001b00:	2b02      	cmp	r3, #2
 8001b02:	d901      	bls.n	8001b08 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8001b04:	2303      	movs	r3, #3
 8001b06:	e198      	b.n	8001e3a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001b08:	4b0f      	ldr	r3, [pc, #60]	; (8001b48 <HAL_RCC_OscConfig+0x520>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d1f0      	bne.n	8001af6 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f003 0304 	and.w	r3, r3, #4
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	f000 8085 	beq.w	8001c2c <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001b22:	4a0a      	ldr	r2, [pc, #40]	; (8001b4c <HAL_RCC_OscConfig+0x524>)
 8001b24:	4b09      	ldr	r3, [pc, #36]	; (8001b4c <HAL_RCC_OscConfig+0x524>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b2c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001b2e:	f7ff fa5b 	bl	8000fe8 <HAL_GetTick>
 8001b32:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001b34:	e00c      	b.n	8001b50 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001b36:	f7ff fa57 	bl	8000fe8 <HAL_GetTick>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b3e:	1ad3      	subs	r3, r2, r3
 8001b40:	2b64      	cmp	r3, #100	; 0x64
 8001b42:	d905      	bls.n	8001b50 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8001b44:	2303      	movs	r3, #3
 8001b46:	e178      	b.n	8001e3a <HAL_RCC_OscConfig+0x812>
 8001b48:	58024400 	.word	0x58024400
 8001b4c:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001b50:	4b96      	ldr	r3, [pc, #600]	; (8001dac <HAL_RCC_OscConfig+0x784>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d0ec      	beq.n	8001b36 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d106      	bne.n	8001b72 <HAL_RCC_OscConfig+0x54a>
 8001b64:	4a92      	ldr	r2, [pc, #584]	; (8001db0 <HAL_RCC_OscConfig+0x788>)
 8001b66:	4b92      	ldr	r3, [pc, #584]	; (8001db0 <HAL_RCC_OscConfig+0x788>)
 8001b68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b6a:	f043 0301 	orr.w	r3, r3, #1
 8001b6e:	6713      	str	r3, [r2, #112]	; 0x70
 8001b70:	e02d      	b.n	8001bce <HAL_RCC_OscConfig+0x5a6>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d10c      	bne.n	8001b94 <HAL_RCC_OscConfig+0x56c>
 8001b7a:	4a8d      	ldr	r2, [pc, #564]	; (8001db0 <HAL_RCC_OscConfig+0x788>)
 8001b7c:	4b8c      	ldr	r3, [pc, #560]	; (8001db0 <HAL_RCC_OscConfig+0x788>)
 8001b7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b80:	f023 0301 	bic.w	r3, r3, #1
 8001b84:	6713      	str	r3, [r2, #112]	; 0x70
 8001b86:	4a8a      	ldr	r2, [pc, #552]	; (8001db0 <HAL_RCC_OscConfig+0x788>)
 8001b88:	4b89      	ldr	r3, [pc, #548]	; (8001db0 <HAL_RCC_OscConfig+0x788>)
 8001b8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b8c:	f023 0304 	bic.w	r3, r3, #4
 8001b90:	6713      	str	r3, [r2, #112]	; 0x70
 8001b92:	e01c      	b.n	8001bce <HAL_RCC_OscConfig+0x5a6>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	2b05      	cmp	r3, #5
 8001b9a:	d10c      	bne.n	8001bb6 <HAL_RCC_OscConfig+0x58e>
 8001b9c:	4a84      	ldr	r2, [pc, #528]	; (8001db0 <HAL_RCC_OscConfig+0x788>)
 8001b9e:	4b84      	ldr	r3, [pc, #528]	; (8001db0 <HAL_RCC_OscConfig+0x788>)
 8001ba0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ba2:	f043 0304 	orr.w	r3, r3, #4
 8001ba6:	6713      	str	r3, [r2, #112]	; 0x70
 8001ba8:	4a81      	ldr	r2, [pc, #516]	; (8001db0 <HAL_RCC_OscConfig+0x788>)
 8001baa:	4b81      	ldr	r3, [pc, #516]	; (8001db0 <HAL_RCC_OscConfig+0x788>)
 8001bac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bae:	f043 0301 	orr.w	r3, r3, #1
 8001bb2:	6713      	str	r3, [r2, #112]	; 0x70
 8001bb4:	e00b      	b.n	8001bce <HAL_RCC_OscConfig+0x5a6>
 8001bb6:	4a7e      	ldr	r2, [pc, #504]	; (8001db0 <HAL_RCC_OscConfig+0x788>)
 8001bb8:	4b7d      	ldr	r3, [pc, #500]	; (8001db0 <HAL_RCC_OscConfig+0x788>)
 8001bba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bbc:	f023 0301 	bic.w	r3, r3, #1
 8001bc0:	6713      	str	r3, [r2, #112]	; 0x70
 8001bc2:	4a7b      	ldr	r2, [pc, #492]	; (8001db0 <HAL_RCC_OscConfig+0x788>)
 8001bc4:	4b7a      	ldr	r3, [pc, #488]	; (8001db0 <HAL_RCC_OscConfig+0x788>)
 8001bc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bc8:	f023 0304 	bic.w	r3, r3, #4
 8001bcc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d015      	beq.n	8001c02 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bd6:	f7ff fa07 	bl	8000fe8 <HAL_GetTick>
 8001bda:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001bdc:	e00a      	b.n	8001bf4 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bde:	f7ff fa03 	bl	8000fe8 <HAL_GetTick>
 8001be2:	4602      	mov	r2, r0
 8001be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be6:	1ad3      	subs	r3, r2, r3
 8001be8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d901      	bls.n	8001bf4 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8001bf0:	2303      	movs	r3, #3
 8001bf2:	e122      	b.n	8001e3a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001bf4:	4b6e      	ldr	r3, [pc, #440]	; (8001db0 <HAL_RCC_OscConfig+0x788>)
 8001bf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bf8:	f003 0302 	and.w	r3, r3, #2
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d0ee      	beq.n	8001bde <HAL_RCC_OscConfig+0x5b6>
 8001c00:	e014      	b.n	8001c2c <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c02:	f7ff f9f1 	bl	8000fe8 <HAL_GetTick>
 8001c06:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001c08:	e00a      	b.n	8001c20 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c0a:	f7ff f9ed 	bl	8000fe8 <HAL_GetTick>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c12:	1ad3      	subs	r3, r2, r3
 8001c14:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d901      	bls.n	8001c20 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8001c1c:	2303      	movs	r3, #3
 8001c1e:	e10c      	b.n	8001e3a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001c20:	4b63      	ldr	r3, [pc, #396]	; (8001db0 <HAL_RCC_OscConfig+0x788>)
 8001c22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c24:	f003 0302 	and.w	r3, r3, #2
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d1ee      	bne.n	8001c0a <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	f000 8101 	beq.w	8001e38 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001c36:	4b5e      	ldr	r3, [pc, #376]	; (8001db0 <HAL_RCC_OscConfig+0x788>)
 8001c38:	691b      	ldr	r3, [r3, #16]
 8001c3a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001c3e:	2b18      	cmp	r3, #24
 8001c40:	f000 80bc 	beq.w	8001dbc <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c48:	2b02      	cmp	r3, #2
 8001c4a:	f040 8095 	bne.w	8001d78 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c4e:	4a58      	ldr	r2, [pc, #352]	; (8001db0 <HAL_RCC_OscConfig+0x788>)
 8001c50:	4b57      	ldr	r3, [pc, #348]	; (8001db0 <HAL_RCC_OscConfig+0x788>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c5a:	f7ff f9c5 	bl	8000fe8 <HAL_GetTick>
 8001c5e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001c60:	e008      	b.n	8001c74 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c62:	f7ff f9c1 	bl	8000fe8 <HAL_GetTick>
 8001c66:	4602      	mov	r2, r0
 8001c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c6a:	1ad3      	subs	r3, r2, r3
 8001c6c:	2b02      	cmp	r3, #2
 8001c6e:	d901      	bls.n	8001c74 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8001c70:	2303      	movs	r3, #3
 8001c72:	e0e2      	b.n	8001e3a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001c74:	4b4e      	ldr	r3, [pc, #312]	; (8001db0 <HAL_RCC_OscConfig+0x788>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d1f0      	bne.n	8001c62 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c80:	484b      	ldr	r0, [pc, #300]	; (8001db0 <HAL_RCC_OscConfig+0x788>)
 8001c82:	4b4b      	ldr	r3, [pc, #300]	; (8001db0 <HAL_RCC_OscConfig+0x788>)
 8001c84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c86:	4b4b      	ldr	r3, [pc, #300]	; (8001db4 <HAL_RCC_OscConfig+0x78c>)
 8001c88:	4013      	ands	r3, r2
 8001c8a:	687a      	ldr	r2, [r7, #4]
 8001c8c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001c8e:	687a      	ldr	r2, [r7, #4]
 8001c90:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001c92:	0112      	lsls	r2, r2, #4
 8001c94:	430a      	orrs	r2, r1
 8001c96:	4313      	orrs	r3, r2
 8001c98:	6283      	str	r3, [r0, #40]	; 0x28
 8001c9a:	4945      	ldr	r1, [pc, #276]	; (8001db0 <HAL_RCC_OscConfig+0x788>)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca0:	3b01      	subs	r3, #1
 8001ca2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001caa:	3b01      	subs	r3, #1
 8001cac:	025b      	lsls	r3, r3, #9
 8001cae:	b29b      	uxth	r3, r3
 8001cb0:	431a      	orrs	r2, r3
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cb6:	3b01      	subs	r3, #1
 8001cb8:	041b      	lsls	r3, r3, #16
 8001cba:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001cbe:	431a      	orrs	r2, r3
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cc4:	3b01      	subs	r3, #1
 8001cc6:	061b      	lsls	r3, r3, #24
 8001cc8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8001cd0:	4a37      	ldr	r2, [pc, #220]	; (8001db0 <HAL_RCC_OscConfig+0x788>)
 8001cd2:	4b37      	ldr	r3, [pc, #220]	; (8001db0 <HAL_RCC_OscConfig+0x788>)
 8001cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cd6:	f023 0301 	bic.w	r3, r3, #1
 8001cda:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001cdc:	4934      	ldr	r1, [pc, #208]	; (8001db0 <HAL_RCC_OscConfig+0x788>)
 8001cde:	4b34      	ldr	r3, [pc, #208]	; (8001db0 <HAL_RCC_OscConfig+0x788>)
 8001ce0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ce2:	4b35      	ldr	r3, [pc, #212]	; (8001db8 <HAL_RCC_OscConfig+0x790>)
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	687a      	ldr	r2, [r7, #4]
 8001ce8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001cea:	00d2      	lsls	r2, r2, #3
 8001cec:	4313      	orrs	r3, r2
 8001cee:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001cf0:	492f      	ldr	r1, [pc, #188]	; (8001db0 <HAL_RCC_OscConfig+0x788>)
 8001cf2:	4b2f      	ldr	r3, [pc, #188]	; (8001db0 <HAL_RCC_OscConfig+0x788>)
 8001cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cf6:	f023 020c 	bic.w	r2, r3, #12
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001d02:	492b      	ldr	r1, [pc, #172]	; (8001db0 <HAL_RCC_OscConfig+0x788>)
 8001d04:	4b2a      	ldr	r3, [pc, #168]	; (8001db0 <HAL_RCC_OscConfig+0x788>)
 8001d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d08:	f023 0202 	bic.w	r2, r3, #2
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d10:	4313      	orrs	r3, r2
 8001d12:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001d14:	4a26      	ldr	r2, [pc, #152]	; (8001db0 <HAL_RCC_OscConfig+0x788>)
 8001d16:	4b26      	ldr	r3, [pc, #152]	; (8001db0 <HAL_RCC_OscConfig+0x788>)
 8001d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d1e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001d20:	4a23      	ldr	r2, [pc, #140]	; (8001db0 <HAL_RCC_OscConfig+0x788>)
 8001d22:	4b23      	ldr	r3, [pc, #140]	; (8001db0 <HAL_RCC_OscConfig+0x788>)
 8001d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d2a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001d2c:	4a20      	ldr	r2, [pc, #128]	; (8001db0 <HAL_RCC_OscConfig+0x788>)
 8001d2e:	4b20      	ldr	r3, [pc, #128]	; (8001db0 <HAL_RCC_OscConfig+0x788>)
 8001d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d32:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d36:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8001d38:	4a1d      	ldr	r2, [pc, #116]	; (8001db0 <HAL_RCC_OscConfig+0x788>)
 8001d3a:	4b1d      	ldr	r3, [pc, #116]	; (8001db0 <HAL_RCC_OscConfig+0x788>)
 8001d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d3e:	f043 0301 	orr.w	r3, r3, #1
 8001d42:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d44:	4a1a      	ldr	r2, [pc, #104]	; (8001db0 <HAL_RCC_OscConfig+0x788>)
 8001d46:	4b1a      	ldr	r3, [pc, #104]	; (8001db0 <HAL_RCC_OscConfig+0x788>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d50:	f7ff f94a 	bl	8000fe8 <HAL_GetTick>
 8001d54:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001d56:	e008      	b.n	8001d6a <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d58:	f7ff f946 	bl	8000fe8 <HAL_GetTick>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	2b02      	cmp	r3, #2
 8001d64:	d901      	bls.n	8001d6a <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8001d66:	2303      	movs	r3, #3
 8001d68:	e067      	b.n	8001e3a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001d6a:	4b11      	ldr	r3, [pc, #68]	; (8001db0 <HAL_RCC_OscConfig+0x788>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d0f0      	beq.n	8001d58 <HAL_RCC_OscConfig+0x730>
 8001d76:	e05f      	b.n	8001e38 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d78:	4a0d      	ldr	r2, [pc, #52]	; (8001db0 <HAL_RCC_OscConfig+0x788>)
 8001d7a:	4b0d      	ldr	r3, [pc, #52]	; (8001db0 <HAL_RCC_OscConfig+0x788>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d84:	f7ff f930 	bl	8000fe8 <HAL_GetTick>
 8001d88:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001d8a:	e008      	b.n	8001d9e <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d8c:	f7ff f92c 	bl	8000fe8 <HAL_GetTick>
 8001d90:	4602      	mov	r2, r0
 8001d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d94:	1ad3      	subs	r3, r2, r3
 8001d96:	2b02      	cmp	r3, #2
 8001d98:	d901      	bls.n	8001d9e <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8001d9a:	2303      	movs	r3, #3
 8001d9c:	e04d      	b.n	8001e3a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001d9e:	4b04      	ldr	r3, [pc, #16]	; (8001db0 <HAL_RCC_OscConfig+0x788>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d1f0      	bne.n	8001d8c <HAL_RCC_OscConfig+0x764>
 8001daa:	e045      	b.n	8001e38 <HAL_RCC_OscConfig+0x810>
 8001dac:	58024800 	.word	0x58024800
 8001db0:	58024400 	.word	0x58024400
 8001db4:	fffffc0c 	.word	0xfffffc0c
 8001db8:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001dbc:	4b21      	ldr	r3, [pc, #132]	; (8001e44 <HAL_RCC_OscConfig+0x81c>)
 8001dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dc0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001dc2:	4b20      	ldr	r3, [pc, #128]	; (8001e44 <HAL_RCC_OscConfig+0x81c>)
 8001dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc6:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dcc:	2b01      	cmp	r3, #1
 8001dce:	d031      	beq.n	8001e34 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	f003 0203 	and.w	r2, r3, #3
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001dda:	429a      	cmp	r2, r3
 8001ddc:	d12a      	bne.n	8001e34 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	091b      	lsrs	r3, r3, #4
 8001de2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dea:	429a      	cmp	r2, r3
 8001dec:	d122      	bne.n	8001e34 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df8:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001dfa:	429a      	cmp	r2, r3
 8001dfc:	d11a      	bne.n	8001e34 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	0a5b      	lsrs	r3, r3, #9
 8001e02:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e0a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d111      	bne.n	8001e34 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	0c1b      	lsrs	r3, r3, #16
 8001e14:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e1c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001e1e:	429a      	cmp	r2, r3
 8001e20:	d108      	bne.n	8001e34 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	0e1b      	lsrs	r3, r3, #24
 8001e26:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e2e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001e30:	429a      	cmp	r2, r3
 8001e32:	d001      	beq.n	8001e38 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8001e34:	2301      	movs	r3, #1
 8001e36:	e000      	b.n	8001e3a <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8001e38:	2300      	movs	r3, #0
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3730      	adds	r7, #48	; 0x30
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	58024400 	.word	0x58024400

08001e48 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b086      	sub	sp, #24
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
 8001e50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d101      	bne.n	8001e5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e19c      	b.n	8002196 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e5c:	4b8a      	ldr	r3, [pc, #552]	; (8002088 <HAL_RCC_ClockConfig+0x240>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f003 020f 	and.w	r2, r3, #15
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	429a      	cmp	r2, r3
 8001e68:	d210      	bcs.n	8001e8c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e6a:	4987      	ldr	r1, [pc, #540]	; (8002088 <HAL_RCC_ClockConfig+0x240>)
 8001e6c:	4b86      	ldr	r3, [pc, #536]	; (8002088 <HAL_RCC_ClockConfig+0x240>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f023 020f 	bic.w	r2, r3, #15
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	4313      	orrs	r3, r2
 8001e78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e7a:	4b83      	ldr	r3, [pc, #524]	; (8002088 <HAL_RCC_ClockConfig+0x240>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f003 020f 	and.w	r2, r3, #15
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d001      	beq.n	8001e8c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	e184      	b.n	8002196 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f003 0304 	and.w	r3, r3, #4
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d010      	beq.n	8001eba <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	691a      	ldr	r2, [r3, #16]
 8001e9c:	4b7b      	ldr	r3, [pc, #492]	; (800208c <HAL_RCC_ClockConfig+0x244>)
 8001e9e:	699b      	ldr	r3, [r3, #24]
 8001ea0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d908      	bls.n	8001eba <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001ea8:	4978      	ldr	r1, [pc, #480]	; (800208c <HAL_RCC_ClockConfig+0x244>)
 8001eaa:	4b78      	ldr	r3, [pc, #480]	; (800208c <HAL_RCC_ClockConfig+0x244>)
 8001eac:	699b      	ldr	r3, [r3, #24]
 8001eae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	691b      	ldr	r3, [r3, #16]
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 0308 	and.w	r3, r3, #8
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d010      	beq.n	8001ee8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	695a      	ldr	r2, [r3, #20]
 8001eca:	4b70      	ldr	r3, [pc, #448]	; (800208c <HAL_RCC_ClockConfig+0x244>)
 8001ecc:	69db      	ldr	r3, [r3, #28]
 8001ece:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001ed2:	429a      	cmp	r2, r3
 8001ed4:	d908      	bls.n	8001ee8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001ed6:	496d      	ldr	r1, [pc, #436]	; (800208c <HAL_RCC_ClockConfig+0x244>)
 8001ed8:	4b6c      	ldr	r3, [pc, #432]	; (800208c <HAL_RCC_ClockConfig+0x244>)
 8001eda:	69db      	ldr	r3, [r3, #28]
 8001edc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	695b      	ldr	r3, [r3, #20]
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 0310 	and.w	r3, r3, #16
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d010      	beq.n	8001f16 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	699a      	ldr	r2, [r3, #24]
 8001ef8:	4b64      	ldr	r3, [pc, #400]	; (800208c <HAL_RCC_ClockConfig+0x244>)
 8001efa:	69db      	ldr	r3, [r3, #28]
 8001efc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d908      	bls.n	8001f16 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001f04:	4961      	ldr	r1, [pc, #388]	; (800208c <HAL_RCC_ClockConfig+0x244>)
 8001f06:	4b61      	ldr	r3, [pc, #388]	; (800208c <HAL_RCC_ClockConfig+0x244>)
 8001f08:	69db      	ldr	r3, [r3, #28]
 8001f0a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	699b      	ldr	r3, [r3, #24]
 8001f12:	4313      	orrs	r3, r2
 8001f14:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 0320 	and.w	r3, r3, #32
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d010      	beq.n	8001f44 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	69da      	ldr	r2, [r3, #28]
 8001f26:	4b59      	ldr	r3, [pc, #356]	; (800208c <HAL_RCC_ClockConfig+0x244>)
 8001f28:	6a1b      	ldr	r3, [r3, #32]
 8001f2a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	d908      	bls.n	8001f44 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001f32:	4956      	ldr	r1, [pc, #344]	; (800208c <HAL_RCC_ClockConfig+0x244>)
 8001f34:	4b55      	ldr	r3, [pc, #340]	; (800208c <HAL_RCC_ClockConfig+0x244>)
 8001f36:	6a1b      	ldr	r3, [r3, #32]
 8001f38:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	69db      	ldr	r3, [r3, #28]
 8001f40:	4313      	orrs	r3, r2
 8001f42:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f003 0302 	and.w	r3, r3, #2
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d010      	beq.n	8001f72 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	68da      	ldr	r2, [r3, #12]
 8001f54:	4b4d      	ldr	r3, [pc, #308]	; (800208c <HAL_RCC_ClockConfig+0x244>)
 8001f56:	699b      	ldr	r3, [r3, #24]
 8001f58:	f003 030f 	and.w	r3, r3, #15
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	d908      	bls.n	8001f72 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f60:	494a      	ldr	r1, [pc, #296]	; (800208c <HAL_RCC_ClockConfig+0x244>)
 8001f62:	4b4a      	ldr	r3, [pc, #296]	; (800208c <HAL_RCC_ClockConfig+0x244>)
 8001f64:	699b      	ldr	r3, [r3, #24]
 8001f66:	f023 020f 	bic.w	r2, r3, #15
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	68db      	ldr	r3, [r3, #12]
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 0301 	and.w	r3, r3, #1
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d055      	beq.n	800202a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001f7e:	4943      	ldr	r1, [pc, #268]	; (800208c <HAL_RCC_ClockConfig+0x244>)
 8001f80:	4b42      	ldr	r3, [pc, #264]	; (800208c <HAL_RCC_ClockConfig+0x244>)
 8001f82:	699b      	ldr	r3, [r3, #24]
 8001f84:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	2b02      	cmp	r3, #2
 8001f96:	d107      	bne.n	8001fa8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001f98:	4b3c      	ldr	r3, [pc, #240]	; (800208c <HAL_RCC_ClockConfig+0x244>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d121      	bne.n	8001fe8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e0f6      	b.n	8002196 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	2b03      	cmp	r3, #3
 8001fae:	d107      	bne.n	8001fc0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001fb0:	4b36      	ldr	r3, [pc, #216]	; (800208c <HAL_RCC_ClockConfig+0x244>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d115      	bne.n	8001fe8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e0ea      	b.n	8002196 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	d107      	bne.n	8001fd8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001fc8:	4b30      	ldr	r3, [pc, #192]	; (800208c <HAL_RCC_ClockConfig+0x244>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d109      	bne.n	8001fe8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e0de      	b.n	8002196 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001fd8:	4b2c      	ldr	r3, [pc, #176]	; (800208c <HAL_RCC_ClockConfig+0x244>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 0304 	and.w	r3, r3, #4
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d101      	bne.n	8001fe8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e0d6      	b.n	8002196 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001fe8:	4928      	ldr	r1, [pc, #160]	; (800208c <HAL_RCC_ClockConfig+0x244>)
 8001fea:	4b28      	ldr	r3, [pc, #160]	; (800208c <HAL_RCC_ClockConfig+0x244>)
 8001fec:	691b      	ldr	r3, [r3, #16]
 8001fee:	f023 0207 	bic.w	r2, r3, #7
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ffa:	f7fe fff5 	bl	8000fe8 <HAL_GetTick>
 8001ffe:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002000:	e00a      	b.n	8002018 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002002:	f7fe fff1 	bl	8000fe8 <HAL_GetTick>
 8002006:	4602      	mov	r2, r0
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	1ad3      	subs	r3, r2, r3
 800200c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002010:	4293      	cmp	r3, r2
 8002012:	d901      	bls.n	8002018 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002014:	2303      	movs	r3, #3
 8002016:	e0be      	b.n	8002196 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002018:	4b1c      	ldr	r3, [pc, #112]	; (800208c <HAL_RCC_ClockConfig+0x244>)
 800201a:	691b      	ldr	r3, [r3, #16]
 800201c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	00db      	lsls	r3, r3, #3
 8002026:	429a      	cmp	r2, r3
 8002028:	d1eb      	bne.n	8002002 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 0302 	and.w	r3, r3, #2
 8002032:	2b00      	cmp	r3, #0
 8002034:	d010      	beq.n	8002058 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	68da      	ldr	r2, [r3, #12]
 800203a:	4b14      	ldr	r3, [pc, #80]	; (800208c <HAL_RCC_ClockConfig+0x244>)
 800203c:	699b      	ldr	r3, [r3, #24]
 800203e:	f003 030f 	and.w	r3, r3, #15
 8002042:	429a      	cmp	r2, r3
 8002044:	d208      	bcs.n	8002058 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002046:	4911      	ldr	r1, [pc, #68]	; (800208c <HAL_RCC_ClockConfig+0x244>)
 8002048:	4b10      	ldr	r3, [pc, #64]	; (800208c <HAL_RCC_ClockConfig+0x244>)
 800204a:	699b      	ldr	r3, [r3, #24]
 800204c:	f023 020f 	bic.w	r2, r3, #15
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	4313      	orrs	r3, r2
 8002056:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002058:	4b0b      	ldr	r3, [pc, #44]	; (8002088 <HAL_RCC_ClockConfig+0x240>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f003 020f 	and.w	r2, r3, #15
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	429a      	cmp	r2, r3
 8002064:	d914      	bls.n	8002090 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002066:	4908      	ldr	r1, [pc, #32]	; (8002088 <HAL_RCC_ClockConfig+0x240>)
 8002068:	4b07      	ldr	r3, [pc, #28]	; (8002088 <HAL_RCC_ClockConfig+0x240>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f023 020f 	bic.w	r2, r3, #15
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	4313      	orrs	r3, r2
 8002074:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002076:	4b04      	ldr	r3, [pc, #16]	; (8002088 <HAL_RCC_ClockConfig+0x240>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f003 020f 	and.w	r2, r3, #15
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	429a      	cmp	r2, r3
 8002082:	d005      	beq.n	8002090 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002084:	2301      	movs	r3, #1
 8002086:	e086      	b.n	8002196 <HAL_RCC_ClockConfig+0x34e>
 8002088:	52002000 	.word	0x52002000
 800208c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 0304 	and.w	r3, r3, #4
 8002098:	2b00      	cmp	r3, #0
 800209a:	d010      	beq.n	80020be <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	691a      	ldr	r2, [r3, #16]
 80020a0:	4b3f      	ldr	r3, [pc, #252]	; (80021a0 <HAL_RCC_ClockConfig+0x358>)
 80020a2:	699b      	ldr	r3, [r3, #24]
 80020a4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d208      	bcs.n	80020be <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80020ac:	493c      	ldr	r1, [pc, #240]	; (80021a0 <HAL_RCC_ClockConfig+0x358>)
 80020ae:	4b3c      	ldr	r3, [pc, #240]	; (80021a0 <HAL_RCC_ClockConfig+0x358>)
 80020b0:	699b      	ldr	r3, [r3, #24]
 80020b2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	691b      	ldr	r3, [r3, #16]
 80020ba:	4313      	orrs	r3, r2
 80020bc:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 0308 	and.w	r3, r3, #8
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d010      	beq.n	80020ec <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	695a      	ldr	r2, [r3, #20]
 80020ce:	4b34      	ldr	r3, [pc, #208]	; (80021a0 <HAL_RCC_ClockConfig+0x358>)
 80020d0:	69db      	ldr	r3, [r3, #28]
 80020d2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80020d6:	429a      	cmp	r2, r3
 80020d8:	d208      	bcs.n	80020ec <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80020da:	4931      	ldr	r1, [pc, #196]	; (80021a0 <HAL_RCC_ClockConfig+0x358>)
 80020dc:	4b30      	ldr	r3, [pc, #192]	; (80021a0 <HAL_RCC_ClockConfig+0x358>)
 80020de:	69db      	ldr	r3, [r3, #28]
 80020e0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	695b      	ldr	r3, [r3, #20]
 80020e8:	4313      	orrs	r3, r2
 80020ea:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f003 0310 	and.w	r3, r3, #16
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d010      	beq.n	800211a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	699a      	ldr	r2, [r3, #24]
 80020fc:	4b28      	ldr	r3, [pc, #160]	; (80021a0 <HAL_RCC_ClockConfig+0x358>)
 80020fe:	69db      	ldr	r3, [r3, #28]
 8002100:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002104:	429a      	cmp	r2, r3
 8002106:	d208      	bcs.n	800211a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002108:	4925      	ldr	r1, [pc, #148]	; (80021a0 <HAL_RCC_ClockConfig+0x358>)
 800210a:	4b25      	ldr	r3, [pc, #148]	; (80021a0 <HAL_RCC_ClockConfig+0x358>)
 800210c:	69db      	ldr	r3, [r3, #28]
 800210e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	699b      	ldr	r3, [r3, #24]
 8002116:	4313      	orrs	r3, r2
 8002118:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 0320 	and.w	r3, r3, #32
 8002122:	2b00      	cmp	r3, #0
 8002124:	d010      	beq.n	8002148 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	69da      	ldr	r2, [r3, #28]
 800212a:	4b1d      	ldr	r3, [pc, #116]	; (80021a0 <HAL_RCC_ClockConfig+0x358>)
 800212c:	6a1b      	ldr	r3, [r3, #32]
 800212e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002132:	429a      	cmp	r2, r3
 8002134:	d208      	bcs.n	8002148 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002136:	491a      	ldr	r1, [pc, #104]	; (80021a0 <HAL_RCC_ClockConfig+0x358>)
 8002138:	4b19      	ldr	r3, [pc, #100]	; (80021a0 <HAL_RCC_ClockConfig+0x358>)
 800213a:	6a1b      	ldr	r3, [r3, #32]
 800213c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	69db      	ldr	r3, [r3, #28]
 8002144:	4313      	orrs	r3, r2
 8002146:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002148:	f000 f834 	bl	80021b4 <HAL_RCC_GetSysClockFreq>
 800214c:	4601      	mov	r1, r0
 800214e:	4b14      	ldr	r3, [pc, #80]	; (80021a0 <HAL_RCC_ClockConfig+0x358>)
 8002150:	699b      	ldr	r3, [r3, #24]
 8002152:	0a1b      	lsrs	r3, r3, #8
 8002154:	f003 030f 	and.w	r3, r3, #15
 8002158:	4a12      	ldr	r2, [pc, #72]	; (80021a4 <HAL_RCC_ClockConfig+0x35c>)
 800215a:	5cd3      	ldrb	r3, [r2, r3]
 800215c:	f003 031f 	and.w	r3, r3, #31
 8002160:	fa21 f303 	lsr.w	r3, r1, r3
 8002164:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002166:	4b0e      	ldr	r3, [pc, #56]	; (80021a0 <HAL_RCC_ClockConfig+0x358>)
 8002168:	699b      	ldr	r3, [r3, #24]
 800216a:	f003 030f 	and.w	r3, r3, #15
 800216e:	4a0d      	ldr	r2, [pc, #52]	; (80021a4 <HAL_RCC_ClockConfig+0x35c>)
 8002170:	5cd3      	ldrb	r3, [r2, r3]
 8002172:	f003 031f 	and.w	r3, r3, #31
 8002176:	693a      	ldr	r2, [r7, #16]
 8002178:	fa22 f303 	lsr.w	r3, r2, r3
 800217c:	4a0a      	ldr	r2, [pc, #40]	; (80021a8 <HAL_RCC_ClockConfig+0x360>)
 800217e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002180:	4a0a      	ldr	r2, [pc, #40]	; (80021ac <HAL_RCC_ClockConfig+0x364>)
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8002186:	4b0a      	ldr	r3, [pc, #40]	; (80021b0 <HAL_RCC_ClockConfig+0x368>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4618      	mov	r0, r3
 800218c:	f7fe fee2 	bl	8000f54 <HAL_InitTick>
 8002190:	4603      	mov	r3, r0
 8002192:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002194:	7bfb      	ldrb	r3, [r7, #15]
}
 8002196:	4618      	mov	r0, r3
 8002198:	3718      	adds	r7, #24
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	58024400 	.word	0x58024400
 80021a4:	08003c28 	.word	0x08003c28
 80021a8:	20000004 	.word	0x20000004
 80021ac:	20000000 	.word	0x20000000
 80021b0:	20000008 	.word	0x20000008

080021b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b089      	sub	sp, #36	; 0x24
 80021b8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80021ba:	4baf      	ldr	r3, [pc, #700]	; (8002478 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80021bc:	691b      	ldr	r3, [r3, #16]
 80021be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80021c2:	2b18      	cmp	r3, #24
 80021c4:	f200 814e 	bhi.w	8002464 <HAL_RCC_GetSysClockFreq+0x2b0>
 80021c8:	a201      	add	r2, pc, #4	; (adr r2, 80021d0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80021ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021ce:	bf00      	nop
 80021d0:	08002235 	.word	0x08002235
 80021d4:	08002465 	.word	0x08002465
 80021d8:	08002465 	.word	0x08002465
 80021dc:	08002465 	.word	0x08002465
 80021e0:	08002465 	.word	0x08002465
 80021e4:	08002465 	.word	0x08002465
 80021e8:	08002465 	.word	0x08002465
 80021ec:	08002465 	.word	0x08002465
 80021f0:	0800225b 	.word	0x0800225b
 80021f4:	08002465 	.word	0x08002465
 80021f8:	08002465 	.word	0x08002465
 80021fc:	08002465 	.word	0x08002465
 8002200:	08002465 	.word	0x08002465
 8002204:	08002465 	.word	0x08002465
 8002208:	08002465 	.word	0x08002465
 800220c:	08002465 	.word	0x08002465
 8002210:	08002261 	.word	0x08002261
 8002214:	08002465 	.word	0x08002465
 8002218:	08002465 	.word	0x08002465
 800221c:	08002465 	.word	0x08002465
 8002220:	08002465 	.word	0x08002465
 8002224:	08002465 	.word	0x08002465
 8002228:	08002465 	.word	0x08002465
 800222c:	08002465 	.word	0x08002465
 8002230:	08002267 	.word	0x08002267
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002234:	4b90      	ldr	r3, [pc, #576]	; (8002478 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 0320 	and.w	r3, r3, #32
 800223c:	2b00      	cmp	r3, #0
 800223e:	d009      	beq.n	8002254 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002240:	4b8d      	ldr	r3, [pc, #564]	; (8002478 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	08db      	lsrs	r3, r3, #3
 8002246:	f003 0303 	and.w	r3, r3, #3
 800224a:	4a8c      	ldr	r2, [pc, #560]	; (800247c <HAL_RCC_GetSysClockFreq+0x2c8>)
 800224c:	fa22 f303 	lsr.w	r3, r2, r3
 8002250:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8002252:	e10a      	b.n	800246a <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002254:	4b89      	ldr	r3, [pc, #548]	; (800247c <HAL_RCC_GetSysClockFreq+0x2c8>)
 8002256:	61bb      	str	r3, [r7, #24]
    break;
 8002258:	e107      	b.n	800246a <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800225a:	4b89      	ldr	r3, [pc, #548]	; (8002480 <HAL_RCC_GetSysClockFreq+0x2cc>)
 800225c:	61bb      	str	r3, [r7, #24]
    break;
 800225e:	e104      	b.n	800246a <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8002260:	4b88      	ldr	r3, [pc, #544]	; (8002484 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8002262:	61bb      	str	r3, [r7, #24]
    break;
 8002264:	e101      	b.n	800246a <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002266:	4b84      	ldr	r3, [pc, #528]	; (8002478 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800226a:	f003 0303 	and.w	r3, r3, #3
 800226e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002270:	4b81      	ldr	r3, [pc, #516]	; (8002478 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002274:	091b      	lsrs	r3, r3, #4
 8002276:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800227a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800227c:	4b7e      	ldr	r3, [pc, #504]	; (8002478 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800227e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002280:	f003 0301 	and.w	r3, r3, #1
 8002284:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002286:	4b7c      	ldr	r3, [pc, #496]	; (8002478 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002288:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800228a:	08db      	lsrs	r3, r3, #3
 800228c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002290:	68fa      	ldr	r2, [r7, #12]
 8002292:	fb02 f303 	mul.w	r3, r2, r3
 8002296:	ee07 3a90 	vmov	s15, r3
 800229a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800229e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	f000 80da 	beq.w	800245e <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d05a      	beq.n	8002366 <HAL_RCC_GetSysClockFreq+0x1b2>
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d302      	bcc.n	80022ba <HAL_RCC_GetSysClockFreq+0x106>
 80022b4:	2b02      	cmp	r3, #2
 80022b6:	d078      	beq.n	80023aa <HAL_RCC_GetSysClockFreq+0x1f6>
 80022b8:	e099      	b.n	80023ee <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80022ba:	4b6f      	ldr	r3, [pc, #444]	; (8002478 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 0320 	and.w	r3, r3, #32
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d02d      	beq.n	8002322 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80022c6:	4b6c      	ldr	r3, [pc, #432]	; (8002478 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	08db      	lsrs	r3, r3, #3
 80022cc:	f003 0303 	and.w	r3, r3, #3
 80022d0:	4a6a      	ldr	r2, [pc, #424]	; (800247c <HAL_RCC_GetSysClockFreq+0x2c8>)
 80022d2:	fa22 f303 	lsr.w	r3, r2, r3
 80022d6:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	ee07 3a90 	vmov	s15, r3
 80022de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	ee07 3a90 	vmov	s15, r3
 80022e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80022f0:	4b61      	ldr	r3, [pc, #388]	; (8002478 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80022f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022f8:	ee07 3a90 	vmov	s15, r3
 80022fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002300:	ed97 6a02 	vldr	s12, [r7, #8]
 8002304:	eddf 5a60 	vldr	s11, [pc, #384]	; 8002488 <HAL_RCC_GetSysClockFreq+0x2d4>
 8002308:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800230c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002310:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002314:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002318:	ee67 7a27 	vmul.f32	s15, s14, s15
 800231c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8002320:	e087      	b.n	8002432 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	ee07 3a90 	vmov	s15, r3
 8002328:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800232c:	eddf 6a57 	vldr	s13, [pc, #348]	; 800248c <HAL_RCC_GetSysClockFreq+0x2d8>
 8002330:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002334:	4b50      	ldr	r3, [pc, #320]	; (8002478 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002338:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800233c:	ee07 3a90 	vmov	s15, r3
 8002340:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002344:	ed97 6a02 	vldr	s12, [r7, #8]
 8002348:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8002488 <HAL_RCC_GetSysClockFreq+0x2d4>
 800234c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002350:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002354:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002358:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800235c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002360:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002364:	e065      	b.n	8002432 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	ee07 3a90 	vmov	s15, r3
 800236c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002370:	eddf 6a47 	vldr	s13, [pc, #284]	; 8002490 <HAL_RCC_GetSysClockFreq+0x2dc>
 8002374:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002378:	4b3f      	ldr	r3, [pc, #252]	; (8002478 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800237a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800237c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002380:	ee07 3a90 	vmov	s15, r3
 8002384:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002388:	ed97 6a02 	vldr	s12, [r7, #8]
 800238c:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8002488 <HAL_RCC_GetSysClockFreq+0x2d4>
 8002390:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002394:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002398:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800239c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80023a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023a4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80023a8:	e043      	b.n	8002432 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	ee07 3a90 	vmov	s15, r3
 80023b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023b4:	eddf 6a37 	vldr	s13, [pc, #220]	; 8002494 <HAL_RCC_GetSysClockFreq+0x2e0>
 80023b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80023bc:	4b2e      	ldr	r3, [pc, #184]	; (8002478 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80023be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023c4:	ee07 3a90 	vmov	s15, r3
 80023c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80023cc:	ed97 6a02 	vldr	s12, [r7, #8]
 80023d0:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8002488 <HAL_RCC_GetSysClockFreq+0x2d4>
 80023d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80023d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80023dc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80023e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80023e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023e8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80023ec:	e021      	b.n	8002432 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	ee07 3a90 	vmov	s15, r3
 80023f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023f8:	eddf 6a25 	vldr	s13, [pc, #148]	; 8002490 <HAL_RCC_GetSysClockFreq+0x2dc>
 80023fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002400:	4b1d      	ldr	r3, [pc, #116]	; (8002478 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002404:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002408:	ee07 3a90 	vmov	s15, r3
 800240c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002410:	ed97 6a02 	vldr	s12, [r7, #8]
 8002414:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8002488 <HAL_RCC_GetSysClockFreq+0x2d4>
 8002418:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800241c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002420:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002424:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002428:	ee67 7a27 	vmul.f32	s15, s14, s15
 800242c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002430:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8002432:	4b11      	ldr	r3, [pc, #68]	; (8002478 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8002434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002436:	0a5b      	lsrs	r3, r3, #9
 8002438:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800243c:	3301      	adds	r3, #1
 800243e:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	ee07 3a90 	vmov	s15, r3
 8002446:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800244a:	edd7 6a07 	vldr	s13, [r7, #28]
 800244e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002452:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002456:	ee17 3a90 	vmov	r3, s15
 800245a:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800245c:	e005      	b.n	800246a <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 800245e:	2300      	movs	r3, #0
 8002460:	61bb      	str	r3, [r7, #24]
    break;
 8002462:	e002      	b.n	800246a <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8002464:	4b06      	ldr	r3, [pc, #24]	; (8002480 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8002466:	61bb      	str	r3, [r7, #24]
    break;
 8002468:	bf00      	nop
  }

  return sysclockfreq;
 800246a:	69bb      	ldr	r3, [r7, #24]
}
 800246c:	4618      	mov	r0, r3
 800246e:	3724      	adds	r7, #36	; 0x24
 8002470:	46bd      	mov	sp, r7
 8002472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002476:	4770      	bx	lr
 8002478:	58024400 	.word	0x58024400
 800247c:	03d09000 	.word	0x03d09000
 8002480:	003d0900 	.word	0x003d0900
 8002484:	016e3600 	.word	0x016e3600
 8002488:	46000000 	.word	0x46000000
 800248c:	4c742400 	.word	0x4c742400
 8002490:	4a742400 	.word	0x4a742400
 8002494:	4bb71b00 	.word	0x4bb71b00

08002498 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b086      	sub	sp, #24
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80024a0:	2300      	movs	r3, #0
 80024a2:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80024a4:	2300      	movs	r3, #0
 80024a6:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d03d      	beq.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80024b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80024bc:	d013      	beq.n	80024e6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80024be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80024c2:	d802      	bhi.n	80024ca <HAL_RCCEx_PeriphCLKConfig+0x32>
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d007      	beq.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80024c8:	e01f      	b.n	800250a <HAL_RCCEx_PeriphCLKConfig+0x72>
 80024ca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80024ce:	d013      	beq.n	80024f8 <HAL_RCCEx_PeriphCLKConfig+0x60>
 80024d0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80024d4:	d01c      	beq.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0x78>
 80024d6:	e018      	b.n	800250a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80024d8:	4aaf      	ldr	r2, [pc, #700]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80024da:	4baf      	ldr	r3, [pc, #700]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80024dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024e2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80024e4:	e015      	b.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	3304      	adds	r3, #4
 80024ea:	2102      	movs	r1, #2
 80024ec:	4618      	mov	r0, r3
 80024ee:	f000 fed1 	bl	8003294 <RCCEx_PLL2_Config>
 80024f2:	4603      	mov	r3, r0
 80024f4:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80024f6:	e00c      	b.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	3324      	adds	r3, #36	; 0x24
 80024fc:	2102      	movs	r1, #2
 80024fe:	4618      	mov	r0, r3
 8002500:	f000 ff7a 	bl	80033f8 <RCCEx_PLL3_Config>
 8002504:	4603      	mov	r3, r0
 8002506:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8002508:	e003      	b.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	75fb      	strb	r3, [r7, #23]
      break;
 800250e:	e000      	b.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8002510:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002512:	7dfb      	ldrb	r3, [r7, #23]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d109      	bne.n	800252c <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002518:	499f      	ldr	r1, [pc, #636]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800251a:	4b9f      	ldr	r3, [pc, #636]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800251c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800251e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002526:	4313      	orrs	r3, r2
 8002528:	650b      	str	r3, [r1, #80]	; 0x50
 800252a:	e001      	b.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800252c:	7dfb      	ldrb	r3, [r7, #23]
 800252e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002538:	2b00      	cmp	r3, #0
 800253a:	d03d      	beq.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002540:	2b04      	cmp	r3, #4
 8002542:	d826      	bhi.n	8002592 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8002544:	a201      	add	r2, pc, #4	; (adr r2, 800254c <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8002546:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800254a:	bf00      	nop
 800254c:	08002561 	.word	0x08002561
 8002550:	0800256f 	.word	0x0800256f
 8002554:	08002581 	.word	0x08002581
 8002558:	08002599 	.word	0x08002599
 800255c:	08002599 	.word	0x08002599
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002560:	4a8d      	ldr	r2, [pc, #564]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002562:	4b8d      	ldr	r3, [pc, #564]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002566:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800256a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800256c:	e015      	b.n	800259a <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	3304      	adds	r3, #4
 8002572:	2100      	movs	r1, #0
 8002574:	4618      	mov	r0, r3
 8002576:	f000 fe8d 	bl	8003294 <RCCEx_PLL2_Config>
 800257a:	4603      	mov	r3, r0
 800257c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800257e:	e00c      	b.n	800259a <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	3324      	adds	r3, #36	; 0x24
 8002584:	2100      	movs	r1, #0
 8002586:	4618      	mov	r0, r3
 8002588:	f000 ff36 	bl	80033f8 <RCCEx_PLL3_Config>
 800258c:	4603      	mov	r3, r0
 800258e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002590:	e003      	b.n	800259a <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	75fb      	strb	r3, [r7, #23]
      break;
 8002596:	e000      	b.n	800259a <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8002598:	bf00      	nop
    }

    if(ret == HAL_OK)
 800259a:	7dfb      	ldrb	r3, [r7, #23]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d109      	bne.n	80025b4 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80025a0:	497d      	ldr	r1, [pc, #500]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80025a2:	4b7d      	ldr	r3, [pc, #500]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80025a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025a6:	f023 0207 	bic.w	r2, r3, #7
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025ae:	4313      	orrs	r3, r2
 80025b0:	650b      	str	r3, [r1, #80]	; 0x50
 80025b2:	e001      	b.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025b4:	7dfb      	ldrb	r3, [r7, #23]
 80025b6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d03e      	beq.n	8002642 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025c8:	2b80      	cmp	r3, #128	; 0x80
 80025ca:	d01c      	beq.n	8002606 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80025cc:	2b80      	cmp	r3, #128	; 0x80
 80025ce:	d804      	bhi.n	80025da <HAL_RCCEx_PeriphCLKConfig+0x142>
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d008      	beq.n	80025e6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80025d4:	2b40      	cmp	r3, #64	; 0x40
 80025d6:	d00d      	beq.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80025d8:	e01e      	b.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x180>
 80025da:	2bc0      	cmp	r3, #192	; 0xc0
 80025dc:	d01f      	beq.n	800261e <HAL_RCCEx_PeriphCLKConfig+0x186>
 80025de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025e2:	d01e      	beq.n	8002622 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80025e4:	e018      	b.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80025e6:	4a6c      	ldr	r2, [pc, #432]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80025e8:	4b6b      	ldr	r3, [pc, #428]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80025ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025f0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80025f2:	e017      	b.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	3304      	adds	r3, #4
 80025f8:	2100      	movs	r1, #0
 80025fa:	4618      	mov	r0, r3
 80025fc:	f000 fe4a 	bl	8003294 <RCCEx_PLL2_Config>
 8002600:	4603      	mov	r3, r0
 8002602:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002604:	e00e      	b.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	3324      	adds	r3, #36	; 0x24
 800260a:	2100      	movs	r1, #0
 800260c:	4618      	mov	r0, r3
 800260e:	f000 fef3 	bl	80033f8 <RCCEx_PLL3_Config>
 8002612:	4603      	mov	r3, r0
 8002614:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8002616:	e005      	b.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	75fb      	strb	r3, [r7, #23]
      break;
 800261c:	e002      	b.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 800261e:	bf00      	nop
 8002620:	e000      	b.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8002622:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002624:	7dfb      	ldrb	r3, [r7, #23]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d109      	bne.n	800263e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800262a:	495b      	ldr	r1, [pc, #364]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800262c:	4b5a      	ldr	r3, [pc, #360]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800262e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002630:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002638:	4313      	orrs	r3, r2
 800263a:	650b      	str	r3, [r1, #80]	; 0x50
 800263c:	e001      	b.n	8002642 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800263e:	7dfb      	ldrb	r3, [r7, #23]
 8002640:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800264a:	2b00      	cmp	r3, #0
 800264c:	d044      	beq.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002654:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002658:	d01f      	beq.n	800269a <HAL_RCCEx_PeriphCLKConfig+0x202>
 800265a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800265e:	d805      	bhi.n	800266c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8002660:	2b00      	cmp	r3, #0
 8002662:	d00a      	beq.n	800267a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002664:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002668:	d00e      	beq.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 800266a:	e01f      	b.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x214>
 800266c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002670:	d01f      	beq.n	80026b2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8002672:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002676:	d01e      	beq.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8002678:	e018      	b.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800267a:	4a47      	ldr	r2, [pc, #284]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800267c:	4b46      	ldr	r3, [pc, #280]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800267e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002680:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002684:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002686:	e017      	b.n	80026b8 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	3304      	adds	r3, #4
 800268c:	2100      	movs	r1, #0
 800268e:	4618      	mov	r0, r3
 8002690:	f000 fe00 	bl	8003294 <RCCEx_PLL2_Config>
 8002694:	4603      	mov	r3, r0
 8002696:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002698:	e00e      	b.n	80026b8 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	3324      	adds	r3, #36	; 0x24
 800269e:	2100      	movs	r1, #0
 80026a0:	4618      	mov	r0, r3
 80026a2:	f000 fea9 	bl	80033f8 <RCCEx_PLL3_Config>
 80026a6:	4603      	mov	r3, r0
 80026a8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80026aa:	e005      	b.n	80026b8 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
 80026ae:	75fb      	strb	r3, [r7, #23]
      break;
 80026b0:	e002      	b.n	80026b8 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 80026b2:	bf00      	nop
 80026b4:	e000      	b.n	80026b8 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 80026b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80026b8:	7dfb      	ldrb	r3, [r7, #23]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d10a      	bne.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80026be:	4936      	ldr	r1, [pc, #216]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80026c0:	4b35      	ldr	r3, [pc, #212]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80026c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026c4:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80026ce:	4313      	orrs	r3, r2
 80026d0:	658b      	str	r3, [r1, #88]	; 0x58
 80026d2:	e001      	b.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026d4:	7dfb      	ldrb	r3, [r7, #23]
 80026d6:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d044      	beq.n	800276e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80026ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80026ee:	d01f      	beq.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80026f0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80026f4:	d805      	bhi.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d00a      	beq.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0x278>
 80026fa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026fe:	d00e      	beq.n	800271e <HAL_RCCEx_PeriphCLKConfig+0x286>
 8002700:	e01f      	b.n	8002742 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8002702:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002706:	d01f      	beq.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8002708:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800270c:	d01e      	beq.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800270e:	e018      	b.n	8002742 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002710:	4a21      	ldr	r2, [pc, #132]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002712:	4b21      	ldr	r3, [pc, #132]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002716:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800271a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800271c:	e017      	b.n	800274e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	3304      	adds	r3, #4
 8002722:	2100      	movs	r1, #0
 8002724:	4618      	mov	r0, r3
 8002726:	f000 fdb5 	bl	8003294 <RCCEx_PLL2_Config>
 800272a:	4603      	mov	r3, r0
 800272c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800272e:	e00e      	b.n	800274e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	3324      	adds	r3, #36	; 0x24
 8002734:	2100      	movs	r1, #0
 8002736:	4618      	mov	r0, r3
 8002738:	f000 fe5e 	bl	80033f8 <RCCEx_PLL3_Config>
 800273c:	4603      	mov	r3, r0
 800273e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002740:	e005      	b.n	800274e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	75fb      	strb	r3, [r7, #23]
      break;
 8002746:	e002      	b.n	800274e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8002748:	bf00      	nop
 800274a:	e000      	b.n	800274e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 800274c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800274e:	7dfb      	ldrb	r3, [r7, #23]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d10a      	bne.n	800276a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002754:	4910      	ldr	r1, [pc, #64]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002756:	4b10      	ldr	r3, [pc, #64]	; (8002798 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002758:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800275a:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002764:	4313      	orrs	r3, r2
 8002766:	658b      	str	r3, [r1, #88]	; 0x58
 8002768:	e001      	b.n	800276e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800276a:	7dfb      	ldrb	r3, [r7, #23]
 800276c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002776:	2b00      	cmp	r3, #0
 8002778:	d035      	beq.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800277e:	2b10      	cmp	r3, #16
 8002780:	d00c      	beq.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x304>
 8002782:	2b10      	cmp	r3, #16
 8002784:	d802      	bhi.n	800278c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8002786:	2b00      	cmp	r3, #0
 8002788:	d01b      	beq.n	80027c2 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 800278a:	e017      	b.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x324>
 800278c:	2b20      	cmp	r3, #32
 800278e:	d00c      	beq.n	80027aa <HAL_RCCEx_PeriphCLKConfig+0x312>
 8002790:	2b30      	cmp	r3, #48	; 0x30
 8002792:	d018      	beq.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8002794:	e012      	b.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x324>
 8002796:	bf00      	nop
 8002798:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800279c:	4aaf      	ldr	r2, [pc, #700]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800279e:	4baf      	ldr	r3, [pc, #700]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80027a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027a6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80027a8:	e00e      	b.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	3304      	adds	r3, #4
 80027ae:	2102      	movs	r1, #2
 80027b0:	4618      	mov	r0, r3
 80027b2:	f000 fd6f 	bl	8003294 <RCCEx_PLL2_Config>
 80027b6:	4603      	mov	r3, r0
 80027b8:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80027ba:	e005      	b.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	75fb      	strb	r3, [r7, #23]
      break;
 80027c0:	e002      	b.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 80027c2:	bf00      	nop
 80027c4:	e000      	b.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 80027c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80027c8:	7dfb      	ldrb	r3, [r7, #23]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d109      	bne.n	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80027ce:	49a3      	ldr	r1, [pc, #652]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80027d0:	4ba2      	ldr	r3, [pc, #648]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80027d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027d4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027dc:	4313      	orrs	r3, r2
 80027de:	64cb      	str	r3, [r1, #76]	; 0x4c
 80027e0:	e001      	b.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027e2:	7dfb      	ldrb	r3, [r7, #23]
 80027e4:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d042      	beq.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027fa:	d01f      	beq.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 80027fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002800:	d805      	bhi.n	800280e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002802:	2b00      	cmp	r3, #0
 8002804:	d00a      	beq.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x384>
 8002806:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800280a:	d00e      	beq.n	800282a <HAL_RCCEx_PeriphCLKConfig+0x392>
 800280c:	e01f      	b.n	800284e <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 800280e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002812:	d01f      	beq.n	8002854 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8002814:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002818:	d01e      	beq.n	8002858 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 800281a:	e018      	b.n	800284e <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800281c:	4a8f      	ldr	r2, [pc, #572]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800281e:	4b8f      	ldr	r3, [pc, #572]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002822:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002826:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002828:	e017      	b.n	800285a <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	3304      	adds	r3, #4
 800282e:	2100      	movs	r1, #0
 8002830:	4618      	mov	r0, r3
 8002832:	f000 fd2f 	bl	8003294 <RCCEx_PLL2_Config>
 8002836:	4603      	mov	r3, r0
 8002838:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800283a:	e00e      	b.n	800285a <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	3324      	adds	r3, #36	; 0x24
 8002840:	2100      	movs	r1, #0
 8002842:	4618      	mov	r0, r3
 8002844:	f000 fdd8 	bl	80033f8 <RCCEx_PLL3_Config>
 8002848:	4603      	mov	r3, r0
 800284a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800284c:	e005      	b.n	800285a <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	75fb      	strb	r3, [r7, #23]
      break;
 8002852:	e002      	b.n	800285a <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8002854:	bf00      	nop
 8002856:	e000      	b.n	800285a <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8002858:	bf00      	nop
    }

    if(ret == HAL_OK)
 800285a:	7dfb      	ldrb	r3, [r7, #23]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d109      	bne.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002860:	497e      	ldr	r1, [pc, #504]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002862:	4b7e      	ldr	r3, [pc, #504]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002864:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002866:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800286e:	4313      	orrs	r3, r2
 8002870:	650b      	str	r3, [r1, #80]	; 0x50
 8002872:	e001      	b.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002874:	7dfb      	ldrb	r3, [r7, #23]
 8002876:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002880:	2b00      	cmp	r3, #0
 8002882:	d042      	beq.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002888:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800288c:	d01b      	beq.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800288e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002892:	d805      	bhi.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8002894:	2b00      	cmp	r3, #0
 8002896:	d022      	beq.n	80028de <HAL_RCCEx_PeriphCLKConfig+0x446>
 8002898:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800289c:	d00a      	beq.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800289e:	e01b      	b.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x440>
 80028a0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80028a4:	d01d      	beq.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
 80028a6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028aa:	d01c      	beq.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x44e>
 80028ac:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80028b0:	d01b      	beq.n	80028ea <HAL_RCCEx_PeriphCLKConfig+0x452>
 80028b2:	e011      	b.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	3304      	adds	r3, #4
 80028b8:	2101      	movs	r1, #1
 80028ba:	4618      	mov	r0, r3
 80028bc:	f000 fcea 	bl	8003294 <RCCEx_PLL2_Config>
 80028c0:	4603      	mov	r3, r0
 80028c2:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80028c4:	e012      	b.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	3324      	adds	r3, #36	; 0x24
 80028ca:	2101      	movs	r1, #1
 80028cc:	4618      	mov	r0, r3
 80028ce:	f000 fd93 	bl	80033f8 <RCCEx_PLL3_Config>
 80028d2:	4603      	mov	r3, r0
 80028d4:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80028d6:	e009      	b.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	75fb      	strb	r3, [r7, #23]
      break;
 80028dc:	e006      	b.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80028de:	bf00      	nop
 80028e0:	e004      	b.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80028e2:	bf00      	nop
 80028e4:	e002      	b.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80028e6:	bf00      	nop
 80028e8:	e000      	b.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80028ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80028ec:	7dfb      	ldrb	r3, [r7, #23]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d109      	bne.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80028f2:	495a      	ldr	r1, [pc, #360]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80028f4:	4b59      	ldr	r3, [pc, #356]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80028f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028f8:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002900:	4313      	orrs	r3, r2
 8002902:	650b      	str	r3, [r1, #80]	; 0x50
 8002904:	e001      	b.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002906:	7dfb      	ldrb	r3, [r7, #23]
 8002908:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002912:	2b00      	cmp	r3, #0
 8002914:	d044      	beq.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800291c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002920:	d01b      	beq.n	800295a <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8002922:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002926:	d805      	bhi.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8002928:	2b00      	cmp	r3, #0
 800292a:	d022      	beq.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800292c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002930:	d00a      	beq.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8002932:	e01b      	b.n	800296c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8002934:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002938:	d01d      	beq.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800293a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800293e:	d01c      	beq.n	800297a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8002940:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002944:	d01b      	beq.n	800297e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8002946:	e011      	b.n	800296c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	3304      	adds	r3, #4
 800294c:	2101      	movs	r1, #1
 800294e:	4618      	mov	r0, r3
 8002950:	f000 fca0 	bl	8003294 <RCCEx_PLL2_Config>
 8002954:	4603      	mov	r3, r0
 8002956:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002958:	e012      	b.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	3324      	adds	r3, #36	; 0x24
 800295e:	2101      	movs	r1, #1
 8002960:	4618      	mov	r0, r3
 8002962:	f000 fd49 	bl	80033f8 <RCCEx_PLL3_Config>
 8002966:	4603      	mov	r3, r0
 8002968:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800296a:	e009      	b.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	75fb      	strb	r3, [r7, #23]
      break;
 8002970:	e006      	b.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8002972:	bf00      	nop
 8002974:	e004      	b.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8002976:	bf00      	nop
 8002978:	e002      	b.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800297a:	bf00      	nop
 800297c:	e000      	b.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800297e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002980:	7dfb      	ldrb	r3, [r7, #23]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d10a      	bne.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002986:	4935      	ldr	r1, [pc, #212]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002988:	4b34      	ldr	r3, [pc, #208]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800298a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800298c:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002996:	4313      	orrs	r3, r2
 8002998:	658b      	str	r3, [r1, #88]	; 0x58
 800299a:	e001      	b.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800299c:	7dfb      	ldrb	r3, [r7, #23]
 800299e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d02d      	beq.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029b0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80029b4:	d005      	beq.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 80029b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80029ba:	d009      	beq.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x538>
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d013      	beq.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x550>
 80029c0:	e00f      	b.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80029c2:	4a26      	ldr	r2, [pc, #152]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80029c4:	4b25      	ldr	r3, [pc, #148]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80029c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029cc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80029ce:	e00c      	b.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	3304      	adds	r3, #4
 80029d4:	2101      	movs	r1, #1
 80029d6:	4618      	mov	r0, r3
 80029d8:	f000 fc5c 	bl	8003294 <RCCEx_PLL2_Config>
 80029dc:	4603      	mov	r3, r0
 80029de:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80029e0:	e003      	b.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	75fb      	strb	r3, [r7, #23]
      break;
 80029e6:	e000      	b.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 80029e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80029ea:	7dfb      	ldrb	r3, [r7, #23]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d109      	bne.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80029f0:	491a      	ldr	r1, [pc, #104]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80029f2:	4b1a      	ldr	r3, [pc, #104]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80029f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029f6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029fe:	4313      	orrs	r3, r2
 8002a00:	650b      	str	r3, [r1, #80]	; 0x50
 8002a02:	e001      	b.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a04:	7dfb      	ldrb	r3, [r7, #23]
 8002a06:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d035      	beq.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a18:	2b03      	cmp	r3, #3
 8002a1a:	d81b      	bhi.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8002a1c:	a201      	add	r2, pc, #4	; (adr r2, 8002a24 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8002a1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a22:	bf00      	nop
 8002a24:	08002a61 	.word	0x08002a61
 8002a28:	08002a35 	.word	0x08002a35
 8002a2c:	08002a43 	.word	0x08002a43
 8002a30:	08002a61 	.word	0x08002a61
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a34:	4a09      	ldr	r2, [pc, #36]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002a36:	4b09      	ldr	r3, [pc, #36]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8002a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a3e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002a40:	e00f      	b.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	3304      	adds	r3, #4
 8002a46:	2102      	movs	r1, #2
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f000 fc23 	bl	8003294 <RCCEx_PLL2_Config>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002a52:	e006      	b.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	75fb      	strb	r3, [r7, #23]
      break;
 8002a58:	e003      	b.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8002a5a:	bf00      	nop
 8002a5c:	58024400 	.word	0x58024400
      break;
 8002a60:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a62:	7dfb      	ldrb	r3, [r7, #23]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d109      	bne.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002a68:	49ba      	ldr	r1, [pc, #744]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002a6a:	4bba      	ldr	r3, [pc, #744]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002a6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a6e:	f023 0203 	bic.w	r2, r3, #3
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a76:	4313      	orrs	r3, r2
 8002a78:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002a7a:	e001      	b.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a7c:	7dfb      	ldrb	r3, [r7, #23]
 8002a7e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	f000 8086 	beq.w	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a8e:	4ab2      	ldr	r2, [pc, #712]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8002a90:	4bb1      	ldr	r3, [pc, #708]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a98:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002a9a:	f7fe faa5 	bl	8000fe8 <HAL_GetTick>
 8002a9e:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002aa0:	e009      	b.n	8002ab6 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002aa2:	f7fe faa1 	bl	8000fe8 <HAL_GetTick>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	1ad3      	subs	r3, r2, r3
 8002aac:	2b64      	cmp	r3, #100	; 0x64
 8002aae:	d902      	bls.n	8002ab6 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8002ab0:	2303      	movs	r3, #3
 8002ab2:	75fb      	strb	r3, [r7, #23]
        break;
 8002ab4:	e005      	b.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002ab6:	4ba8      	ldr	r3, [pc, #672]	; (8002d58 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d0ef      	beq.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 8002ac2:	7dfb      	ldrb	r3, [r7, #23]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d166      	bne.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002ac8:	4ba2      	ldr	r3, [pc, #648]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002aca:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002ad2:	4053      	eors	r3, r2
 8002ad4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d013      	beq.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002adc:	4b9d      	ldr	r3, [pc, #628]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002ade:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ae0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ae4:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002ae6:	4a9b      	ldr	r2, [pc, #620]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002ae8:	4b9a      	ldr	r3, [pc, #616]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002aea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002af0:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002af2:	4a98      	ldr	r2, [pc, #608]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002af4:	4b97      	ldr	r3, [pc, #604]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002af6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002af8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002afc:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002afe:	4a95      	ldr	r2, [pc, #596]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002b0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b0e:	d115      	bne.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b10:	f7fe fa6a 	bl	8000fe8 <HAL_GetTick>
 8002b14:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b16:	e00b      	b.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b18:	f7fe fa66 	bl	8000fe8 <HAL_GetTick>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	1ad3      	subs	r3, r2, r3
 8002b22:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d902      	bls.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	75fb      	strb	r3, [r7, #23]
            break;
 8002b2e:	e005      	b.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b30:	4b88      	ldr	r3, [pc, #544]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002b32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b34:	f003 0302 	and.w	r3, r3, #2
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d0ed      	beq.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8002b3c:	7dfb      	ldrb	r3, [r7, #23]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d126      	bne.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002b48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b4c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002b50:	d10d      	bne.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8002b52:	4880      	ldr	r0, [pc, #512]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002b54:	4b7f      	ldr	r3, [pc, #508]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002b56:	691b      	ldr	r3, [r3, #16]
 8002b58:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002b62:	0919      	lsrs	r1, r3, #4
 8002b64:	4b7d      	ldr	r3, [pc, #500]	; (8002d5c <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8002b66:	400b      	ands	r3, r1
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	6103      	str	r3, [r0, #16]
 8002b6c:	e005      	b.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8002b6e:	4a79      	ldr	r2, [pc, #484]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002b70:	4b78      	ldr	r3, [pc, #480]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002b72:	691b      	ldr	r3, [r3, #16]
 8002b74:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002b78:	6113      	str	r3, [r2, #16]
 8002b7a:	4976      	ldr	r1, [pc, #472]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002b7c:	4b75      	ldr	r3, [pc, #468]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002b7e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002b86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	670b      	str	r3, [r1, #112]	; 0x70
 8002b8e:	e004      	b.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002b90:	7dfb      	ldrb	r3, [r7, #23]
 8002b92:	75bb      	strb	r3, [r7, #22]
 8002b94:	e001      	b.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b96:	7dfb      	ldrb	r3, [r7, #23]
 8002b98:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0301 	and.w	r3, r3, #1
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d07d      	beq.n	8002ca2 <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002baa:	2b28      	cmp	r3, #40	; 0x28
 8002bac:	d866      	bhi.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8002bae:	a201      	add	r2, pc, #4	; (adr r2, 8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8002bb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bb4:	08002c83 	.word	0x08002c83
 8002bb8:	08002c7d 	.word	0x08002c7d
 8002bbc:	08002c7d 	.word	0x08002c7d
 8002bc0:	08002c7d 	.word	0x08002c7d
 8002bc4:	08002c7d 	.word	0x08002c7d
 8002bc8:	08002c7d 	.word	0x08002c7d
 8002bcc:	08002c7d 	.word	0x08002c7d
 8002bd0:	08002c7d 	.word	0x08002c7d
 8002bd4:	08002c59 	.word	0x08002c59
 8002bd8:	08002c7d 	.word	0x08002c7d
 8002bdc:	08002c7d 	.word	0x08002c7d
 8002be0:	08002c7d 	.word	0x08002c7d
 8002be4:	08002c7d 	.word	0x08002c7d
 8002be8:	08002c7d 	.word	0x08002c7d
 8002bec:	08002c7d 	.word	0x08002c7d
 8002bf0:	08002c7d 	.word	0x08002c7d
 8002bf4:	08002c6b 	.word	0x08002c6b
 8002bf8:	08002c7d 	.word	0x08002c7d
 8002bfc:	08002c7d 	.word	0x08002c7d
 8002c00:	08002c7d 	.word	0x08002c7d
 8002c04:	08002c7d 	.word	0x08002c7d
 8002c08:	08002c7d 	.word	0x08002c7d
 8002c0c:	08002c7d 	.word	0x08002c7d
 8002c10:	08002c7d 	.word	0x08002c7d
 8002c14:	08002c83 	.word	0x08002c83
 8002c18:	08002c7d 	.word	0x08002c7d
 8002c1c:	08002c7d 	.word	0x08002c7d
 8002c20:	08002c7d 	.word	0x08002c7d
 8002c24:	08002c7d 	.word	0x08002c7d
 8002c28:	08002c7d 	.word	0x08002c7d
 8002c2c:	08002c7d 	.word	0x08002c7d
 8002c30:	08002c7d 	.word	0x08002c7d
 8002c34:	08002c83 	.word	0x08002c83
 8002c38:	08002c7d 	.word	0x08002c7d
 8002c3c:	08002c7d 	.word	0x08002c7d
 8002c40:	08002c7d 	.word	0x08002c7d
 8002c44:	08002c7d 	.word	0x08002c7d
 8002c48:	08002c7d 	.word	0x08002c7d
 8002c4c:	08002c7d 	.word	0x08002c7d
 8002c50:	08002c7d 	.word	0x08002c7d
 8002c54:	08002c83 	.word	0x08002c83
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	3304      	adds	r3, #4
 8002c5c:	2101      	movs	r1, #1
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f000 fb18 	bl	8003294 <RCCEx_PLL2_Config>
 8002c64:	4603      	mov	r3, r0
 8002c66:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002c68:	e00c      	b.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	3324      	adds	r3, #36	; 0x24
 8002c6e:	2101      	movs	r1, #1
 8002c70:	4618      	mov	r0, r3
 8002c72:	f000 fbc1 	bl	80033f8 <RCCEx_PLL3_Config>
 8002c76:	4603      	mov	r3, r0
 8002c78:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002c7a:	e003      	b.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	75fb      	strb	r3, [r7, #23]
      break;
 8002c80:	e000      	b.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 8002c82:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c84:	7dfb      	ldrb	r3, [r7, #23]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d109      	bne.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002c8a:	4932      	ldr	r1, [pc, #200]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002c8c:	4b31      	ldr	r3, [pc, #196]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002c8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c90:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	654b      	str	r3, [r1, #84]	; 0x54
 8002c9c:	e001      	b.n	8002ca2 <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c9e:	7dfb      	ldrb	r3, [r7, #23]
 8002ca0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 0302 	and.w	r3, r3, #2
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d037      	beq.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cb2:	2b05      	cmp	r3, #5
 8002cb4:	d820      	bhi.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x860>
 8002cb6:	a201      	add	r2, pc, #4	; (adr r2, 8002cbc <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8002cb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cbc:	08002cff 	.word	0x08002cff
 8002cc0:	08002cd5 	.word	0x08002cd5
 8002cc4:	08002ce7 	.word	0x08002ce7
 8002cc8:	08002cff 	.word	0x08002cff
 8002ccc:	08002cff 	.word	0x08002cff
 8002cd0:	08002cff 	.word	0x08002cff
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	3304      	adds	r3, #4
 8002cd8:	2101      	movs	r1, #1
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f000 fada 	bl	8003294 <RCCEx_PLL2_Config>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002ce4:	e00c      	b.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	3324      	adds	r3, #36	; 0x24
 8002cea:	2101      	movs	r1, #1
 8002cec:	4618      	mov	r0, r3
 8002cee:	f000 fb83 	bl	80033f8 <RCCEx_PLL3_Config>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8002cf6:	e003      	b.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	75fb      	strb	r3, [r7, #23]
      break;
 8002cfc:	e000      	b.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 8002cfe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d00:	7dfb      	ldrb	r3, [r7, #23]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d109      	bne.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8002d06:	4913      	ldr	r1, [pc, #76]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002d08:	4b12      	ldr	r3, [pc, #72]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8002d0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d0c:	f023 0207 	bic.w	r2, r3, #7
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d14:	4313      	orrs	r3, r2
 8002d16:	654b      	str	r3, [r1, #84]	; 0x54
 8002d18:	e001      	b.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d1a:	7dfb      	ldrb	r3, [r7, #23]
 8002d1c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 0304 	and.w	r3, r3, #4
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d040      	beq.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d30:	2b05      	cmp	r3, #5
 8002d32:	d827      	bhi.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8002d34:	a201      	add	r2, pc, #4	; (adr r2, 8002d3c <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 8002d36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d3a:	bf00      	nop
 8002d3c:	08002d8b 	.word	0x08002d8b
 8002d40:	08002d61 	.word	0x08002d61
 8002d44:	08002d73 	.word	0x08002d73
 8002d48:	08002d8b 	.word	0x08002d8b
 8002d4c:	08002d8b 	.word	0x08002d8b
 8002d50:	08002d8b 	.word	0x08002d8b
 8002d54:	58024400 	.word	0x58024400
 8002d58:	58024800 	.word	0x58024800
 8002d5c:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	3304      	adds	r3, #4
 8002d64:	2101      	movs	r1, #1
 8002d66:	4618      	mov	r0, r3
 8002d68:	f000 fa94 	bl	8003294 <RCCEx_PLL2_Config>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8002d70:	e00c      	b.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	3324      	adds	r3, #36	; 0x24
 8002d76:	2101      	movs	r1, #1
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f000 fb3d 	bl	80033f8 <RCCEx_PLL3_Config>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8002d82:	e003      	b.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	75fb      	strb	r3, [r7, #23]
      break;
 8002d88:	e000      	b.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 8002d8a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d8c:	7dfb      	ldrb	r3, [r7, #23]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d10a      	bne.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002d92:	49b2      	ldr	r1, [pc, #712]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8002d94:	4bb1      	ldr	r3, [pc, #708]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8002d96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d98:	f023 0207 	bic.w	r2, r3, #7
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002da2:	4313      	orrs	r3, r2
 8002da4:	658b      	str	r3, [r1, #88]	; 0x58
 8002da6:	e001      	b.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002da8:	7dfb      	ldrb	r3, [r7, #23]
 8002daa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 0320 	and.w	r3, r3, #32
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d044      	beq.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002dbe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002dc2:	d01b      	beq.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x964>
 8002dc4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002dc8:	d805      	bhi.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d022      	beq.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8002dce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002dd2:	d00a      	beq.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x952>
 8002dd4:	e01b      	b.n	8002e0e <HAL_RCCEx_PeriphCLKConfig+0x976>
 8002dd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dda:	d01d      	beq.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x980>
 8002ddc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002de0:	d01c      	beq.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x984>
 8002de2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002de6:	d01b      	beq.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8002de8:	e011      	b.n	8002e0e <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	3304      	adds	r3, #4
 8002dee:	2100      	movs	r1, #0
 8002df0:	4618      	mov	r0, r3
 8002df2:	f000 fa4f 	bl	8003294 <RCCEx_PLL2_Config>
 8002df6:	4603      	mov	r3, r0
 8002df8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8002dfa:	e012      	b.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	3324      	adds	r3, #36	; 0x24
 8002e00:	2102      	movs	r1, #2
 8002e02:	4618      	mov	r0, r3
 8002e04:	f000 faf8 	bl	80033f8 <RCCEx_PLL3_Config>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8002e0c:	e009      	b.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	75fb      	strb	r3, [r7, #23]
      break;
 8002e12:	e006      	b.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8002e14:	bf00      	nop
 8002e16:	e004      	b.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8002e18:	bf00      	nop
 8002e1a:	e002      	b.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8002e1c:	bf00      	nop
 8002e1e:	e000      	b.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8002e20:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e22:	7dfb      	ldrb	r3, [r7, #23]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d10a      	bne.n	8002e3e <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002e28:	498c      	ldr	r1, [pc, #560]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8002e2a:	4b8c      	ldr	r3, [pc, #560]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8002e2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e2e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	654b      	str	r3, [r1, #84]	; 0x54
 8002e3c:	e001      	b.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e3e:	7dfb      	ldrb	r3, [r7, #23]
 8002e40:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d044      	beq.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002e54:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e58:	d01b      	beq.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 8002e5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e5e:	d805      	bhi.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d022      	beq.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8002e64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e68:	d00a      	beq.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8002e6a:	e01b      	b.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8002e6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e70:	d01d      	beq.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8002e72:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002e76:	d01c      	beq.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8002e78:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002e7c:	d01b      	beq.n	8002eb6 <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8002e7e:	e011      	b.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	3304      	adds	r3, #4
 8002e84:	2100      	movs	r1, #0
 8002e86:	4618      	mov	r0, r3
 8002e88:	f000 fa04 	bl	8003294 <RCCEx_PLL2_Config>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8002e90:	e012      	b.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	3324      	adds	r3, #36	; 0x24
 8002e96:	2102      	movs	r1, #2
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f000 faad 	bl	80033f8 <RCCEx_PLL3_Config>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8002ea2:	e009      	b.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	75fb      	strb	r3, [r7, #23]
      break;
 8002ea8:	e006      	b.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8002eaa:	bf00      	nop
 8002eac:	e004      	b.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8002eae:	bf00      	nop
 8002eb0:	e002      	b.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8002eb2:	bf00      	nop
 8002eb4:	e000      	b.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8002eb6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002eb8:	7dfb      	ldrb	r3, [r7, #23]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d10a      	bne.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002ebe:	4967      	ldr	r1, [pc, #412]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8002ec0:	4b66      	ldr	r3, [pc, #408]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8002ec2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ec4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	658b      	str	r3, [r1, #88]	; 0x58
 8002ed2:	e001      	b.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ed4:	7dfb      	ldrb	r3, [r7, #23]
 8002ed6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d044      	beq.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002eea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002eee:	d01b      	beq.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8002ef0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002ef4:	d805      	bhi.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d022      	beq.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8002efa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002efe:	d00a      	beq.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8002f00:	e01b      	b.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 8002f02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f06:	d01d      	beq.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8002f08:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8002f0c:	d01c      	beq.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 8002f0e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8002f12:	d01b      	beq.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8002f14:	e011      	b.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	3304      	adds	r3, #4
 8002f1a:	2100      	movs	r1, #0
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f000 f9b9 	bl	8003294 <RCCEx_PLL2_Config>
 8002f22:	4603      	mov	r3, r0
 8002f24:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8002f26:	e012      	b.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	3324      	adds	r3, #36	; 0x24
 8002f2c:	2102      	movs	r1, #2
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f000 fa62 	bl	80033f8 <RCCEx_PLL3_Config>
 8002f34:	4603      	mov	r3, r0
 8002f36:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8002f38:	e009      	b.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	75fb      	strb	r3, [r7, #23]
      break;
 8002f3e:	e006      	b.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8002f40:	bf00      	nop
 8002f42:	e004      	b.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8002f44:	bf00      	nop
 8002f46:	e002      	b.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8002f48:	bf00      	nop
 8002f4a:	e000      	b.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8002f4c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f4e:	7dfb      	ldrb	r3, [r7, #23]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d10a      	bne.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8002f54:	4941      	ldr	r1, [pc, #260]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8002f56:	4b41      	ldr	r3, [pc, #260]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8002f58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f5a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002f64:	4313      	orrs	r3, r2
 8002f66:	658b      	str	r3, [r1, #88]	; 0x58
 8002f68:	e001      	b.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f6a:	7dfb      	ldrb	r3, [r7, #23]
 8002f6c:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f003 0308 	and.w	r3, r3, #8
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d01a      	beq.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f84:	d10a      	bne.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	3324      	adds	r3, #36	; 0x24
 8002f8a:	2102      	movs	r1, #2
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f000 fa33 	bl	80033f8 <RCCEx_PLL3_Config>
 8002f92:	4603      	mov	r3, r0
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d001      	beq.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8002f9c:	492f      	ldr	r1, [pc, #188]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8002f9e:	4b2f      	ldr	r3, [pc, #188]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8002fa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fa2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002fac:	4313      	orrs	r3, r2
 8002fae:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 0310 	and.w	r3, r3, #16
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d01a      	beq.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fc6:	d10a      	bne.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	3324      	adds	r3, #36	; 0x24
 8002fcc:	2102      	movs	r1, #2
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f000 fa12 	bl	80033f8 <RCCEx_PLL3_Config>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d001      	beq.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002fde:	491f      	ldr	r1, [pc, #124]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8002fe0:	4b1e      	ldr	r3, [pc, #120]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8002fe2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fe4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d032      	beq.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003004:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003008:	d00d      	beq.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 800300a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800300e:	d016      	beq.n	800303e <HAL_RCCEx_PeriphCLKConfig+0xba6>
 8003010:	2b00      	cmp	r3, #0
 8003012:	d111      	bne.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	3304      	adds	r3, #4
 8003018:	2100      	movs	r1, #0
 800301a:	4618      	mov	r0, r3
 800301c:	f000 f93a 	bl	8003294 <RCCEx_PLL2_Config>
 8003020:	4603      	mov	r3, r0
 8003022:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003024:	e00c      	b.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	3324      	adds	r3, #36	; 0x24
 800302a:	2102      	movs	r1, #2
 800302c:	4618      	mov	r0, r3
 800302e:	f000 f9e3 	bl	80033f8 <RCCEx_PLL3_Config>
 8003032:	4603      	mov	r3, r0
 8003034:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003036:	e003      	b.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	75fb      	strb	r3, [r7, #23]
      break;
 800303c:	e000      	b.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 800303e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003040:	7dfb      	ldrb	r3, [r7, #23]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d10c      	bne.n	8003060 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003046:	4905      	ldr	r1, [pc, #20]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8003048:	4b04      	ldr	r3, [pc, #16]	; (800305c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800304a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800304c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003056:	4313      	orrs	r3, r2
 8003058:	658b      	str	r3, [r1, #88]	; 0x58
 800305a:	e003      	b.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 800305c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003060:	7dfb      	ldrb	r3, [r7, #23]
 8003062:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800306c:	2b00      	cmp	r3, #0
 800306e:	d02f      	beq.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003076:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800307a:	d00c      	beq.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800307c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003080:	d015      	beq.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0xc16>
 8003082:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003086:	d10f      	bne.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003088:	4a81      	ldr	r2, [pc, #516]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0xdf8>)
 800308a:	4b81      	ldr	r3, [pc, #516]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0xdf8>)
 800308c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800308e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003092:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8003094:	e00c      	b.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	3324      	adds	r3, #36	; 0x24
 800309a:	2101      	movs	r1, #1
 800309c:	4618      	mov	r0, r3
 800309e:	f000 f9ab 	bl	80033f8 <RCCEx_PLL3_Config>
 80030a2:	4603      	mov	r3, r0
 80030a4:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80030a6:	e003      	b.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	75fb      	strb	r3, [r7, #23]
      break;
 80030ac:	e000      	b.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 80030ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80030b0:	7dfb      	ldrb	r3, [r7, #23]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d10a      	bne.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80030b6:	4976      	ldr	r1, [pc, #472]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0xdf8>)
 80030b8:	4b75      	ldr	r3, [pc, #468]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0xdf8>)
 80030ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030bc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030c6:	4313      	orrs	r3, r2
 80030c8:	654b      	str	r3, [r1, #84]	; 0x54
 80030ca:	e001      	b.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030cc:	7dfb      	ldrb	r3, [r7, #23]
 80030ce:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d029      	beq.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d003      	beq.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0xc54>
 80030e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030e8:	d007      	beq.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0xc62>
 80030ea:	e00f      	b.n	800310c <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80030ec:	4a68      	ldr	r2, [pc, #416]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0xdf8>)
 80030ee:	4b68      	ldr	r3, [pc, #416]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0xdf8>)
 80030f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030f6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80030f8:	e00b      	b.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	3304      	adds	r3, #4
 80030fe:	2102      	movs	r1, #2
 8003100:	4618      	mov	r0, r3
 8003102:	f000 f8c7 	bl	8003294 <RCCEx_PLL2_Config>
 8003106:	4603      	mov	r3, r0
 8003108:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800310a:	e002      	b.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	75fb      	strb	r3, [r7, #23]
      break;
 8003110:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003112:	7dfb      	ldrb	r3, [r7, #23]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d109      	bne.n	800312c <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003118:	495d      	ldr	r1, [pc, #372]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0xdf8>)
 800311a:	4b5d      	ldr	r3, [pc, #372]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0xdf8>)
 800311c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800311e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003126:	4313      	orrs	r3, r2
 8003128:	64cb      	str	r3, [r1, #76]	; 0x4c
 800312a:	e001      	b.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800312c:	7dfb      	ldrb	r3, [r7, #23]
 800312e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003138:	2b00      	cmp	r3, #0
 800313a:	d00a      	beq.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	3324      	adds	r3, #36	; 0x24
 8003140:	2102      	movs	r1, #2
 8003142:	4618      	mov	r0, r3
 8003144:	f000 f958 	bl	80033f8 <RCCEx_PLL3_Config>
 8003148:	4603      	mov	r3, r0
 800314a:	2b00      	cmp	r3, #0
 800314c:	d001      	beq.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800315a:	2b00      	cmp	r3, #0
 800315c:	d02f      	beq.n	80031be <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003162:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003166:	d00c      	beq.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8003168:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800316c:	d802      	bhi.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 800316e:	2b00      	cmp	r3, #0
 8003170:	d011      	beq.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 8003172:	e00d      	b.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 8003174:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003178:	d00f      	beq.n	800319a <HAL_RCCEx_PeriphCLKConfig+0xd02>
 800317a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800317e:	d00e      	beq.n	800319e <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8003180:	e006      	b.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003182:	4a43      	ldr	r2, [pc, #268]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0xdf8>)
 8003184:	4b42      	ldr	r3, [pc, #264]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0xdf8>)
 8003186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003188:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800318c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800318e:	e007      	b.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	75fb      	strb	r3, [r7, #23]
      break;
 8003194:	e004      	b.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8003196:	bf00      	nop
 8003198:	e002      	b.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800319a:	bf00      	nop
 800319c:	e000      	b.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800319e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80031a0:	7dfb      	ldrb	r3, [r7, #23]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d109      	bne.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80031a6:	493a      	ldr	r1, [pc, #232]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0xdf8>)
 80031a8:	4b39      	ldr	r3, [pc, #228]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0xdf8>)
 80031aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80031b4:	4313      	orrs	r3, r2
 80031b6:	654b      	str	r3, [r1, #84]	; 0x54
 80031b8:	e001      	b.n	80031be <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031ba:	7dfb      	ldrb	r3, [r7, #23]
 80031bc:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d008      	beq.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80031ca:	4931      	ldr	r1, [pc, #196]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0xdf8>)
 80031cc:	4b30      	ldr	r3, [pc, #192]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0xdf8>)
 80031ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031d0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031d8:	4313      	orrs	r3, r2
 80031da:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d009      	beq.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80031e8:	4929      	ldr	r1, [pc, #164]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0xdf8>)
 80031ea:	4b29      	ldr	r3, [pc, #164]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0xdf8>)
 80031ec:	691b      	ldr	r3, [r3, #16]
 80031ee:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80031f8:	4313      	orrs	r3, r2
 80031fa:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003204:	2b00      	cmp	r3, #0
 8003206:	d008      	beq.n	800321a <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003208:	4921      	ldr	r1, [pc, #132]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0xdf8>)
 800320a:	4b21      	ldr	r3, [pc, #132]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0xdf8>)
 800320c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800320e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003216:	4313      	orrs	r3, r2
 8003218:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003222:	2b00      	cmp	r3, #0
 8003224:	d00d      	beq.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003226:	4a1a      	ldr	r2, [pc, #104]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0xdf8>)
 8003228:	4b19      	ldr	r3, [pc, #100]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0xdf8>)
 800322a:	691b      	ldr	r3, [r3, #16]
 800322c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003230:	6113      	str	r3, [r2, #16]
 8003232:	4917      	ldr	r1, [pc, #92]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0xdf8>)
 8003234:	4b16      	ldr	r3, [pc, #88]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0xdf8>)
 8003236:	691a      	ldr	r2, [r3, #16]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800323e:	4313      	orrs	r3, r2
 8003240:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	2b00      	cmp	r3, #0
 8003248:	da08      	bge.n	800325c <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800324a:	4911      	ldr	r1, [pc, #68]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0xdf8>)
 800324c:	4b10      	ldr	r3, [pc, #64]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0xdf8>)
 800324e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003250:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003258:	4313      	orrs	r3, r2
 800325a:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003264:	2b00      	cmp	r3, #0
 8003266:	d009      	beq.n	800327c <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003268:	4909      	ldr	r1, [pc, #36]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0xdf8>)
 800326a:	4b09      	ldr	r3, [pc, #36]	; (8003290 <HAL_RCCEx_PeriphCLKConfig+0xdf8>)
 800326c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800326e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003278:	4313      	orrs	r3, r2
 800327a:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800327c:	7dbb      	ldrb	r3, [r7, #22]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d101      	bne.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0xdee>
  {
    return HAL_OK;
 8003282:	2300      	movs	r3, #0
 8003284:	e000      	b.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0xdf0>
  }
  return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
}
 8003288:	4618      	mov	r0, r3
 800328a:	3718      	adds	r7, #24
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}
 8003290:	58024400 	.word	0x58024400

08003294 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b084      	sub	sp, #16
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
 800329c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800329e:	2300      	movs	r3, #0
 80032a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80032a2:	4b53      	ldr	r3, [pc, #332]	; (80033f0 <RCCEx_PLL2_Config+0x15c>)
 80032a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032a6:	f003 0303 	and.w	r3, r3, #3
 80032aa:	2b03      	cmp	r3, #3
 80032ac:	d101      	bne.n	80032b2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e099      	b.n	80033e6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80032b2:	4a4f      	ldr	r2, [pc, #316]	; (80033f0 <RCCEx_PLL2_Config+0x15c>)
 80032b4:	4b4e      	ldr	r3, [pc, #312]	; (80033f0 <RCCEx_PLL2_Config+0x15c>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80032bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032be:	f7fd fe93 	bl	8000fe8 <HAL_GetTick>
 80032c2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80032c4:	e008      	b.n	80032d8 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80032c6:	f7fd fe8f 	bl	8000fe8 <HAL_GetTick>
 80032ca:	4602      	mov	r2, r0
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	1ad3      	subs	r3, r2, r3
 80032d0:	2b02      	cmp	r3, #2
 80032d2:	d901      	bls.n	80032d8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80032d4:	2303      	movs	r3, #3
 80032d6:	e086      	b.n	80033e6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80032d8:	4b45      	ldr	r3, [pc, #276]	; (80033f0 <RCCEx_PLL2_Config+0x15c>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d1f0      	bne.n	80032c6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80032e4:	4942      	ldr	r1, [pc, #264]	; (80033f0 <RCCEx_PLL2_Config+0x15c>)
 80032e6:	4b42      	ldr	r3, [pc, #264]	; (80033f0 <RCCEx_PLL2_Config+0x15c>)
 80032e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ea:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	031b      	lsls	r3, r3, #12
 80032f4:	4313      	orrs	r3, r2
 80032f6:	628b      	str	r3, [r1, #40]	; 0x28
 80032f8:	493d      	ldr	r1, [pc, #244]	; (80033f0 <RCCEx_PLL2_Config+0x15c>)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	3b01      	subs	r3, #1
 8003300:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	3b01      	subs	r3, #1
 800330a:	025b      	lsls	r3, r3, #9
 800330c:	b29b      	uxth	r3, r3
 800330e:	431a      	orrs	r2, r3
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	68db      	ldr	r3, [r3, #12]
 8003314:	3b01      	subs	r3, #1
 8003316:	041b      	lsls	r3, r3, #16
 8003318:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800331c:	431a      	orrs	r2, r3
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	691b      	ldr	r3, [r3, #16]
 8003322:	3b01      	subs	r3, #1
 8003324:	061b      	lsls	r3, r3, #24
 8003326:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800332a:	4313      	orrs	r3, r2
 800332c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800332e:	4930      	ldr	r1, [pc, #192]	; (80033f0 <RCCEx_PLL2_Config+0x15c>)
 8003330:	4b2f      	ldr	r3, [pc, #188]	; (80033f0 <RCCEx_PLL2_Config+0x15c>)
 8003332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003334:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	695b      	ldr	r3, [r3, #20]
 800333c:	4313      	orrs	r3, r2
 800333e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003340:	492b      	ldr	r1, [pc, #172]	; (80033f0 <RCCEx_PLL2_Config+0x15c>)
 8003342:	4b2b      	ldr	r3, [pc, #172]	; (80033f0 <RCCEx_PLL2_Config+0x15c>)
 8003344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003346:	f023 0220 	bic.w	r2, r3, #32
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	699b      	ldr	r3, [r3, #24]
 800334e:	4313      	orrs	r3, r2
 8003350:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003352:	4a27      	ldr	r2, [pc, #156]	; (80033f0 <RCCEx_PLL2_Config+0x15c>)
 8003354:	4b26      	ldr	r3, [pc, #152]	; (80033f0 <RCCEx_PLL2_Config+0x15c>)
 8003356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003358:	f023 0310 	bic.w	r3, r3, #16
 800335c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800335e:	4924      	ldr	r1, [pc, #144]	; (80033f0 <RCCEx_PLL2_Config+0x15c>)
 8003360:	4b23      	ldr	r3, [pc, #140]	; (80033f0 <RCCEx_PLL2_Config+0x15c>)
 8003362:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003364:	4b23      	ldr	r3, [pc, #140]	; (80033f4 <RCCEx_PLL2_Config+0x160>)
 8003366:	4013      	ands	r3, r2
 8003368:	687a      	ldr	r2, [r7, #4]
 800336a:	69d2      	ldr	r2, [r2, #28]
 800336c:	00d2      	lsls	r2, r2, #3
 800336e:	4313      	orrs	r3, r2
 8003370:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003372:	4a1f      	ldr	r2, [pc, #124]	; (80033f0 <RCCEx_PLL2_Config+0x15c>)
 8003374:	4b1e      	ldr	r3, [pc, #120]	; (80033f0 <RCCEx_PLL2_Config+0x15c>)
 8003376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003378:	f043 0310 	orr.w	r3, r3, #16
 800337c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d106      	bne.n	8003392 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003384:	4a1a      	ldr	r2, [pc, #104]	; (80033f0 <RCCEx_PLL2_Config+0x15c>)
 8003386:	4b1a      	ldr	r3, [pc, #104]	; (80033f0 <RCCEx_PLL2_Config+0x15c>)
 8003388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800338a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800338e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003390:	e00f      	b.n	80033b2 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	2b01      	cmp	r3, #1
 8003396:	d106      	bne.n	80033a6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003398:	4a15      	ldr	r2, [pc, #84]	; (80033f0 <RCCEx_PLL2_Config+0x15c>)
 800339a:	4b15      	ldr	r3, [pc, #84]	; (80033f0 <RCCEx_PLL2_Config+0x15c>)
 800339c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800339e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80033a2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80033a4:	e005      	b.n	80033b2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80033a6:	4a12      	ldr	r2, [pc, #72]	; (80033f0 <RCCEx_PLL2_Config+0x15c>)
 80033a8:	4b11      	ldr	r3, [pc, #68]	; (80033f0 <RCCEx_PLL2_Config+0x15c>)
 80033aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80033b0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80033b2:	4a0f      	ldr	r2, [pc, #60]	; (80033f0 <RCCEx_PLL2_Config+0x15c>)
 80033b4:	4b0e      	ldr	r3, [pc, #56]	; (80033f0 <RCCEx_PLL2_Config+0x15c>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80033bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033be:	f7fd fe13 	bl	8000fe8 <HAL_GetTick>
 80033c2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80033c4:	e008      	b.n	80033d8 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80033c6:	f7fd fe0f 	bl	8000fe8 <HAL_GetTick>
 80033ca:	4602      	mov	r2, r0
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	1ad3      	subs	r3, r2, r3
 80033d0:	2b02      	cmp	r3, #2
 80033d2:	d901      	bls.n	80033d8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80033d4:	2303      	movs	r3, #3
 80033d6:	e006      	b.n	80033e6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80033d8:	4b05      	ldr	r3, [pc, #20]	; (80033f0 <RCCEx_PLL2_Config+0x15c>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d0f0      	beq.n	80033c6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80033e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	3710      	adds	r7, #16
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}
 80033ee:	bf00      	nop
 80033f0:	58024400 	.word	0x58024400
 80033f4:	ffff0007 	.word	0xffff0007

080033f8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b084      	sub	sp, #16
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
 8003400:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003402:	2300      	movs	r3, #0
 8003404:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003406:	4b53      	ldr	r3, [pc, #332]	; (8003554 <RCCEx_PLL3_Config+0x15c>)
 8003408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800340a:	f003 0303 	and.w	r3, r3, #3
 800340e:	2b03      	cmp	r3, #3
 8003410:	d101      	bne.n	8003416 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	e099      	b.n	800354a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003416:	4a4f      	ldr	r2, [pc, #316]	; (8003554 <RCCEx_PLL3_Config+0x15c>)
 8003418:	4b4e      	ldr	r3, [pc, #312]	; (8003554 <RCCEx_PLL3_Config+0x15c>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003420:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003422:	f7fd fde1 	bl	8000fe8 <HAL_GetTick>
 8003426:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003428:	e008      	b.n	800343c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800342a:	f7fd fddd 	bl	8000fe8 <HAL_GetTick>
 800342e:	4602      	mov	r2, r0
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	1ad3      	subs	r3, r2, r3
 8003434:	2b02      	cmp	r3, #2
 8003436:	d901      	bls.n	800343c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003438:	2303      	movs	r3, #3
 800343a:	e086      	b.n	800354a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800343c:	4b45      	ldr	r3, [pc, #276]	; (8003554 <RCCEx_PLL3_Config+0x15c>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003444:	2b00      	cmp	r3, #0
 8003446:	d1f0      	bne.n	800342a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003448:	4942      	ldr	r1, [pc, #264]	; (8003554 <RCCEx_PLL3_Config+0x15c>)
 800344a:	4b42      	ldr	r3, [pc, #264]	; (8003554 <RCCEx_PLL3_Config+0x15c>)
 800344c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800344e:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	051b      	lsls	r3, r3, #20
 8003458:	4313      	orrs	r3, r2
 800345a:	628b      	str	r3, [r1, #40]	; 0x28
 800345c:	493d      	ldr	r1, [pc, #244]	; (8003554 <RCCEx_PLL3_Config+0x15c>)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	3b01      	subs	r3, #1
 8003464:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	3b01      	subs	r3, #1
 800346e:	025b      	lsls	r3, r3, #9
 8003470:	b29b      	uxth	r3, r3
 8003472:	431a      	orrs	r2, r3
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	68db      	ldr	r3, [r3, #12]
 8003478:	3b01      	subs	r3, #1
 800347a:	041b      	lsls	r3, r3, #16
 800347c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003480:	431a      	orrs	r2, r3
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	691b      	ldr	r3, [r3, #16]
 8003486:	3b01      	subs	r3, #1
 8003488:	061b      	lsls	r3, r3, #24
 800348a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800348e:	4313      	orrs	r3, r2
 8003490:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003492:	4930      	ldr	r1, [pc, #192]	; (8003554 <RCCEx_PLL3_Config+0x15c>)
 8003494:	4b2f      	ldr	r3, [pc, #188]	; (8003554 <RCCEx_PLL3_Config+0x15c>)
 8003496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003498:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	695b      	ldr	r3, [r3, #20]
 80034a0:	4313      	orrs	r3, r2
 80034a2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80034a4:	492b      	ldr	r1, [pc, #172]	; (8003554 <RCCEx_PLL3_Config+0x15c>)
 80034a6:	4b2b      	ldr	r3, [pc, #172]	; (8003554 <RCCEx_PLL3_Config+0x15c>)
 80034a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034aa:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	699b      	ldr	r3, [r3, #24]
 80034b2:	4313      	orrs	r3, r2
 80034b4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80034b6:	4a27      	ldr	r2, [pc, #156]	; (8003554 <RCCEx_PLL3_Config+0x15c>)
 80034b8:	4b26      	ldr	r3, [pc, #152]	; (8003554 <RCCEx_PLL3_Config+0x15c>)
 80034ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80034c0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80034c2:	4924      	ldr	r1, [pc, #144]	; (8003554 <RCCEx_PLL3_Config+0x15c>)
 80034c4:	4b23      	ldr	r3, [pc, #140]	; (8003554 <RCCEx_PLL3_Config+0x15c>)
 80034c6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80034c8:	4b23      	ldr	r3, [pc, #140]	; (8003558 <RCCEx_PLL3_Config+0x160>)
 80034ca:	4013      	ands	r3, r2
 80034cc:	687a      	ldr	r2, [r7, #4]
 80034ce:	69d2      	ldr	r2, [r2, #28]
 80034d0:	00d2      	lsls	r2, r2, #3
 80034d2:	4313      	orrs	r3, r2
 80034d4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80034d6:	4a1f      	ldr	r2, [pc, #124]	; (8003554 <RCCEx_PLL3_Config+0x15c>)
 80034d8:	4b1e      	ldr	r3, [pc, #120]	; (8003554 <RCCEx_PLL3_Config+0x15c>)
 80034da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034e0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d106      	bne.n	80034f6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80034e8:	4a1a      	ldr	r2, [pc, #104]	; (8003554 <RCCEx_PLL3_Config+0x15c>)
 80034ea:	4b1a      	ldr	r3, [pc, #104]	; (8003554 <RCCEx_PLL3_Config+0x15c>)
 80034ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ee:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80034f2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80034f4:	e00f      	b.n	8003516 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d106      	bne.n	800350a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80034fc:	4a15      	ldr	r2, [pc, #84]	; (8003554 <RCCEx_PLL3_Config+0x15c>)
 80034fe:	4b15      	ldr	r3, [pc, #84]	; (8003554 <RCCEx_PLL3_Config+0x15c>)
 8003500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003502:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003506:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003508:	e005      	b.n	8003516 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800350a:	4a12      	ldr	r2, [pc, #72]	; (8003554 <RCCEx_PLL3_Config+0x15c>)
 800350c:	4b11      	ldr	r3, [pc, #68]	; (8003554 <RCCEx_PLL3_Config+0x15c>)
 800350e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003510:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003514:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8003516:	4a0f      	ldr	r2, [pc, #60]	; (8003554 <RCCEx_PLL3_Config+0x15c>)
 8003518:	4b0e      	ldr	r3, [pc, #56]	; (8003554 <RCCEx_PLL3_Config+0x15c>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003520:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003522:	f7fd fd61 	bl	8000fe8 <HAL_GetTick>
 8003526:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003528:	e008      	b.n	800353c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800352a:	f7fd fd5d 	bl	8000fe8 <HAL_GetTick>
 800352e:	4602      	mov	r2, r0
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	1ad3      	subs	r3, r2, r3
 8003534:	2b02      	cmp	r3, #2
 8003536:	d901      	bls.n	800353c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003538:	2303      	movs	r3, #3
 800353a:	e006      	b.n	800354a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800353c:	4b05      	ldr	r3, [pc, #20]	; (8003554 <RCCEx_PLL3_Config+0x15c>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003544:	2b00      	cmp	r3, #0
 8003546:	d0f0      	beq.n	800352a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8003548:	7bfb      	ldrb	r3, [r7, #15]
}
 800354a:	4618      	mov	r0, r3
 800354c:	3710      	adds	r7, #16
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}
 8003552:	bf00      	nop
 8003554:	58024400 	.word	0x58024400
 8003558:	ffff0007 	.word	0xffff0007

0800355c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b082      	sub	sp, #8
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
 8003564:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d101      	bne.n	8003570 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	e02b      	b.n	80035c8 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003576:	b2db      	uxtb	r3, r3
 8003578:	2b00      	cmp	r3, #0
 800357a:	d106      	bne.n	800358a <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2200      	movs	r2, #0
 8003580:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8003584:	6878      	ldr	r0, [r7, #4]
 8003586:	f7fd f8cd 	bl	8000724 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2202      	movs	r2, #2
 800358e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681a      	ldr	r2, [r3, #0]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	3304      	adds	r3, #4
 800359a:	4619      	mov	r1, r3
 800359c:	4610      	mov	r0, r2
 800359e:	f000 f9df 	bl	8003960 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6818      	ldr	r0, [r3, #0]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	461a      	mov	r2, r3
 80035ac:	6839      	ldr	r1, [r7, #0]
 80035ae:	f000 fa33 	bl	8003a18 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 80035b2:	4a07      	ldr	r2, [pc, #28]	; (80035d0 <HAL_SDRAM_Init+0x74>)
 80035b4:	4b06      	ldr	r3, [pc, #24]	; (80035d0 <HAL_SDRAM_Init+0x74>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80035bc:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2201      	movs	r2, #1
 80035c2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80035c6:	2300      	movs	r3, #0
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	3708      	adds	r7, #8
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}
 80035d0:	52004000 	.word	0x52004000

080035d4 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b086      	sub	sp, #24
 80035d8:	af00      	add	r7, sp, #0
 80035da:	60f8      	str	r0, [r7, #12]
 80035dc:	60b9      	str	r1, [r7, #8]
 80035de:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80035e6:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 80035e8:	7dfb      	ldrb	r3, [r7, #23]
 80035ea:	2b02      	cmp	r3, #2
 80035ec:	d101      	bne.n	80035f2 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 80035ee:	2302      	movs	r3, #2
 80035f0:	e021      	b.n	8003636 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 80035f2:	7dfb      	ldrb	r3, [r7, #23]
 80035f4:	2b01      	cmp	r3, #1
 80035f6:	d002      	beq.n	80035fe <HAL_SDRAM_SendCommand+0x2a>
 80035f8:	7dfb      	ldrb	r3, [r7, #23]
 80035fa:	2b05      	cmp	r3, #5
 80035fc:	d118      	bne.n	8003630 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2202      	movs	r2, #2
 8003602:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	687a      	ldr	r2, [r7, #4]
 800360c:	68b9      	ldr	r1, [r7, #8]
 800360e:	4618      	mov	r0, r3
 8003610:	f000 fa6c 	bl	8003aec <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	2b02      	cmp	r3, #2
 800361a:	d104      	bne.n	8003626 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2205      	movs	r2, #5
 8003620:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8003624:	e006      	b.n	8003634 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2201      	movs	r2, #1
 800362a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800362e:	e001      	b.n	8003634 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	e000      	b.n	8003636 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8003634:	2300      	movs	r3, #0
}
 8003636:	4618      	mov	r0, r3
 8003638:	3718      	adds	r7, #24
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}

0800363e <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800363e:	b580      	push	{r7, lr}
 8003640:	b082      	sub	sp, #8
 8003642:	af00      	add	r7, sp, #0
 8003644:	6078      	str	r0, [r7, #4]
 8003646:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800364e:	b2db      	uxtb	r3, r3
 8003650:	2b02      	cmp	r3, #2
 8003652:	d101      	bne.n	8003658 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8003654:	2302      	movs	r3, #2
 8003656:	e016      	b.n	8003686 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800365e:	b2db      	uxtb	r3, r3
 8003660:	2b01      	cmp	r3, #1
 8003662:	d10f      	bne.n	8003684 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2202      	movs	r2, #2
 8003668:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	6839      	ldr	r1, [r7, #0]
 8003672:	4618      	mov	r0, r3
 8003674:	f000 fa5e 	bl	8003b34 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2201      	movs	r2, #1
 800367c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8003680:	2300      	movs	r3, #0
 8003682:	e000      	b.n	8003686 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8003684:	2301      	movs	r3, #1
}
 8003686:	4618      	mov	r0, r3
 8003688:	3708      	adds	r7, #8
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}
	...

08003690 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b084      	sub	sp, #16
 8003694:	af00      	add	r7, sp, #0
 8003696:	60f8      	str	r0, [r7, #12]
 8003698:	60b9      	str	r1, [r7, #8]
 800369a:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d101      	bne.n	80036a6 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e03e      	b.n	8003724 <HAL_SRAM_Init+0x94>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d106      	bne.n	80036c0 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2200      	movs	r2, #0
 80036b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80036ba:	68f8      	ldr	r0, [r7, #12]
 80036bc:	f7fd f828 	bl	8000710 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	3308      	adds	r3, #8
 80036c8:	4619      	mov	r1, r3
 80036ca:	4610      	mov	r0, r2
 80036cc:	f000 f830 	bl	8003730 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	6818      	ldr	r0, [r3, #0]
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	461a      	mov	r2, r3
 80036da:	68b9      	ldr	r1, [r7, #8]
 80036dc:	f000 f8b8 	bl	8003850 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	6858      	ldr	r0, [r3, #4]
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	689a      	ldr	r2, [r3, #8]
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ec:	6879      	ldr	r1, [r7, #4]
 80036ee:	f000 f8ff 	bl	80038f0 <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	68fa      	ldr	r2, [r7, #12]
 80036f8:	6892      	ldr	r2, [r2, #8]
 80036fa:	68f9      	ldr	r1, [r7, #12]
 80036fc:	6809      	ldr	r1, [r1, #0]
 80036fe:	68f8      	ldr	r0, [r7, #12]
 8003700:	6880      	ldr	r0, [r0, #8]
 8003702:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8003706:	f041 0101 	orr.w	r1, r1, #1
 800370a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800370e:	4a07      	ldr	r2, [pc, #28]	; (800372c <HAL_SRAM_Init+0x9c>)
 8003710:	4b06      	ldr	r3, [pc, #24]	; (800372c <HAL_SRAM_Init+0x9c>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003718:	6013      	str	r3, [r2, #0]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2201      	movs	r2, #1
 800371e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 8003722:	2300      	movs	r3, #0
}
 8003724:	4618      	mov	r0, r3
 8003726:	3710      	adds	r7, #16
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}
 800372c:	52004000 	.word	0x52004000

08003730 <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 8003730:	b480      	push	{r7}
 8003732:	b087      	sub	sp, #28
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
 8003738:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_CONTINOUS_CLOCK(Init->ContinuousClock));
  assert_param(IS_FMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	681a      	ldr	r2, [r3, #0]
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	6819      	ldr	r1, [r3, #0]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003748:	f023 0101 	bic.w	r1, r3, #1
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	2b08      	cmp	r3, #8
 8003758:	d102      	bne.n	8003760 <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800375a:	2340      	movs	r3, #64	; 0x40
 800375c:	617b      	str	r3, [r7, #20]
 800375e:	e001      	b.n	8003764 <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8003760:	2300      	movs	r3, #0
 8003762:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8003770:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8003776:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 800377c:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8003782:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 8003788:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 800378e:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 8003794:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 800379a:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 80037a0:	431a      	orrs	r2, r3
              Init->WriteBurst);
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 80037a6:	4313      	orrs	r3, r2
 80037a8:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ae:	693a      	ldr	r2, [r7, #16]
 80037b0:	4313      	orrs	r3, r2
 80037b2:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->WriteFifo;
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037b8:	693a      	ldr	r2, [r7, #16]
 80037ba:	4313      	orrs	r3, r2
 80037bc:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037c2:	693a      	ldr	r2, [r7, #16]
 80037c4:	4313      	orrs	r3, r2
 80037c6:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCRx_MBKEN                |
 80037c8:	4b20      	ldr	r3, [pc, #128]	; (800384c <FMC_NORSRAM_Init+0x11c>)
 80037ca:	60fb      	str	r3, [r7, #12]
          FMC_BCRx_WAITEN               |
          FMC_BCRx_EXTMOD               |
          FMC_BCRx_ASYNCWAIT            |
          FMC_BCRx_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80037d2:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_WFDIS;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80037da:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCRx_CPSIZE;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 80037e2:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	6819      	ldr	r1, [r3, #0]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	43db      	mvns	r3, r3
 80037f6:	4019      	ands	r1, r3
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	4319      	orrs	r1, r3
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003806:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800380a:	d10c      	bne.n	8003826 <FMC_NORSRAM_Init+0xf6>
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d008      	beq.n	8003826 <FMC_NORSRAM_Init+0xf6>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003820:	431a      	orrs	r2, r3
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	601a      	str	r2, [r3, #0]
  }

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d006      	beq.n	800383c <FMC_NORSRAM_Init+0x10c>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003836:	431a      	orrs	r2, r3
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800383c:	2300      	movs	r3, #0
}
 800383e:	4618      	mov	r0, r3
 8003840:	371c      	adds	r7, #28
 8003842:	46bd      	mov	sp, r7
 8003844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003848:	4770      	bx	lr
 800384a:	bf00      	nop
 800384c:	0008fb7f 	.word	0x0008fb7f

08003850 <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8003850:	b480      	push	{r7}
 8003852:	b087      	sub	sp, #28
 8003854:	af00      	add	r7, sp, #0
 8003856:	60f8      	str	r0, [r7, #12]
 8003858:	60b9      	str	r1, [r7, #8]
 800385a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	1c5a      	adds	r2, r3, #1
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	1c59      	adds	r1, r3, #1
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800386a:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	6818      	ldr	r0, [r3, #0]
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	011b      	lsls	r3, r3, #4
 8003878:	4318      	orrs	r0, r3
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	689b      	ldr	r3, [r3, #8]
 800387e:	021b      	lsls	r3, r3, #8
 8003880:	4318      	orrs	r0, r3
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	68db      	ldr	r3, [r3, #12]
 8003886:	041b      	lsls	r3, r3, #16
 8003888:	4318      	orrs	r0, r3
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	691b      	ldr	r3, [r3, #16]
 800388e:	3b01      	subs	r3, #1
 8003890:	051b      	lsls	r3, r3, #20
 8003892:	4318      	orrs	r0, r3
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	695b      	ldr	r3, [r3, #20]
 8003898:	3b02      	subs	r3, #2
 800389a:	061b      	lsls	r3, r3, #24
 800389c:	4318      	orrs	r0, r3
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	699b      	ldr	r3, [r3, #24]
 80038a2:	4303      	orrs	r3, r0
 80038a4:	4319      	orrs	r1, r3
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80038b8:	d113      	bne.n	80038e2 <FMC_NORSRAM_Timing_Init+0x92>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80038c2:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	691b      	ldr	r3, [r3, #16]
 80038c8:	3b01      	subs	r3, #1
 80038ca:	051b      	lsls	r3, r3, #20
 80038cc:	697a      	ldr	r2, [r7, #20]
 80038ce:	4313      	orrs	r3, r2
 80038d0:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	431a      	orrs	r2, r3
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80038e2:	2300      	movs	r3, #0
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	371c      	adds	r7, #28
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr

080038f0 <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b085      	sub	sp, #20
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	60f8      	str	r0, [r7, #12]
 80038f8:	60b9      	str	r1, [r7, #8]
 80038fa:	607a      	str	r2, [r7, #4]
 80038fc:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003904:	d11d      	bne.n	8003942 <FMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	687a      	ldr	r2, [r7, #4]
 800390a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800390e:	4b13      	ldr	r3, [pc, #76]	; (800395c <FMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8003910:	4013      	ands	r3, r2
 8003912:	68ba      	ldr	r2, [r7, #8]
 8003914:	6811      	ldr	r1, [r2, #0]
 8003916:	68ba      	ldr	r2, [r7, #8]
 8003918:	6852      	ldr	r2, [r2, #4]
 800391a:	0112      	lsls	r2, r2, #4
 800391c:	4311      	orrs	r1, r2
 800391e:	68ba      	ldr	r2, [r7, #8]
 8003920:	6892      	ldr	r2, [r2, #8]
 8003922:	0212      	lsls	r2, r2, #8
 8003924:	4311      	orrs	r1, r2
 8003926:	68ba      	ldr	r2, [r7, #8]
 8003928:	6992      	ldr	r2, [r2, #24]
 800392a:	4311      	orrs	r1, r2
 800392c:	68ba      	ldr	r2, [r7, #8]
 800392e:	68d2      	ldr	r2, [r2, #12]
 8003930:	0412      	lsls	r2, r2, #16
 8003932:	430a      	orrs	r2, r1
 8003934:	ea43 0102 	orr.w	r1, r3, r2
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	687a      	ldr	r2, [r7, #4]
 800393c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8003940:	e005      	b.n	800394e <FMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	687a      	ldr	r2, [r7, #4]
 8003946:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800394a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800394e:	2300      	movs	r3, #0
}
 8003950:	4618      	mov	r0, r3
 8003952:	3714      	adds	r7, #20
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr
 800395c:	cff00000 	.word	0xcff00000

08003960 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8003960:	b480      	push	{r7}
 8003962:	b083      	sub	sp, #12
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
 8003968:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d121      	bne.n	80039b6 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	4b27      	ldr	r3, [pc, #156]	; (8003a14 <FMC_SDRAM_Init+0xb4>)
 8003978:	4013      	ands	r3, r2
 800397a:	683a      	ldr	r2, [r7, #0]
 800397c:	6851      	ldr	r1, [r2, #4]
 800397e:	683a      	ldr	r2, [r7, #0]
 8003980:	6892      	ldr	r2, [r2, #8]
 8003982:	4311      	orrs	r1, r2
 8003984:	683a      	ldr	r2, [r7, #0]
 8003986:	68d2      	ldr	r2, [r2, #12]
 8003988:	4311      	orrs	r1, r2
 800398a:	683a      	ldr	r2, [r7, #0]
 800398c:	6912      	ldr	r2, [r2, #16]
 800398e:	4311      	orrs	r1, r2
 8003990:	683a      	ldr	r2, [r7, #0]
 8003992:	6952      	ldr	r2, [r2, #20]
 8003994:	4311      	orrs	r1, r2
 8003996:	683a      	ldr	r2, [r7, #0]
 8003998:	6992      	ldr	r2, [r2, #24]
 800399a:	4311      	orrs	r1, r2
 800399c:	683a      	ldr	r2, [r7, #0]
 800399e:	69d2      	ldr	r2, [r2, #28]
 80039a0:	4311      	orrs	r1, r2
 80039a2:	683a      	ldr	r2, [r7, #0]
 80039a4:	6a12      	ldr	r2, [r2, #32]
 80039a6:	4311      	orrs	r1, r2
 80039a8:	683a      	ldr	r2, [r7, #0]
 80039aa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80039ac:	430a      	orrs	r2, r1
 80039ae:	431a      	orrs	r2, r3
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	601a      	str	r2, [r3, #0]
 80039b4:	e026      	b.n	8003a04 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	69d9      	ldr	r1, [r3, #28]
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	6a1b      	ldr	r3, [r3, #32]
 80039c6:	4319      	orrs	r1, r3
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039cc:	430b      	orrs	r3, r1
 80039ce:	431a      	orrs	r2, r3
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	685a      	ldr	r2, [r3, #4]
 80039d8:	4b0e      	ldr	r3, [pc, #56]	; (8003a14 <FMC_SDRAM_Init+0xb4>)
 80039da:	4013      	ands	r3, r2
 80039dc:	683a      	ldr	r2, [r7, #0]
 80039de:	6851      	ldr	r1, [r2, #4]
 80039e0:	683a      	ldr	r2, [r7, #0]
 80039e2:	6892      	ldr	r2, [r2, #8]
 80039e4:	4311      	orrs	r1, r2
 80039e6:	683a      	ldr	r2, [r7, #0]
 80039e8:	68d2      	ldr	r2, [r2, #12]
 80039ea:	4311      	orrs	r1, r2
 80039ec:	683a      	ldr	r2, [r7, #0]
 80039ee:	6912      	ldr	r2, [r2, #16]
 80039f0:	4311      	orrs	r1, r2
 80039f2:	683a      	ldr	r2, [r7, #0]
 80039f4:	6952      	ldr	r2, [r2, #20]
 80039f6:	4311      	orrs	r1, r2
 80039f8:	683a      	ldr	r2, [r7, #0]
 80039fa:	6992      	ldr	r2, [r2, #24]
 80039fc:	430a      	orrs	r2, r1
 80039fe:	431a      	orrs	r2, r3
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8003a04:	2300      	movs	r3, #0
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	370c      	adds	r7, #12
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a10:	4770      	bx	lr
 8003a12:	bf00      	nop
 8003a14:	ffff8000 	.word	0xffff8000

08003a18 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b085      	sub	sp, #20
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	60f8      	str	r0, [r7, #12]
 8003a20:	60b9      	str	r1, [r7, #8]
 8003a22:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d128      	bne.n	8003a7c <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	1e59      	subs	r1, r3, #1
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	3b01      	subs	r3, #1
 8003a3e:	011b      	lsls	r3, r3, #4
 8003a40:	4319      	orrs	r1, r3
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	3b01      	subs	r3, #1
 8003a48:	021b      	lsls	r3, r3, #8
 8003a4a:	4319      	orrs	r1, r3
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	68db      	ldr	r3, [r3, #12]
 8003a50:	3b01      	subs	r3, #1
 8003a52:	031b      	lsls	r3, r3, #12
 8003a54:	4319      	orrs	r1, r3
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	691b      	ldr	r3, [r3, #16]
 8003a5a:	3b01      	subs	r3, #1
 8003a5c:	041b      	lsls	r3, r3, #16
 8003a5e:	4319      	orrs	r1, r3
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	695b      	ldr	r3, [r3, #20]
 8003a64:	3b01      	subs	r3, #1
 8003a66:	051b      	lsls	r3, r3, #20
 8003a68:	4319      	orrs	r1, r3
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	699b      	ldr	r3, [r3, #24]
 8003a6e:	3b01      	subs	r3, #1
 8003a70:	061b      	lsls	r3, r3, #24
 8003a72:	430b      	orrs	r3, r1
 8003a74:	431a      	orrs	r2, r3
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	609a      	str	r2, [r3, #8]
 8003a7a:	e02d      	b.n	8003ad8 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	689a      	ldr	r2, [r3, #8]
 8003a80:	4b19      	ldr	r3, [pc, #100]	; (8003ae8 <FMC_SDRAM_Timing_Init+0xd0>)
 8003a82:	4013      	ands	r3, r2
 8003a84:	68ba      	ldr	r2, [r7, #8]
 8003a86:	68d2      	ldr	r2, [r2, #12]
 8003a88:	3a01      	subs	r2, #1
 8003a8a:	0311      	lsls	r1, r2, #12
 8003a8c:	68ba      	ldr	r2, [r7, #8]
 8003a8e:	6952      	ldr	r2, [r2, #20]
 8003a90:	3a01      	subs	r2, #1
 8003a92:	0512      	lsls	r2, r2, #20
 8003a94:	430a      	orrs	r2, r1
 8003a96:	431a      	orrs	r2, r3
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	68db      	ldr	r3, [r3, #12]
 8003aa0:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	1e59      	subs	r1, r3, #1
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	3b01      	subs	r3, #1
 8003ab0:	011b      	lsls	r3, r3, #4
 8003ab2:	4319      	orrs	r1, r3
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	3b01      	subs	r3, #1
 8003aba:	021b      	lsls	r3, r3, #8
 8003abc:	4319      	orrs	r1, r3
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	691b      	ldr	r3, [r3, #16]
 8003ac2:	3b01      	subs	r3, #1
 8003ac4:	041b      	lsls	r3, r3, #16
 8003ac6:	4319      	orrs	r1, r3
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	699b      	ldr	r3, [r3, #24]
 8003acc:	3b01      	subs	r3, #1
 8003ace:	061b      	lsls	r3, r3, #24
 8003ad0:	430b      	orrs	r3, r1
 8003ad2:	431a      	orrs	r2, r3
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 8003ad8:	2300      	movs	r3, #0
}
 8003ada:	4618      	mov	r0, r3
 8003adc:	3714      	adds	r7, #20
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae4:	4770      	bx	lr
 8003ae6:	bf00      	nop
 8003ae8:	ff0f0fff 	.word	0xff0f0fff

08003aec <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b085      	sub	sp, #20
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	60f8      	str	r0, [r7, #12]
 8003af4:	60b9      	str	r1, [r7, #8]
 8003af6:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | 
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	691a      	ldr	r2, [r3, #16]
 8003afc:	4b0c      	ldr	r3, [pc, #48]	; (8003b30 <FMC_SDRAM_SendCommand+0x44>)
 8003afe:	4013      	ands	r3, r2
 8003b00:	68ba      	ldr	r2, [r7, #8]
 8003b02:	6811      	ldr	r1, [r2, #0]
 8003b04:	68ba      	ldr	r2, [r7, #8]
 8003b06:	6852      	ldr	r2, [r2, #4]
 8003b08:	4311      	orrs	r1, r2
 8003b0a:	68ba      	ldr	r2, [r7, #8]
 8003b0c:	6892      	ldr	r2, [r2, #8]
 8003b0e:	3a01      	subs	r2, #1
 8003b10:	0152      	lsls	r2, r2, #5
 8003b12:	4311      	orrs	r1, r2
 8003b14:	68ba      	ldr	r2, [r7, #8]
 8003b16:	68d2      	ldr	r2, [r2, #12]
 8003b18:	0252      	lsls	r2, r2, #9
 8003b1a:	430a      	orrs	r2, r1
 8003b1c:	431a      	orrs	r2, r3
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	611a      	str	r2, [r3, #16]
             FMC_SDCMR_NRFS | FMC_SDCMR_MRD), ((Command->CommandMode) | 
             (Command->CommandTarget) | (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
             ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 8003b22:	2300      	movs	r3, #0
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	3714      	adds	r7, #20
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2e:	4770      	bx	lr
 8003b30:	ffc00000 	.word	0xffc00000

08003b34 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b083      	sub	sp, #12
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
 8003b3c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	695a      	ldr	r2, [r3, #20]
 8003b42:	4b07      	ldr	r3, [pc, #28]	; (8003b60 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 8003b44:	4013      	ands	r3, r2
 8003b46:	683a      	ldr	r2, [r7, #0]
 8003b48:	0052      	lsls	r2, r2, #1
 8003b4a:	431a      	orrs	r2, r3
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8003b50:	2300      	movs	r3, #0
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	370c      	adds	r7, #12
 8003b56:	46bd      	mov	sp, r7
 8003b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5c:	4770      	bx	lr
 8003b5e:	bf00      	nop
 8003b60:	ffffc001 	.word	0xffffc001

08003b64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003b64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003b9c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003b68:	f7fd f92c 	bl	8000dc4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003b6c:	480c      	ldr	r0, [pc, #48]	; (8003ba0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003b6e:	490d      	ldr	r1, [pc, #52]	; (8003ba4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003b70:	4a0d      	ldr	r2, [pc, #52]	; (8003ba8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003b72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003b74:	e002      	b.n	8003b7c <LoopCopyDataInit>

08003b76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003b76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003b78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003b7a:	3304      	adds	r3, #4

08003b7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003b7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003b7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003b80:	d3f9      	bcc.n	8003b76 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003b82:	4a0a      	ldr	r2, [pc, #40]	; (8003bac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003b84:	4c0a      	ldr	r4, [pc, #40]	; (8003bb0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003b86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003b88:	e001      	b.n	8003b8e <LoopFillZerobss>

08003b8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003b8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003b8c:	3204      	adds	r2, #4

08003b8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003b8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003b90:	d3fb      	bcc.n	8003b8a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003b92:	f000 f811 	bl	8003bb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003b96:	f7fc ffbb 	bl	8000b10 <main>
  bx  lr
 8003b9a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003b9c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003ba0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003ba4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8003ba8:	08003c40 	.word	0x08003c40
  ldr r2, =_sbss
 8003bac:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8003bb0:	200004d8 	.word	0x200004d8

08003bb4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003bb4:	e7fe      	b.n	8003bb4 <ADC3_IRQHandler>
	...

08003bb8 <__libc_init_array>:
 8003bb8:	b570      	push	{r4, r5, r6, lr}
 8003bba:	4e0d      	ldr	r6, [pc, #52]	; (8003bf0 <__libc_init_array+0x38>)
 8003bbc:	4c0d      	ldr	r4, [pc, #52]	; (8003bf4 <__libc_init_array+0x3c>)
 8003bbe:	1ba4      	subs	r4, r4, r6
 8003bc0:	10a4      	asrs	r4, r4, #2
 8003bc2:	2500      	movs	r5, #0
 8003bc4:	42a5      	cmp	r5, r4
 8003bc6:	d109      	bne.n	8003bdc <__libc_init_array+0x24>
 8003bc8:	4e0b      	ldr	r6, [pc, #44]	; (8003bf8 <__libc_init_array+0x40>)
 8003bca:	4c0c      	ldr	r4, [pc, #48]	; (8003bfc <__libc_init_array+0x44>)
 8003bcc:	f000 f820 	bl	8003c10 <_init>
 8003bd0:	1ba4      	subs	r4, r4, r6
 8003bd2:	10a4      	asrs	r4, r4, #2
 8003bd4:	2500      	movs	r5, #0
 8003bd6:	42a5      	cmp	r5, r4
 8003bd8:	d105      	bne.n	8003be6 <__libc_init_array+0x2e>
 8003bda:	bd70      	pop	{r4, r5, r6, pc}
 8003bdc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003be0:	4798      	blx	r3
 8003be2:	3501      	adds	r5, #1
 8003be4:	e7ee      	b.n	8003bc4 <__libc_init_array+0xc>
 8003be6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003bea:	4798      	blx	r3
 8003bec:	3501      	adds	r5, #1
 8003bee:	e7f2      	b.n	8003bd6 <__libc_init_array+0x1e>
 8003bf0:	08003c38 	.word	0x08003c38
 8003bf4:	08003c38 	.word	0x08003c38
 8003bf8:	08003c38 	.word	0x08003c38
 8003bfc:	08003c3c 	.word	0x08003c3c

08003c00 <memset>:
 8003c00:	4402      	add	r2, r0
 8003c02:	4603      	mov	r3, r0
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d100      	bne.n	8003c0a <memset+0xa>
 8003c08:	4770      	bx	lr
 8003c0a:	f803 1b01 	strb.w	r1, [r3], #1
 8003c0e:	e7f9      	b.n	8003c04 <memset+0x4>

08003c10 <_init>:
 8003c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c12:	bf00      	nop
 8003c14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c16:	bc08      	pop	{r3}
 8003c18:	469e      	mov	lr, r3
 8003c1a:	4770      	bx	lr

08003c1c <_fini>:
 8003c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c1e:	bf00      	nop
 8003c20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c22:	bc08      	pop	{r3}
 8003c24:	469e      	mov	lr, r3
 8003c26:	4770      	bx	lr
